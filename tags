!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCELERATION	test_mavros/include/test_mavros/tests/offboard_control.h	/^	ACCELERATION$/;"	e	enum:testsetup::__anon4
ACK_TIMEOUT_DT	mavros/src/plugins/command.cpp	/^	const ros::Duration ACK_TIMEOUT_DT;$/;"	m	class:mavplugin::CommandPlugin	file:
ACK_TIMEOUT_MS	mavros/src/plugins/command.cpp	/^	static constexpr int ACK_TIMEOUT_MS = 5000;$/;"	m	class:mavplugin::CommandPlugin	file:
ADD_IOSTAT	libmavconn/src/tcp.cpp	332;"	d	file:
ADD_IOSTAT	libmavconn/src/tcp.cpp	340;"	d	file:
ADD_STATUS	libmavconn/src/tcp.cpp	309;"	d	file:
ADD_STATUS	libmavconn/src/tcp.cpp	318;"	d	file:
AIRCRAFT_BASELINK_Q	mavros/src/lib/uas_frame_conversions.cpp	/^static const Eigen::Quaterniond AIRCRAFT_BASELINK_Q = UAS::quaternion_from_rpy(0.0, 0.0, 0.0);\/\/M_PI, 0.0, 0.0$/;"	v	file:
AIRCRAFT_TO_BASELINK	mavros/include/mavros/mavros_uas.h	/^		AIRCRAFT_TO_BASELINK,	\/\/!< change from expressed WRT aircraft frame to WRT to baselink frame$/;"	m	class:mavros::UAS::STATIC_TRANSFORM
ASSERT_QUATERNION	mavros/test/test_quaternion_utils.cpp	21;"	d	file:
ActuatorControlPlugin	mavros/src/plugins/actuator_control.cpp	/^	ActuatorControlPlugin() :$/;"	f	class:mavplugin::ActuatorControlPlugin
ActuatorControlPlugin	mavros/src/plugins/actuator_control.cpp	/^class ActuatorControlPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
AltitudePlugin	mavros/src/plugins/altitude.cpp	/^    AltitudePlugin() :$/;"	f	class:mavplugin::AltitudePlugin
AltitudePlugin	mavros/src/plugins/altitude.cpp	/^class AltitudePlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
BOOTUP_TIME_DT	mavros/src/plugins/param.cpp	/^	const ros::Duration BOOTUP_TIME_DT;$/;"	m	class:mavplugin::ParamPlugin	file:
BOOTUP_TIME_DT	mavros/src/plugins/waypoint.cpp	/^	const ros::Duration BOOTUP_TIME_DT;$/;"	m	class:mavplugin::WaypointPlugin	file:
BOOTUP_TIME_MS	mavros/src/plugins/param.cpp	/^	static constexpr int BOOTUP_TIME_MS = 10000;	\/\/!< APM boot time$/;"	m	class:mavplugin::ParamPlugin	file:
BOOTUP_TIME_MS	mavros/src/plugins/waypoint.cpp	/^	static constexpr int BOOTUP_TIME_MS = 15000;	\/\/! system startup delay before start pull$/;"	m	class:mavplugin::WaypointPlugin	file:
BatteryStatusDiag	mavros/src/plugins/sys_status.cpp	/^	BatteryStatusDiag(const std::string &name) :$/;"	f	class:mavplugin::BatteryStatusDiag
BatteryStatusDiag	mavros/src/plugins/sys_status.cpp	/^class BatteryStatusDiag : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavplugin	file:
CHUNK_TIMEOUT_MS	mavros/src/plugins/ftp.cpp	/^	static constexpr int CHUNK_TIMEOUT_MS = 200;$/;"	m	class:mavplugin::FTPPlugin	file:
CIRCLE	test_mavros/include/test_mavros/tests/offboard_control.h	/^	CIRCLE,$/;"	e	enum:testsetup::__anon5
CRC32_TAB	mavros/src/mavros/nuttx_crc32.py	/^CRC32_TAB = ($/;"	v
CSVDialect	mavros/src/mavros/mission.py	/^    class CSVDialect(csv.Dialect):$/;"	c	class:QGroundControlWP
CSVDialect	mavros/src/mavros/param.py	/^    class CSVDialect(csv.Dialect):$/;"	c	class:MissionPlannerParam
CSVDialect	mavros/src/mavros/param.py	/^    class CSVDialect(csv.Dialect):$/;"	c	class:QGroundControlParam
CamIMUSyncPlugin	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	CamIMUSyncPlugin() :$/;"	f	class:mavplugin::CamIMUSyncPlugin
CamIMUSyncPlugin	mavros_extras/src/plugins/cam_imu_sync.cpp	/^class CamIMUSyncPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
Checker	mavros/scripts/checkid	/^class Checker(object):$/;"	c
CommandPlugin	mavros/src/plugins/command.cpp	/^	CommandPlugin() :$/;"	f	class:mavplugin::CommandPlugin
CommandPlugin	mavros/src/plugins/command.cpp	/^class CommandPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
CommandTransaction	mavros/src/plugins/command.cpp	/^	explicit CommandTransaction(uint16_t command) :$/;"	f	class:mavplugin::CommandTransaction
CommandTransaction	mavros/src/plugins/command.cpp	/^class CommandTransaction {$/;"	c	namespace:mavplugin	file:
ConstPtr	libmavconn/include/mavconn/interface.h	/^	typedef boost::shared_ptr<MAVConnInterface const> ConstPtr;$/;"	t	class:mavconn::MAVConnInterface
ConstPtr	mavros/include/mavros/mavros_plugin.h	/^	typedef boost::shared_ptr<MavRosPlugin const> ConstPtr;$/;"	t	class:mavplugin::MavRosPlugin
Covariance3d	mavros/include/mavros/mavros_uas.h	/^	typedef boost::array<double, 9> Covariance3d;$/;"	t	class:mavros::UAS
Covariance6d	mavros/include/mavros/mavros_uas.h	/^	typedef boost::array<double, 36> Covariance6d;$/;"	t	class:mavros::UAS
DATA_MAXSZ	mavros/src/plugins/ftp.cpp	/^	static const uint8_t	DATA_MAXSZ = MAVLINK_MSG_FILE_TRANSFER_PROTOCOL_FIELD_PAYLOAD_LEN - sizeof(PayloadHeader);$/;"	m	class:mavplugin::FTPRequest	file:
DEFAULT_NAMESPACE	mavros/src/mavros/__init__.py	/^DEFAULT_NAMESPACE = '\/mavros'$/;"	v
DEGREES_PER_RADIAN	mavros/include/mavros/gps_conversions.h	/^const double DEGREES_PER_RADIAN = 180.0\/M_PI;$/;"	m	namespace:UTM
DEG_TO_RAD	mavros/src/lib/uas_sensor_orientation.cpp	19;"	d	file:
DIRENT_DIR	mavros/src/plugins/ftp.cpp	/^	static const char	DIRENT_DIR = 'D';$/;"	m	class:mavplugin::FTPRequest	file:
DIRENT_FILE	mavros/src/plugins/ftp.cpp	/^	static const char	DIRENT_FILE = 'F';$/;"	m	class:mavplugin::FTPRequest	file:
DIRENT_SKIP	mavros/src/plugins/ftp.cpp	/^	static const char	DIRENT_SKIP = 'S';$/;"	m	class:mavplugin::FTPRequest	file:
DeviceError	libmavconn/include/mavconn/interface.h	/^	DeviceError(const char *module, T msg) :$/;"	f	class:mavconn::DeviceError
DeviceError	libmavconn/include/mavconn/interface.h	/^class DeviceError : public std::runtime_error {$/;"	c	namespace:mavconn
DirectoryOfThisScript	.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
DistanceSensorItem	mavros_extras/src/plugins/distance_sensor.cpp	/^	DistanceSensorItem() :$/;"	f	class:mavplugin::DistanceSensorItem
DistanceSensorItem	mavros_extras/src/plugins/distance_sensor.cpp	/^class DistanceSensorItem {$/;"	c	namespace:mavplugin	file:
DistanceSensorPlugin	mavros_extras/src/plugins/distance_sensor.cpp	/^	DistanceSensorPlugin() :$/;"	f	class:mavplugin::DistanceSensorPlugin
DistanceSensorPlugin	mavros_extras/src/plugins/distance_sensor.cpp	/^class DistanceSensorPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
DummyPlugin	mavros/src/plugins/dummy.cpp	/^	DummyPlugin() :$/;"	f	class:mavplugin::DummyPlugin
DummyPlugin	mavros/src/plugins/dummy.cpp	/^class DummyPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
EIGHT	test_mavros/include/test_mavros/tests/offboard_control.h	/^	EIGHT,$/;"	e	enum:testsetup::__anon5
ELLIPSE	test_mavros/include/test_mavros/tests/offboard_control.h	/^	ELLIPSE$/;"	e	enum:testsetup::__anon5
ENU_TO_NED	mavros/include/mavros/mavros_uas.h	/^		ENU_TO_NED,	\/\/!< change from expressed WRT ENU frame to WRT NED frame$/;"	m	class:mavros::UAS::STATIC_TRANSFORM
EXPECT_QUATERNION	mavros/test/test_frame_conversions.cpp	17;"	d	file:
EXPECT_QUATERNION	mavros/test/test_quaternion_utils.cpp	27;"	d	file:
EXPECT_QUATERNION	mavros/test/test_sensor_orientation.cpp	16;"	d	file:
EigenMapConstCovariance3d	mavros/include/mavros/mavros_uas.h	/^	typedef Eigen::Map<const Eigen::Matrix<double, 3, 3, Eigen::RowMajor> > EigenMapConstCovariance3d;$/;"	t	class:mavros::UAS
EigenMapConstCovariance6d	mavros/include/mavros/mavros_uas.h	/^	typedef Eigen::Map<const Eigen::Matrix<double, 6, 6, Eigen::RowMajor> > EigenMapConstCovariance6d;$/;"	t	class:mavros::UAS
EigenMapCovariance3d	mavros/include/mavros/mavros_uas.h	/^	typedef Eigen::Map<Eigen::Matrix<double, 3, 3, Eigen::RowMajor> > EigenMapCovariance3d;$/;"	t	class:mavros::UAS
EigenMapCovariance6d	mavros/include/mavros/mavros_uas.h	/^	typedef Eigen::Map<Eigen::Matrix<double, 6, 6, Eigen::RowMajor> > EigenMapCovariance6d;$/;"	t	class:mavros::UAS
EventHandler	mavros/src/mavros/event_launcher.py	/^class EventHandler(object):$/;"	c
FRAMES	mavros/src/mavros/mission.py	/^FRAMES = {$/;"	v
FTPFile	mavros/src/mavros/ftp.py	/^class FTPFile(object):$/;"	c
FTPPlugin	mavros/src/plugins/ftp.cpp	/^	FTPPlugin() :$/;"	f	class:mavplugin::FTPPlugin
FTPPlugin	mavros/src/plugins/ftp.cpp	/^class FTPPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
FTPRequest	mavros/src/plugins/ftp.cpp	/^	FTPRequest() :$/;"	f	class:mavplugin::FTPRequest
FTPRequest	mavros/src/plugins/ftp.cpp	/^	explicit FTPRequest(Opcode op, uint8_t session = 0) :$/;"	f	class:mavplugin::FTPRequest
FTPRequest	mavros/src/plugins/ftp.cpp	/^class FTPRequest {$/;"	c	namespace:mavplugin	file:
FTP_PAGE_SIZE	mavros/scripts/mavftp	/^FTP_PAGE_SIZE = 239 * 18 - 1$/;"	v
FTP_PWD_FILE	mavros/scripts/mavftp	/^FTP_PWD_FILE = '\/tmp\/.mavftp_pwd'$/;"	v
FlagsForFile	.ycm_extra_conf.py	/^def FlagsForFile(filename):$/;"	f
GAUSS_TO_TESLA	mavros/src/plugins/imu_pub.cpp	/^static constexpr double GAUSS_TO_TESLA = 1.0e-4;$/;"	m	namespace:mavplugin	file:
GetCompilationDatabaseFolder	.ycm_extra_conf.py	/^def GetCompilationDatabaseFolder(filename):$/;"	f
GetCompilationInfoForFile	.ycm_extra_conf.py	/^def GetCompilationInfoForFile(filename, database):$/;"	f
GetCompilationInfoForHeaderRos	.ycm_extra_conf.py	/^def GetCompilationInfoForHeaderRos(headerfile, database):$/;"	f
GetCompilationInfoForHeaderSameDir	.ycm_extra_conf.py	/^def GetCompilationInfoForHeaderSameDir(headerfile, database):$/;"	f
GetDatabase	.ycm_extra_conf.py	/^def GetDatabase(compilation_database_folder):$/;"	f
GetRosIncludeFlags	.ycm_extra_conf.py	/^def GetRosIncludeFlags():$/;"	f
GetRosIncludePaths	.ycm_extra_conf.py	/^def GetRosIncludePaths():$/;"	f
GlobalPositionPlugin	mavros/src/plugins/global_position.cpp	/^	GlobalPositionPlugin() :$/;"	f	class:mavplugin::GlobalPositionPlugin
GlobalPositionPlugin	mavros/src/plugins/global_position.cpp	/^class GlobalPositionPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
HeartbeatStatus	mavros/src/plugins/sys_status.cpp	/^	HeartbeatStatus(const std::string &name, size_t win_size) :$/;"	f	class:mavplugin::HeartbeatStatus
HeartbeatStatus	mavros/src/plugins/sys_status.cpp	/^class HeartbeatStatus : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavplugin	file:
HwStatus	mavros/src/plugins/sys_status.cpp	/^	HwStatus(const std::string &name) :$/;"	f	class:mavplugin::HwStatus
HwStatus	mavros/src/plugins/sys_status.cpp	/^class HwStatus : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavplugin	file:
IFSET_RC_IN	mavros/src/plugins/rc_io.cpp	123;"	d	file:
IFSET_RC_IN	mavros/src/plugins/rc_io.cpp	144;"	d	file:
IMUPubPlugin	mavros/src/plugins/imu_pub.cpp	/^	IMUPubPlugin() :$/;"	f	class:mavplugin::IMUPubPlugin
IMUPubPlugin	mavros/src/plugins/imu_pub.cpp	/^class IMUPubPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
IOStat	libmavconn/include/mavconn/interface.h	/^	struct IOStat {$/;"	s	class:mavconn::MAVConnInterface
ImagePubPlugin	mavros_extras/src/plugins/image_pub.cpp	/^	ImagePubPlugin() :$/;"	f	class:mavplugin::ImagePubPlugin
ImagePubPlugin	mavros_extras/src/plugins/image_pub.cpp	/^class ImagePubPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
IsHeaderFile	.ycm_extra_conf.py	/^def IsHeaderFile(filename):$/;"	f
LIST_TIMEOUT_DT	mavros/src/plugins/param.cpp	/^	const ros::Duration LIST_TIMEOUT_DT;$/;"	m	class:mavplugin::ParamPlugin	file:
LIST_TIMEOUT_DT	mavros/src/plugins/waypoint.cpp	/^	const ros::Duration LIST_TIMEOUT_DT;$/;"	m	class:mavplugin::WaypointPlugin	file:
LIST_TIMEOUT_MS	mavros/src/plugins/ftp.cpp	/^	static constexpr int LIST_TIMEOUT_MS = 5000;$/;"	m	class:mavplugin::FTPPlugin	file:
LIST_TIMEOUT_MS	mavros/src/plugins/param.cpp	/^	static constexpr int LIST_TIMEOUT_MS = 30000;	\/\/!< Receive all time$/;"	m	class:mavplugin::ParamPlugin	file:
LIST_TIMEOUT_MS	mavros/src/plugins/waypoint.cpp	/^	static constexpr int LIST_TIMEOUT_MS = 30000;	\/\/! Timeout for pull\/push operations$/;"	m	class:mavplugin::WaypointPlugin	file:
LLtoUTM	mavros/include/mavros/gps_conversions.h	/^static inline void LLtoUTM(const double Lat, const double Long,$/;"	f	namespace:UTM
Launcher	mavros/src/mavros/event_launcher.py	/^class Launcher(object):$/;"	c
LocalPositionPlugin	mavros/src/plugins/local_position.cpp	/^	LocalPositionPlugin() :$/;"	f	class:mavplugin::LocalPositionPlugin
LocalPositionPlugin	mavros/src/plugins/local_position.cpp	/^class LocalPositionPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
MAVConnInterface	libmavconn/include/mavconn/interface.h	/^class MAVConnInterface {$/;"	c	namespace:mavconn
MAVConnInterface	libmavconn/src/interface.cpp	/^MAVConnInterface::MAVConnInterface(uint8_t system_id, uint8_t component_id) :$/;"	f	class:mavconn::MAVConnInterface
MAVConnSerial	libmavconn/include/mavconn/serial.h	/^class MAVConnSerial : public MAVConnInterface {$/;"	c	namespace:mavconn
MAVConnSerial	libmavconn/src/serial.cpp	/^MAVConnSerial::MAVConnSerial(uint8_t system_id, uint8_t component_id,$/;"	f	class:mavconn::MAVConnSerial
MAVConnTCPClient	libmavconn/include/mavconn/tcp.h	/^class MAVConnTCPClient : public MAVConnInterface {$/;"	c	namespace:mavconn
MAVConnTCPClient	libmavconn/src/tcp.cpp	/^MAVConnTCPClient::MAVConnTCPClient(uint8_t system_id, uint8_t component_id,$/;"	f	class:mavconn::MAVConnTCPClient
MAVConnTCPServer	libmavconn/include/mavconn/tcp.h	/^class MAVConnTCPServer : public MAVConnInterface {$/;"	c	namespace:mavconn
MAVConnTCPServer	libmavconn/src/tcp.cpp	/^MAVConnTCPServer::MAVConnTCPServer(uint8_t system_id, uint8_t component_id,$/;"	f	class:mavconn::MAVConnTCPServer
MAVConnUDP	libmavconn/include/mavconn/udp.h	/^class MAVConnUDP : public MAVConnInterface {$/;"	c	namespace:mavconn
MAVConnUDP	libmavconn/src/udp.cpp	/^MAVConnUDP::MAVConnUDP(uint8_t system_id, uint8_t component_id,$/;"	f	class:mavconn::MAVConnUDP
MAVLINK_DIALECT	libmavconn/include/mavconn/mavlink_dialect.h	21;"	d
MAVLINK_GET_CHANNEL_BUFFER	libmavconn/include/mavconn/mavlink_dialect.h	29;"	d
MAVLINK_GET_CHANNEL_STATUS	libmavconn/include/mavconn/mavlink_dialect.h	28;"	d
MAX_BUFFER_RESERVE_DIFF	mavros_extras/src/plugins/image_pub.cpp	/^	static constexpr size_t MAX_BUFFER_RESERVE_DIFF = 0x20000;$/;"	m	class:mavplugin::ImagePubPlugin	file:
MAX_RESERVE_DIFF	mavros/src/plugins/ftp.cpp	/^	static constexpr size_t MAX_RESERVE_DIFF = 0x10000;$/;"	m	class:mavplugin::FTPPlugin	file:
MAX_SIZE	libmavconn/include/mavconn/msgbuffer.h	/^	static constexpr ssize_t MAX_SIZE = MAVLINK_MAX_PACKET_LEN + 2 + 7;$/;"	m	struct:mavconn::MsgBuffer
MESSAGE_HANDLER	mavros/include/mavros/mavros_plugin.h	33;"	d
MILLIBAR_TO_PASCAL	mavros/src/plugins/imu_pub.cpp	/^static constexpr double MILLIBAR_TO_PASCAL = 1.0e2;$/;"	m	namespace:mavplugin	file:
MILLIG_TO_MS2	mavros/src/plugins/imu_pub.cpp	/^static constexpr double MILLIG_TO_MS2 = 9.80665 \/ 1000.0;$/;"	m	namespace:mavplugin	file:
MILLIRS_TO_RADSEC	mavros/src/plugins/imu_pub.cpp	/^static constexpr double MILLIRS_TO_RADSEC = 1.0e-3;$/;"	m	namespace:mavplugin	file:
MILLIT_TO_TESLA	mavros/src/plugins/imu_pub.cpp	/^static constexpr double MILLIT_TO_TESLA = 1000.0;$/;"	m	namespace:mavplugin	file:
MakeRelativePathsInFlagsAbsolute	.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute(flags, working_directory):$/;"	f
ManualControlPlugin	mavros/src/plugins/manual_control.cpp	/^	ManualControlPlugin() :$/;"	f	class:mavplugin::ManualControlPlugin
ManualControlPlugin	mavros/src/plugins/manual_control.cpp	/^class ManualControlPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
MavFtp	mavros_extras/scripts/mavftpfuse	/^class MavFtp(RosLoggingMixIn, Operations):$/;"	c
MavRos	mavros/include/mavros/mavros.h	/^class MavRos$/;"	c	namespace:mavros
MavRos	mavros/src/lib/mavros.cpp	/^MavRos::MavRos() :$/;"	f	class:MavRos
MavRosPlugin	mavros/include/mavros/mavros_plugin.h	/^	MavRosPlugin() {};$/;"	f	class:mavplugin::MavRosPlugin
MavRosPlugin	mavros/include/mavros/mavros_plugin.h	/^class MavRosPlugin$/;"	c	namespace:mavplugin
Mavlink	mavros/include/mavros/utils.h	/^typedef mavros_msgs::Mavlink Mavlink __attribute__((deprecated));$/;"	t	namespace:mavros
MavlinkDiag	mavros/include/mavros/mavlink_diag.h	/^class MavlinkDiag : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavros
MavlinkDiag	mavros/src/lib/mavlink_diag.cpp	/^MavlinkDiag::MavlinkDiag(std::string name) :$/;"	f	class:MavlinkDiag
MavlinkPtr	mavros/include/mavros/utils.h	/^typedef mavros_msgs::MavlinkPtr MavlinkPtr __attribute__((deprecated));$/;"	t	namespace:mavros
MemInfo	mavros/src/plugins/sys_status.cpp	/^	MemInfo(const std::string &name) :$/;"	f	class:mavplugin::MemInfo
MemInfo	mavros/src/plugins/sys_status.cpp	/^class MemInfo : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavplugin	file:
MessageSig	libmavconn/include/mavconn/interface.h	/^	typedef sig2::signal<void(const mavlink_message_t *message, uint8_t system_id, uint8_t component_id)> MessageSig;$/;"	t	class:mavconn::MAVConnInterface
MissionPlannerParam	mavros/src/mavros/param.py	/^class MissionPlannerParam(ParamFile):$/;"	c
MocapPoseEstimatePlugin	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	MocapPoseEstimatePlugin() :$/;"	f	class:mavplugin::MocapPoseEstimatePlugin
MocapPoseEstimatePlugin	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^class MocapPoseEstimatePlugin : public MavRosPlugin$/;"	c	namespace:mavplugin	file:
MsgBuffer	libmavconn/include/mavconn/msgbuffer.h	/^	MsgBuffer() :$/;"	f	struct:mavconn::MsgBuffer
MsgBuffer	libmavconn/include/mavconn/msgbuffer.h	/^	MsgBuffer(const uint8_t *bytes, ssize_t nbytes) :$/;"	f	struct:mavconn::MsgBuffer
MsgBuffer	libmavconn/include/mavconn/msgbuffer.h	/^	explicit MsgBuffer(const mavlink_message_t *msg) :$/;"	f	struct:mavconn::MsgBuffer
MsgBuffer	libmavconn/include/mavconn/msgbuffer.h	/^struct MsgBuffer {$/;"	s	namespace:mavconn
NAV_CMDS	mavros/src/mavros/mission.py	/^NAV_CMDS = {$/;"	v
NED_ENU_Q	mavros/src/lib/uas_frame_conversions.cpp	/^static const Eigen::Quaterniond NED_ENU_Q = UAS::quaternion_from_rpy(M_PI, 0.0, M_PI);\/\/M_PI_2$/;"	v	file:
NED_TO_ENU	mavros/include/mavros/mavros_uas.h	/^		NED_TO_ENU,	\/\/!< will change orinetation from being expressed WRT NED frame to WRT ENU frame$/;"	m	class:mavros::UAS::STATIC_TRANSFORM
OPEN_TIMEOUT_MS	mavros/src/plugins/ftp.cpp	/^	static constexpr int OPEN_TIMEOUT_MS = 200;$/;"	m	class:mavplugin::FTPPlugin	file:
OP_ACK	mavros/src/plugins/ftp.cpp	/^		OP_ACK,$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OP_CHECKSUM	mavros/src/plugins/ftp.cpp	/^		OP_CHECKSUM$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OP_IDLE	mavros/src/plugins/ftp.cpp	/^		OP_IDLE,$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OP_LIST	mavros/src/plugins/ftp.cpp	/^		OP_LIST,$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OP_OPEN	mavros/src/plugins/ftp.cpp	/^		OP_OPEN,$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OP_READ	mavros/src/plugins/ftp.cpp	/^		OP_READ,$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OP_WRITE	mavros/src/plugins/ftp.cpp	/^		OP_WRITE,$/;"	e	enum:mavplugin::FTPPlugin::OpState	file:
OffboardControl	test_mavros/include/test_mavros/tests/offboard_control.h	/^	OffboardControl() :$/;"	f	class:testsetup::OffboardControl
OffboardControl	test_mavros/include/test_mavros/tests/offboard_control.h	/^class OffboardControl {$/;"	c	namespace:testsetup
OpState	mavros/src/plugins/ftp.cpp	/^	enum OpState {$/;"	g	class:mavplugin::FTPPlugin	file:
OrientationPair	mavros/src/lib/uas_sensor_orientation.cpp	/^typedef std::pair<const std::string, const Eigen::Quaterniond> OrientationPair;$/;"	t	file:
PARAM_TIMEOUT_DT	mavros/src/plugins/param.cpp	/^	const ros::Duration PARAM_TIMEOUT_DT;$/;"	m	class:mavplugin::ParamPlugin	file:
PARAM_TIMEOUT_MS	mavros/src/plugins/param.cpp	/^	static constexpr int PARAM_TIMEOUT_MS = 1000;	\/\/!< Param wait time$/;"	m	class:mavplugin::ParamPlugin	file:
PFX	libmavconn/src/interface.cpp	30;"	d	file:
PFXd	libmavconn/src/serial.cpp	31;"	d	file:
PFXd	libmavconn/src/tcp.cpp	32;"	d	file:
PFXd	libmavconn/src/udp.cpp	32;"	d	file:
PIDController	test_mavros/include/test_mavros/utils/pid_controller.h	/^class PIDController$/;"	c	namespace:pidcontroller
PIDController	test_mavros/sitl_test/lib/pid_controller.cpp	/^PIDController::PIDController()$/;"	f	class:PIDController
POSITION	test_mavros/include/test_mavros/tests/offboard_control.h	/^	POSITION,$/;"	e	enum:testsetup::__anon4
PR_IDLE	mavros/src/plugins/param.cpp	/^		PR_IDLE,$/;"	e	enum:mavplugin::ParamPlugin::__anon2	file:
PR_RXLIST	mavros/src/plugins/param.cpp	/^		PR_RXLIST,$/;"	e	enum:mavplugin::ParamPlugin::__anon2	file:
PR_RXPARAM	mavros/src/plugins/param.cpp	/^		PR_RXPARAM,$/;"	e	enum:mavplugin::ParamPlugin::__anon2	file:
PR_TXPARAM	mavros/src/plugins/param.cpp	/^		PR_TXPARAM$/;"	e	enum:mavplugin::ParamPlugin::__anon2	file:
PX4FlowPlugin	mavros_extras/src/plugins/px4flow.cpp	/^	PX4FlowPlugin() :$/;"	f	class:mavplugin::PX4FlowPlugin
PX4FlowPlugin	mavros_extras/src/plugins/px4flow.cpp	/^class PX4FlowPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
ParamFile	mavros/src/mavros/param.py	/^class ParamFile(object):$/;"	c
ParamPlugin	mavros/src/plugins/param.cpp	/^	ParamPlugin() :$/;"	f	class:mavplugin::ParamPlugin
ParamPlugin	mavros/src/plugins/param.cpp	/^class ParamPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
ParamSetOpt	mavros/src/plugins/param.cpp	/^	ParamSetOpt(Parameter &_p, size_t _rem) :$/;"	f	class:mavplugin::ParamSetOpt
ParamSetOpt	mavros/src/plugins/param.cpp	/^class ParamSetOpt {$/;"	c	namespace:mavplugin	file:
Parameter	mavros/src/mavros/param.py	/^class Parameter(object):$/;"	c
Parameter	mavros/src/plugins/param.cpp	/^class Parameter {$/;"	c	namespace:mavplugin	file:
PayloadHeader	mavros/src/plugins/ftp.cpp	/^	struct PayloadHeader {$/;"	s	class:mavplugin::FTPRequest	file:
ProgressBar	mavros/scripts/mavftp	/^class ProgressBar:$/;"	c
Ptr	libmavconn/include/mavconn/interface.h	/^	typedef boost::shared_ptr<MAVConnInterface> Ptr;$/;"	t	class:mavconn::MAVConnInterface
Ptr	mavros/include/mavros/mavros_plugin.h	/^	typedef boost::shared_ptr<MavRosPlugin> Ptr;$/;"	t	class:mavplugin::MavRosPlugin
Ptr	mavros_extras/src/plugins/distance_sensor.cpp	/^	typedef boost::shared_ptr<DistanceSensorItem> Ptr;$/;"	t	class:mavplugin::DistanceSensorItem	file:
QGroundControlParam	mavros/src/mavros/param.py	/^class QGroundControlParam(ParamFile):$/;"	c
QGroundControlWP	mavros/src/mavros/mission.py	/^class QGroundControlWP(WaypointFile):$/;"	c
RADIANS_PER_DEGREE	mavros/include/mavros/gps_conversions.h	/^const double RADIANS_PER_DEGREE = M_PI\/180.0;$/;"	m	namespace:UTM
RAD_TO_DEG	mavros/src/plugins/imu_pub.cpp	/^static constexpr double RAD_TO_DEG = 180.0 \/ M_PI;$/;"	m	namespace:mavplugin	file:
RCChan	mavros_extras/scripts/mavteleop	/^class RCChan(object):$/;"	c
RCIOPlugin	mavros/src/plugins/rc_io.cpp	/^	RCIOPlugin() :$/;"	f	class:mavplugin::RCIOPlugin
RCIOPlugin	mavros/src/plugins/rc_io.cpp	/^class RCIOPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
RCMode	mavros_extras/scripts/mavteleop	/^class RCMode(object):$/;"	c
RESHEDULE_DT	mavros/src/plugins/waypoint.cpp	/^	const ros::Duration RESHEDULE_DT;$/;"	m	class:mavplugin::WaypointPlugin	file:
RESHEDULE_MS	mavros/src/plugins/waypoint.cpp	/^	static constexpr int RESHEDULE_MS = 5000;$/;"	m	class:mavplugin::WaypointPlugin	file:
RETRIES_COUNT	mavros/src/plugins/param.cpp	/^	static constexpr int RETRIES_COUNT = 3;$/;"	m	class:mavplugin::ParamPlugin	file:
RETRIES_COUNT	mavros/src/plugins/sys_status.cpp	/^	static constexpr int RETRIES_COUNT = 6;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
RETRIES_COUNT	mavros/src/plugins/waypoint.cpp	/^	static constexpr int RETRIES_COUNT = 3;$/;"	m	class:mavplugin::WaypointPlugin	file:
RETURN_TYPE	mavros/src/plugins/param.cpp	51;"	d	file:
RETURN_TYPE	mavros/src/plugins/param.cpp	75;"	d	file:
RST_COPY	mavros/src/plugins/3dr_radio.cpp	107;"	d	file:
RST_COPY	mavros/src/plugins/3dr_radio.cpp	99;"	d	file:
RosLoggingMixIn	mavros_extras/scripts/mavftpfuse	/^class RosLoggingMixIn(object):$/;"	c
SERVICE_IDLE_CHECK	mavros/src/plugins/ftp.cpp	1022;"	d	file:
SERVICE_IDLE_CHECK	mavros/src/plugins/ftp.cpp	864;"	d	file:
SET_RC_IN	mavros/src/plugins/rc_io.cpp	85;"	d	file:
SET_RC_IN	mavros/src/plugins/rc_io.cpp	95;"	d	file:
SET_RC_OUT	mavros/src/plugins/rc_io.cpp	164;"	d	file:
SET_RC_OUT	mavros/src/plugins/rc_io.cpp	174;"	d	file:
SOURCE_EXTENSIONS	.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = ['.cpp', '.cxx', '.cc', '.c', '.m', '.mm']$/;"	v
SQUARE	test_mavros/include/test_mavros/tests/offboard_control.h	/^	SQUARE,$/;"	e	enum:testsetup::__anon5
STATIC_TRANSFORM	mavros/include/mavros/mavros_uas.h	/^	enum class STATIC_TRANSFORM : uint8_t {$/;"	c	class:mavros::UAS
STAT_ADD_SENSOR	mavros/src/plugins/sys_status.cpp	155;"	d	file:
STAT_ADD_SENSOR	mavros/src/plugins/sys_status.cpp	183;"	d	file:
STR	mavros/src/lib/mavros.cpp	126;"	d	file:
STR2	mavros/src/lib/mavros.cpp	125;"	d	file:
SafetyAreaPlugin	mavros/src/plugins/safety_area.cpp	/^	SafetyAreaPlugin() :$/;"	f	class:mavplugin::SafetyAreaPlugin
SafetyAreaPlugin	mavros/src/plugins/safety_area.cpp	/^class SafetyAreaPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
ServoDescription	mavros_extras/src/servo_state_publisher.cpp	/^	ServoDescription() :$/;"	f	class:ServoDescription
ServoDescription	mavros_extras/src/servo_state_publisher.cpp	/^	ServoDescription(std::string joint_name_, double lower_, double upper_,$/;"	f	class:ServoDescription
ServoDescription	mavros_extras/src/servo_state_publisher.cpp	/^class ServoDescription {$/;"	c	file:
ServoStatePublisher	mavros_extras/src/servo_state_publisher.cpp	/^	ServoStatePublisher() :$/;"	f	class:ServoStatePublisher
ServoStatePublisher	mavros_extras/src/servo_state_publisher.cpp	/^class ServoStatePublisher {$/;"	c	file:
SetPositionTargetLocalNEDMixin	mavros/include/mavros/setpoint_mixin.h	/^class SetPositionTargetLocalNEDMixin {$/;"	c	namespace:mavplugin
SetpointAccelerationPlugin	mavros/src/plugins/setpoint_accel.cpp	/^	SetpointAccelerationPlugin() :$/;"	f	class:mavplugin::SetpointAccelerationPlugin
SetpointAccelerationPlugin	mavros/src/plugins/setpoint_accel.cpp	/^class SetpointAccelerationPlugin : public MavRosPlugin,$/;"	c	namespace:mavplugin	file:
SetpointAttitudePlugin	mavros/src/plugins/setpoint_attitude.cpp	/^	SetpointAttitudePlugin() :$/;"	f	class:mavplugin::SetpointAttitudePlugin
SetpointAttitudePlugin	mavros/src/plugins/setpoint_attitude.cpp	/^class SetpointAttitudePlugin : public MavRosPlugin,$/;"	c	namespace:mavplugin	file:
SetpointPosition	test_mavros/scripts/setpoint_position_demo	/^class SetpointPosition:$/;"	c
SetpointPositionPlugin	mavros/src/plugins/setpoint_position.cpp	/^	SetpointPositionPlugin() :$/;"	f	class:mavplugin::SetpointPositionPlugin
SetpointPositionPlugin	mavros/src/plugins/setpoint_position.cpp	/^class SetpointPositionPlugin : public MavRosPlugin,$/;"	c	namespace:mavplugin	file:
SetpointRawPlugin	mavros/src/plugins/setpoint_raw.cpp	/^	SetpointRawPlugin() :$/;"	f	class:mavplugin::SetpointRawPlugin
SetpointRawPlugin	mavros/src/plugins/setpoint_raw.cpp	/^class SetpointRawPlugin : public MavRosPlugin,$/;"	c	namespace:mavplugin	file:
SetpointVelocityPlugin	mavros/src/plugins/setpoint_velocity.cpp	/^	SetpointVelocityPlugin() :$/;"	f	class:mavplugin::SetpointVelocityPlugin
SetpointVelocityPlugin	mavros/src/plugins/setpoint_velocity.cpp	/^class SetpointVelocityPlugin : public MavRosPlugin,$/;"	c	namespace:mavplugin	file:
ShellHandler	mavros/src/mavros/event_launcher.py	/^class ShellHandler(EventHandler):$/;"	c
SitlTest	test_mavros/include/test_mavros/sitl_test/sitl_test.h	/^class SitlTest$/;"	c	namespace:sitltest
SitlTest	test_mavros/sitl_test/lib/sitl_test.cpp	/^SitlTest::SitlTest()$/;"	f	class:SitlTest
SystemStatusDiag	mavros/src/plugins/sys_status.cpp	/^	SystemStatusDiag(const std::string &name) :$/;"	f	class:mavplugin::SystemStatusDiag
SystemStatusDiag	mavros/src/plugins/sys_status.cpp	/^class SystemStatusDiag : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavplugin	file:
SystemStatusPlugin	mavros/src/plugins/sys_status.cpp	/^	SystemStatusPlugin() :$/;"	f	class:mavplugin::SystemStatusPlugin
SystemStatusPlugin	mavros/src/plugins/sys_status.cpp	/^class SystemStatusPlugin : public MavRosPlugin$/;"	c	namespace:mavplugin	file:
SystemTimePlugin	mavros/src/plugins/sys_time.cpp	/^	SystemTimePlugin() :$/;"	f	class:mavplugin::SystemTimePlugin
SystemTimePlugin	mavros/src/plugins/sys_time.cpp	/^class SystemTimePlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
TCP	libmavconn/test/test_mavconn.cpp	/^class TCP : public UDP {$/;"	c	file:
TDRRadioPlugin	mavros/src/plugins/3dr_radio.cpp	/^	TDRRadioPlugin() :$/;"	f	class:mavplugin::TDRRadioPlugin
TDRRadioPlugin	mavros/src/plugins/3dr_radio.cpp	/^class TDRRadioPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
TEST	libmavconn/test/test_mavconn.cpp	/^TEST(MAVConn, allocate_check)$/;"	f
TEST	libmavconn/test/test_mavconn.cpp	/^TEST(SERIAL, open_error)$/;"	f
TEST	libmavconn/test/test_mavconn.cpp	/^TEST(URL, open_url_tcp)$/;"	f
TEST	libmavconn/test/test_mavconn.cpp	/^TEST(URL, open_url_udp)$/;"	f
TEST	mavros/test/test_frame_conversions.cpp	/^TEST(UAS, quaternion_transforms__ned_to_ned_123)$/;"	f
TEST	mavros/test/test_frame_conversions.cpp	/^TEST(UAS, transform_static_frame__aircraft_to_baselink_123)$/;"	f
TEST	mavros/test/test_frame_conversions.cpp	/^TEST(UAS, transform_static_frame__baselink_to_aircraft_123)$/;"	f
TEST	mavros/test/test_frame_conversions.cpp	/^TEST(UAS, transform_static_frame__enu_to_ned_123)$/;"	f
TEST	mavros/test/test_frame_conversions.cpp	/^TEST(UAS, transform_static_frame__ned_to_enu_123)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_from_rpy__check_compatibility)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_from_rpy__paranoic_check)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_get_yaw__123)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_get_yaw__pm_pi)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_to_mavlink__123)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_to_rpy__123)$/;"	f
TEST	mavros/test/test_quaternion_utils.cpp	/^TEST(UAS, quaternion_to_rpy__pm_pi)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__last_element_rpy_315)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__none)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__number)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__roll_180)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__roll_180_yaw_90)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__unknown)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, orientation_from_str__wrong_number)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, sensor_orientation_matching__none)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, sensor_orientation_matching__roll_180)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, sensor_orientation_matching__roll_180_yaw_90)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, str_sensor_orientation__none)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, str_sensor_orientation__roll_180)$/;"	f
TEST	mavros/test/test_sensor_orientation.cpp	/^TEST(UAS, str_sensor_orientation__roll_180_yaw_90)$/;"	f
TEST_F	libmavconn/test/test_mavconn.cpp	/^TEST_F(TCP, bind_error)$/;"	f
TEST_F	libmavconn/test/test_mavconn.cpp	/^TEST_F(TCP, client_reconnect)$/;"	f
TEST_F	libmavconn/test/test_mavconn.cpp	/^TEST_F(TCP, connect_error)$/;"	f
TEST_F	libmavconn/test/test_mavconn.cpp	/^TEST_F(TCP, send_message)$/;"	f
TEST_F	libmavconn/test/test_mavconn.cpp	/^TEST_F(UDP, bind_error)$/;"	f
TEST_F	libmavconn/test/test_mavconn.cpp	/^TEST_F(UDP, send_message)$/;"	f
TF2ListenerMixin	mavros/include/mavros/setpoint_mixin.h	/^class TF2ListenerMixin {$/;"	c	namespace:mavplugin
TestSetup	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	TestSetup() :$/;"	f	class:testsetup::TestSetup
TestSetup	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^class TestSetup {$/;"	c	namespace:testsetup
TimeSyncStatus	mavros/src/plugins/sys_time.cpp	/^	TimeSyncStatus(const std::string &name, size_t win_size) :$/;"	f	class:mavplugin::TimeSyncStatus
TimeSyncStatus	mavros/src/plugins/sys_time.cpp	/^class TimeSyncStatus : public diagnostic_updater::DiagnosticTask$/;"	c	namespace:mavplugin	file:
UAS	mavros/include/mavros/mavros_uas.h	/^class UAS {$/;"	c	namespace:mavros
UAS	mavros/src/lib/uas_data.cpp	/^UAS::UAS() :$/;"	f	class:UAS
UAS_DIAG	mavros/include/mavros/mavros_uas.h	43;"	d
UAS_FCU	mavros/include/mavros/mavros_uas.h	37;"	d
UAS_PACK_CHAN	mavros/include/mavros/mavros_uas.h	51;"	d
UAS_PACK_TGT	mavros/include/mavros/mavros_uas.h	61;"	d
UDP	libmavconn/test/test_mavconn.cpp	/^class UDP : public ::testing::Test {$/;"	c	file:
UTM	mavros/include/mavros/gps_conversions.h	/^namespace UTM$/;"	n
UTM	mavros/include/mavros/gps_conversions.h	/^static inline void UTM(double lat, double lon, double *x, double *y)$/;"	f	namespace:UTM
UTMLetterDesignator	mavros/include/mavros/gps_conversions.h	/^static inline char UTMLetterDesignator(double Lat)$/;"	f	namespace:UTM
UTM_E2	mavros/include/mavros/gps_conversions.h	/^const double UTM_E2 = (WGS84_E*WGS84_E);	\/\/ e^2$/;"	m	namespace:UTM
UTM_E4	mavros/include/mavros/gps_conversions.h	/^const double UTM_E4 = (UTM_E2*UTM_E2);		\/\/ e^4$/;"	m	namespace:UTM
UTM_E6	mavros/include/mavros/gps_conversions.h	/^const double UTM_E6 = (UTM_E4*UTM_E2);		\/\/ e^6$/;"	m	namespace:UTM
UTM_EP2	mavros/include/mavros/gps_conversions.h	/^const double UTM_EP2 = (UTM_E2\/(1-UTM_E2));	\/\/ e'^2$/;"	m	namespace:UTM
UTM_FE	mavros/include/mavros/gps_conversions.h	/^const double UTM_FE = 500000.0;			\/\/ false easting$/;"	m	namespace:UTM
UTM_FN_N	mavros/include/mavros/gps_conversions.h	/^const double UTM_FN_N = 0.0;			\/\/ false northing on north hemisphere$/;"	m	namespace:UTM
UTM_FN_S	mavros/include/mavros/gps_conversions.h	/^const double UTM_FN_S = 10000000.0;		\/\/ false northing on south hemisphere$/;"	m	namespace:UTM
UTM_K0	mavros/include/mavros/gps_conversions.h	/^const double UTM_K0 = 0.9996;			\/\/ scale factor$/;"	m	namespace:UTM
UTMtoLL	mavros/include/mavros/gps_conversions.h	/^static inline void UTMtoLL(const double UTMNorthing, const double UTMEasting,$/;"	f	namespace:UTM
UavLdePlugin	mavros_extras/src/plugins/uav_lde.cpp	/^	UavLdePlugin() :$/;"	f	class:mavplugin::UavLdePlugin
UavLdePlugin	mavros_extras/src/plugins/uav_lde.cpp	/^class UavLdePlugin : public MavRosPlugin$/;"	c	namespace:mavplugin	file:
UavPosFeedbackPlugin	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	UavPosFeedbackPlugin() :$/;"	f	class:mavplugin::UavPosFeedbackPlugin
UavPosFeedbackPlugin	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^class UavPosFeedbackPlugin : public MavRosPlugin$/;"	c	namespace:mavplugin	file:
UavPosSetPlugin	mavros_extras/src/plugins/uav_pos_set.cpp	/^	UavPosSetPlugin() :$/;"	f	class:mavplugin::UavPosSetPlugin
UavPosSetPlugin	mavros_extras/src/plugins/uav_pos_set.cpp	/^class UavPosSetPlugin : public MavRosPlugin$/;"	c	namespace:mavplugin	file:
VELOCITY	test_mavros/include/test_mavros/tests/offboard_control.h	/^	VELOCITY,$/;"	e	enum:testsetup::__anon4
V_FileData	mavros/src/plugins/ftp.cpp	/^	typedef std::vector<uint8_t> V_FileData;$/;"	t	class:mavplugin::FTPPlugin	file:
VfrHudPlugin	mavros/src/plugins/vfr_hud.cpp	/^	VfrHudPlugin() :$/;"	f	class:mavplugin::VfrHudPlugin
VfrHudPlugin	mavros/src/plugins/vfr_hud.cpp	/^class VfrHudPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
VibrationPlugin	mavros_extras/src/plugins/vibration.cpp	/^	VibrationPlugin() :$/;"	f	class:mavplugin::VibrationPlugin
VibrationPlugin	mavros_extras/src/plugins/vibration.cpp	/^class VibrationPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
VisionPoseEstimatePlugin	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	VisionPoseEstimatePlugin() :$/;"	f	class:mavplugin::VisionPoseEstimatePlugin
VisionPoseEstimatePlugin	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^class VisionPoseEstimatePlugin : public MavRosPlugin,$/;"	c	namespace:mavplugin	file:
VisionSpeedEstimatePlugin	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	VisionSpeedEstimatePlugin() :$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin
VisionSpeedEstimatePlugin	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^class VisionSpeedEstimatePlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
WGS84_A	mavros/include/mavros/gps_conversions.h	/^const double WGS84_A = 6378137.0;		\/\/ major axis$/;"	m	namespace:UTM
WGS84_B	mavros/include/mavros/gps_conversions.h	/^const double WGS84_B = 6356752.31424518;	\/\/ minor axis$/;"	m	namespace:UTM
WGS84_E	mavros/include/mavros/gps_conversions.h	/^const double WGS84_E = 0.0818191908;		\/\/ first eccentricity$/;"	m	namespace:UTM
WGS84_EP	mavros/include/mavros/gps_conversions.h	/^const double WGS84_EP = 0.0820944379;		\/\/ second eccentricity$/;"	m	namespace:UTM
WGS84_F	mavros/include/mavros/gps_conversions.h	/^const double WGS84_F = 0.0033528107;		\/\/ ellipsoid flattening$/;"	m	namespace:UTM
WP_CLEAR	mavros/src/plugins/waypoint.cpp	/^		WP_CLEAR,$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WP_IDLE	mavros/src/plugins/waypoint.cpp	/^		WP_IDLE,$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WP_RXLIST	mavros/src/plugins/waypoint.cpp	/^		WP_RXLIST,$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WP_RXWP	mavros/src/plugins/waypoint.cpp	/^		WP_RXWP,$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WP_SET_CUR	mavros/src/plugins/waypoint.cpp	/^		WP_SET_CUR$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WP_TIMEOUT_DT	mavros/src/plugins/waypoint.cpp	/^	const ros::Duration WP_TIMEOUT_DT;$/;"	m	class:mavplugin::WaypointPlugin	file:
WP_TIMEOUT_MS	mavros/src/plugins/waypoint.cpp	/^	static constexpr int WP_TIMEOUT_MS = 1000;$/;"	m	class:mavplugin::WaypointPlugin	file:
WP_TXLIST	mavros/src/plugins/waypoint.cpp	/^		WP_TXLIST,$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WP_TXWP	mavros/src/plugins/waypoint.cpp	/^		WP_TXWP,$/;"	e	enum:mavplugin::WaypointPlugin::__anon3	file:
WaypointFile	mavros/src/mavros/mission.py	/^class WaypointFile(object):$/;"	c
WaypointItem	mavros/src/plugins/waypoint.cpp	/^class WaypointItem {$/;"	c	namespace:mavplugin	file:
WaypointPlugin	mavros/src/plugins/waypoint.cpp	/^	WaypointPlugin() :$/;"	f	class:mavplugin::WaypointPlugin
WaypointPlugin	mavros/src/plugins/waypoint.cpp	/^class WaypointPlugin : public MavRosPlugin {$/;"	c	namespace:mavplugin	file:
WeakPtr	libmavconn/include/mavconn/interface.h	/^	typedef boost::weak_ptr<MAVConnInterface> WeakPtr;$/;"	t	class:mavconn::MAVConnInterface
_DIALECT	libmavconn/include/mavconn/mavlink_dialect.h	41;"	d
_DIALECT_ASLUAV	libmavconn/include/mavconn/mavlink_dialect.h	53;"	d
_DIALECT_CONCAT	libmavconn/include/mavconn/mavlink_dialect.h	42;"	d
_DIALECT_ardupilotmega	libmavconn/include/mavconn/mavlink_dialect.h	43;"	d
_DIALECT_autoquad	libmavconn/include/mavconn/mavlink_dialect.h	44;"	d
_DIALECT_common	libmavconn/include/mavconn/mavlink_dialect.h	45;"	d
_DIALECT_matrixpilot	libmavconn/include/mavconn/mavlink_dialect.h	46;"	d
_DIALECT_minimal	libmavconn/include/mavconn/mavlink_dialect.h	47;"	d
_DIALECT_paparazzi	libmavconn/include/mavconn/mavlink_dialect.h	54;"	d
_DIALECT_pixhawk	libmavconn/include/mavconn/mavlink_dialect.h	48;"	d
_DIALECT_sensesoar	libmavconn/include/mavconn/mavlink_dialect.h	52;"	d
_DIALECT_slugs	libmavconn/include/mavconn/mavlink_dialect.h	49;"	d
_DIALECT_test	libmavconn/include/mavconn/mavlink_dialect.h	50;"	d
_DIALECT_ualberta	libmavconn/include/mavconn/mavlink_dialect.h	51;"	d
_ONCE_DELAY	mavros/scripts/mavsafety	/^_ONCE_DELAY = 3$/;"	v
_ONCE_DELAY	mavros/scripts/mavsetp	/^_ONCE_DELAY = 3$/;"	v
_UTM_H	mavros/include/mavros/gps_conversions.h	10;"	d
__all__	mavros/src/mavros/__init__.py	/^__all__ = ($/;"	v
__all__	mavros/src/mavros/command.py	/^__all__ = ($/;"	v
__all__	mavros/src/mavros/ftp.py	/^__all__ = ($/;"	v
__all__	mavros/src/mavros/nuttx_crc32.py	/^__all__ = ($/;"	v
__call__	mavros/src/mavros/event_launcher.py	/^    def __call__(self, event):$/;"	m	class:EventHandler	file:
__call__	mavros/src/mavros/event_launcher.py	/^    def __call__(self, event):$/;"	m	class:Launcher	file:
__call__	mavros_extras/scripts/mavftpfuse	/^    def __call__(self, op, path, *args):$/;"	m	class:RosLoggingMixIn	file:
__del__	mavros/src/mavros/ftp.py	/^    def __del__(self):$/;"	m	class:FTPFile	file:
__enter__	mavros/scripts/mavftp	/^    def __enter__(self):$/;"	m	class:ProgressBar	file:
__enter__	mavros/src/mavros/ftp.py	/^    def __enter__(self):$/;"	m	class:FTPFile	file:
__exit__	mavros/scripts/mavftp	/^    def __exit__(self, type, value, traceback):$/;"	m	class:ProgressBar	file:
__exit__	mavros/src/mavros/ftp.py	/^    def __exit__(self, exc_type, exc_value, traceback):$/;"	m	class:FTPFile	file:
__init__	mavros/scripts/checkid	/^    def __init__(self, args):$/;"	m	class:Checker
__init__	mavros/scripts/mavftp	/^    def __init__(self, quiet, operation, maxval):$/;"	m	class:ProgressBar
__init__	mavros/src/mavros/event_launcher.py	/^    def __init__(self):$/;"	m	class:Launcher
__init__	mavros/src/mavros/event_launcher.py	/^    def __init__(self, name, command, args=[], logfile=None, events=[], actions=[]):$/;"	m	class:ShellHandler
__init__	mavros/src/mavros/event_launcher.py	/^    def __init__(self, name, events=[], actions=[]):$/;"	m	class:EventHandler
__init__	mavros/src/mavros/ftp.py	/^    def __init__(self, name, mode):$/;"	m	class:FTPFile
__init__	mavros/src/mavros/param.py	/^    def __init__(self, args):$/;"	m	class:ParamFile
__init__	mavros/src/mavros/param.py	/^    def __init__(self, param_id, param_value=0):$/;"	m	class:Parameter
__init__	mavros_extras/scripts/mavftpfuse	/^    def __init__(self):$/;"	m	class:MavFtp
__init__	mavros_extras/scripts/mavteleop	/^    def __init__( self, name, joy_flags, rc_channel, rc_value ):$/;"	m	class:RCMode
__init__	mavros_extras/scripts/mavteleop	/^    def __init__(self, name, chan, min_pos=-1.0):$/;"	m	class:RCChan
__init__	test_mavros/scripts/setpoint_position_demo	/^    def __init__(self):$/;"	m	class:SetpointPosition
__repr__	mavros/src/mavros/param.py	/^    def __repr__(self):$/;"	m	class:Parameter	file:
__slots__	mavros/src/mavros/event_launcher.py	/^    __slots__ = [$/;"	v	class:EventHandler
__slots__	mavros/src/mavros/event_launcher.py	/^    __slots__ = [$/;"	v	class:Launcher
__slots__	mavros/src/mavros/event_launcher.py	/^    __slots__ = [$/;"	v	class:ShellHandler
__str__	mavros/src/mavros/event_launcher.py	/^    def __str__(self):$/;"	m	class:EventHandler	file:
_arm	mavros/scripts/mavsafety	/^def _arm(args, state):$/;"	f
_check_raise_errno	mavros/src/mavros/ftp.py	/^def _check_raise_errno(ret):$/;"	f
_check_ret	mavros/scripts/mavcmd	/^def _check_ret(args, ret):$/;"	f
_find_gps_topic	mavros/scripts/mavcmd	/^def _find_gps_topic(args, op_name):$/;"	f
_fix_wp0	mavros/scripts/mavwp	/^    def _fix_wp0(topic):$/;"	f	function:do_load
_formation_vaild	mavros_extras/src/plugins/uav_pos_set.cpp	/^	bool _formation_vaild = false;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
_get_evt_act	mavros/src/mavros/event_launcher.py	/^    def _get_evt_act(self, params):$/;"	m	class:Launcher
_get_proxy	mavros/src/mavros/command.py	/^def _get_proxy(service, type):$/;"	f
_get_proxy	mavros/src/mavros/ftp.py	/^def _get_proxy(service, type):$/;"	f
_get_proxy	mavros/src/mavros/mission.py	/^    def _get_proxy(name, type):$/;"	f	function:_setup_services
_load_call	mavros/scripts/mavwp	/^    def _load_call(waypoint_list):$/;"	f	function:do_load
_load_shell	mavros/src/mavros/event_launcher.py	/^    def _load_shell(self, name, params):$/;"	m	class:Launcher
_load_trigger	mavros/src/mavros/event_launcher.py	/^    def _load_trigger(self, name, params):$/;"	m	class:Launcher
_make_attr	mavros_extras/scripts/mavftpfuse	/^    def _make_attr(dir_path, file_entry):$/;"	m	class:MavFtp
_mavros_ns	mavros/src/mavros/__init__.py	/^_mavros_ns = None$/;"	v
_mavros_ns_update	mavros/src/mavros/__init__.py	/^_mavros_ns_update = []$/;"	v
_param_to_list	mavros/src/mavros/event_launcher.py	/^    def _param_to_list(self, str_or_list):$/;"	m	class:Launcher
_pull	mavros/scripts/mavwp	/^def _pull(args):$/;"	f
_resolve_path	mavros/scripts/mavftp	/^def _resolve_path(path = None):$/;"	f
_setup_services	mavros/src/mavros/command.py	/^def _setup_services():$/;"	f
_setup_services	mavros/src/mavros/mission.py	/^def _setup_services():$/;"	f
_show_table	mavros/scripts/mavwp	/^    def _show_table(topic):$/;"	f	function:do_show
_test_set_rate	mavros/scripts/mavsys	/^    def _test_set_rate(rate_arg, id):$/;"	f	function:do_rate
_update_attr_cache	mavros_extras/scripts/mavftpfuse	/^    def _update_attr_cache(self, dir_path, fe_list):$/;"	m	class:MavFtp
_update_attr_size	mavros_extras/scripts/mavftpfuse	/^    def _update_attr_size(self, path, size):$/;"	m	class:MavFtp
_write_file	mavros/scripts/mavwp	/^    def _write_file(topic):$/;"	f	function:do_dump
accel_cb	mavros/src/plugins/setpoint_accel.cpp	/^	void accel_cb(const geometry_msgs::Vector3Stamped::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointAccelerationPlugin	file:
accel_sub	mavros/src/plugins/setpoint_accel.cpp	/^	ros::Subscriber accel_sub;$/;"	m	class:mavplugin::SetpointAccelerationPlugin	file:
acceptor	libmavconn/include/mavconn/tcp.h	/^	boost::asio::ip::tcp::acceptor acceptor;$/;"	m	class:mavconn::MAVConnTCPServer
acceptor_client	libmavconn/include/mavconn/tcp.h	/^	boost::shared_ptr<MAVConnTCPClient> acceptor_client;$/;"	m	class:mavconn::MAVConnTCPServer
ack	mavros/src/plugins/command.cpp	/^	std::condition_variable ack;$/;"	m	class:mavplugin::CommandTransaction	file:
ack	mavros/src/plugins/param.cpp	/^	std::condition_variable ack;$/;"	m	class:mavplugin::ParamSetOpt	file:
ack_waiting_list	mavros/src/plugins/command.cpp	/^	std::list<CommandTransaction *> ack_waiting_list;$/;"	m	class:mavplugin::CommandPlugin	file:
action_run	mavros/src/mavros/event_launcher.py	/^    def action_run(self):$/;"	m	class:ShellHandler
action_stop	mavros/src/mavros/event_launcher.py	/^    def action_stop(self):$/;"	m	class:ShellHandler
active_session	mavros/src/plugins/ftp.cpp	/^	uint32_t active_session;	\/\/!< session id of current operation$/;"	m	class:mavplugin::FTPPlugin	file:
actuator_control_cb	mavros/src/plugins/actuator_control.cpp	/^	void actuator_control_cb(const mavros_msgs::ActuatorControl::ConstPtr &req) {$/;"	f	class:mavplugin::ActuatorControlPlugin	file:
actuator_control_sub	mavros/src/plugins/actuator_control.cpp	/^	ros::Subscriber actuator_control_sub;$/;"	m	class:mavplugin::ActuatorControlPlugin	file:
add_dirent	mavros/src/plugins/ftp.cpp	/^	void add_dirent(const char *ptr, size_t slen) {$/;"	f	class:mavplugin::FTPPlugin	file:
add_plugin	mavros/src/lib/mavros.cpp	/^void MavRos::add_plugin(std::string &pl_name, ros::V_string &blacklist, ros::V_string &whitelist) {$/;"	f	class:MavRos
allocated_channels	libmavconn/include/mavconn/interface.h	/^	static std::set<int> allocated_channels;$/;"	m	class:mavconn::MAVConnInterface
allocated_channels	libmavconn/src/interface.cpp	/^std::set<int> MAVConnInterface::allocated_channels;$/;"	m	class:mavconn::MAVConnInterface	file:
altitude_pub	mavros/src/plugins/altitude.cpp	/^    ros::Publisher altitude_pub;$/;"	m	class:mavplugin::AltitudePlugin	file:
angular_velocity_cov	mavros/src/plugins/imu_pub.cpp	/^	UAS::Covariance3d angular_velocity_cov;$/;"	m	class:mavplugin::IMUPubPlugin	file:
apmrover2_cmode_map	mavros/src/lib/uas_stringify.cpp	/^static const cmode_map apmrover2_cmode_map = {$/;"	v	file:
apply_mode	mavros_extras/scripts/mavteleop	/^    def apply_mode(self,joy,rc):$/;"	m	class:RCMode
arducopter_cmode_map	mavros/src/lib/uas_stringify.cpp	/^static const cmode_map arducopter_cmode_map = {$/;"	v	file:
arduino_map	mavros_extras/scripts/mavteleop	/^def arduino_map(x, inmin, inmax, outmin, outmax):$/;"	f
arduplane_cmode_map	mavros/src/lib/uas_stringify.cpp	/^static const cmode_map arduplane_cmode_map = {$/;"	v	file:
arm	mavros_extras/scripts/mavteleop	/^def arm(args, state):$/;"	f
arming	mavros/src/mavros/command.py	/^arming = None$/;"	v
arming_cb	mavros/src/plugins/command.cpp	/^	bool arming_cb(mavros_msgs::CommandBool::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
arming_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer arming_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
async_accept_end	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::async_accept_end(error_code error)$/;"	f	class:mavconn::MAVConnTCPServer
async_read_end	libmavconn/src/serial.cpp	/^void MAVConnSerial::async_read_end(error_code error, size_t bytes_transferred)$/;"	f	class:mavconn::MAVConnSerial
async_receive_end	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::async_receive_end(error_code error, size_t bytes_transferred)$/;"	f	class:mavconn::MAVConnTCPClient
async_receive_end	libmavconn/src/udp.cpp	/^void MAVConnUDP::async_receive_end(error_code error, size_t bytes_transferred)$/;"	f	class:mavconn::MAVConnUDP
async_send_end	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::async_send_end(error_code error, size_t bytes_transferred)$/;"	f	class:mavconn::MAVConnTCPClient
async_sendto_end	libmavconn/src/udp.cpp	/^void MAVConnUDP::async_sendto_end(error_code error, size_t bytes_transferred)$/;"	f	class:mavconn::MAVConnUDP
async_write_end	libmavconn/src/serial.cpp	/^void MAVConnSerial::async_write_end(error_code error, size_t bytes_transferred)$/;"	f	class:mavconn::MAVConnSerial
attitude_cb	mavros/src/plugins/setpoint_raw.cpp	/^	void attitude_cb(const mavros_msgs::AttitudeTarget::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointRawPlugin	file:
attitude_setpoint_control	mavros_extras/scripts/mavteleop	/^def attitude_setpoint_control(args):$/;"	f
attitude_sub	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Subscriber local_sub, global_sub, attitude_sub;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
autocontinue	mavros/src/plugins/waypoint.cpp	/^	bool autocontinue;$/;"	m	class:mavplugin::WaypointItem	file:
autopilot	mavros/include/mavros/mavros_uas.h	/^	std::atomic<uint8_t> autopilot;$/;"	m	class:mavros::UAS
autopilot	mavros/src/plugins/sys_status.cpp	/^	enum MAV_AUTOPILOT autopilot;$/;"	m	class:mavplugin::HeartbeatStatus	typeref:enum:mavplugin::HeartbeatStatus::MAV_AUTOPILOT	file:
autopilot_strings	mavros/src/lib/uas_stringify.cpp	/^static const std::array<const std::string, 18> autopilot_strings = {$/;"	v	file:
autopilot_version_cb	mavros/src/plugins/sys_status.cpp	/^	void autopilot_version_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
autopilot_version_timer	mavros/src/plugins/sys_status.cpp	/^	ros::Timer autopilot_version_timer;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
average_offset	mavros/src/plugins/sys_time.cpp	/^	inline void average_offset(int64_t offset_ns) {$/;"	f	class:mavplugin::SystemTimePlugin	file:
axes_map	mavros_extras/scripts/mavteleop	/^axes_map = {$/;"	v
axes_scale	mavros_extras/scripts/mavteleop	/^axes_scale = {$/;"	v
base_mode	mavros/include/mavros/mavros_uas.h	/^	std::atomic<uint8_t> base_mode;$/;"	m	class:mavros::UAS
batt_diag	mavros/src/plugins/sys_status.cpp	/^	BatteryStatusDiag batt_diag;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
batt_pub	mavros/src/plugins/sys_status.cpp	/^	ros::Publisher batt_pub;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
bind_ep	libmavconn/include/mavconn/tcp.h	/^	boost::asio::ip::tcp::endpoint bind_ep;$/;"	m	class:mavconn::MAVConnTCPServer
bind_ep	libmavconn/include/mavconn/udp.h	/^	boost::asio::ip::udp::endpoint bind_ep;$/;"	m	class:mavconn::MAVConnUDP
brkval	mavros/src/plugins/sys_status.cpp	/^	std::atomic<uint16_t> brkval;$/;"	m	class:mavplugin::MemInfo	file:
button_map	mavros_extras/scripts/mavteleop	/^button_map = {$/;"	v
calc_us	mavros_extras/scripts/mavteleop	/^    def calc_us(self, pos):$/;"	m	class:RCChan
calculate_position	mavros_extras/src/servo_state_publisher.cpp	/^	float calculate_position(uint16_t pwm) {$/;"	f	class:ServoDescription
calculate_variance	mavros_extras/src/plugins/distance_sensor.cpp	/^	float calculate_variance(float range) {$/;"	f	class:mavplugin::DistanceSensorItem	file:
cam_imu_pub	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	ros::Publisher cam_imu_pub;$/;"	m	class:mavplugin::CamIMUSyncPlugin	file:
cam_imu_sync_nh	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	ros::NodeHandle cam_imu_sync_nh;$/;"	m	class:mavplugin::CamIMUSyncPlugin	file:
cb	mavros/src/mavros/event_launcher.py	/^            def cb(req):$/;"	f	function:Launcher._load_trigger.gen_cb
channel	libmavconn/include/mavconn/interface.h	/^	int channel;$/;"	m	class:mavconn::MAVConnInterface
channel_mutex	libmavconn/include/mavconn/interface.h	/^	static std::recursive_mutex channel_mutex;$/;"	m	class:mavconn::MAVConnInterface
channel_mutex	libmavconn/src/interface.cpp	/^std::recursive_mutex MAVConnInterface::channel_mutex;$/;"	m	class:mavconn::MAVConnInterface	file:
channes_available	libmavconn/src/interface.cpp	/^int MAVConnInterface::channes_available() {$/;"	f	class:mavconn::MAVConnInterface
check_exclude_param_id	mavros/src/plugins/param.cpp	/^	static bool check_exclude_param_id(std::string param_id) {$/;"	f	class:mavplugin::Parameter
check_supported_type	mavros_extras/src/plugins/image_pub.cpp	/^	bool check_supported_type(uint8_t type) const {$/;"	f	class:mavplugin::ImagePubPlugin	file:
checksum	mavros/src/mavros/ftp.py	/^def checksum(path):$/;"	f
checksum_cb	mavros/src/plugins/ftp.cpp	/^	bool checksum_cb(mavros_msgs::FileChecksum::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
checksum_crc32	mavros/src/plugins/ftp.cpp	/^	uint32_t checksum_crc32;$/;"	m	class:mavplugin::FTPPlugin	file:
checksum_crc32_file	mavros/src/plugins/ftp.cpp	/^	void checksum_crc32_file(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
checksum_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer checksum_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
child_frame_id	mavros_extras/src/copter_visualization.cpp	/^static std::string child_frame_id;$/;"	v	file:
child_frame_id	mavros_extras/src/copter_visualization1.cpp	/^static std::string child_frame_id;$/;"	v	file:
child_frame_id	mavros_extras/src/copter_visualization2.cpp	/^static std::string child_frame_id;$/;"	v	file:
child_frame_id	mavros_extras/src/copter_visualization3.cpp	/^static std::string child_frame_id;$/;"	v	file:
circle_path_motion	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void circle_path_motion(ros::Rate loop_rate, control_mode mode){$/;"	f	class:testsetup::OffboardControl
circle_shape	test_mavros/include/test_mavros/tests/offboard_control.h	/^	Eigen::Vector3d circle_shape(int angle){$/;"	f	class:testsetup::OffboardControl
clear	mavros/src/mavros/mission.py	/^clear = None$/;"	v
clear	mavros/src/plugins/sys_status.cpp	/^	void clear() {$/;"	f	class:mavplugin::HeartbeatStatus
clear	mavros/src/plugins/sys_time.cpp	/^	void clear() {$/;"	f	class:mavplugin::TimeSyncStatus
clear_cb	mavros/src/plugins/waypoint.cpp	/^	bool clear_cb(mavros_msgs::WaypointClear::Request &req,$/;"	f	class:mavplugin::WaypointPlugin	file:
clear_srv	mavros/src/plugins/waypoint.cpp	/^	ros::ServiceServer clear_srv;$/;"	m	class:mavplugin::WaypointPlugin	file:
client_closed	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::client_closed(boost::weak_ptr<MAVConnTCPClient> weak_instp)$/;"	f	class:mavconn::MAVConnTCPServer
client_connected	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::client_connected(int server_channel) {$/;"	f	class:mavconn::MAVConnTCPClient
client_list	libmavconn/include/mavconn/tcp.h	/^	std::list<boost::shared_ptr<MAVConnTCPClient> > client_list;$/;"	m	class:mavconn::MAVConnTCPServer
close	libmavconn/src/serial.cpp	/^void MAVConnSerial::close() {$/;"	f	class:mavconn::MAVConnSerial
close	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::close() {$/;"	f	class:mavconn::MAVConnTCPClient
close	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::close() {$/;"	f	class:mavconn::MAVConnTCPServer
close	libmavconn/src/udp.cpp	/^void MAVConnUDP::close() {$/;"	f	class:mavconn::MAVConnUDP
close	mavros/src/mavros/ftp.py	/^    def close(self):$/;"	m	class:FTPFile
close_cb	mavros/src/plugins/ftp.cpp	/^	bool close_cb(mavros_msgs::FileClose::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
close_file	mavros/src/plugins/ftp.cpp	/^	bool close_file(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
close_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer close_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
closed	mavros/src/mavros/ftp.py	/^    def closed(self):$/;"	m	class:FTPFile
cmd_nh	mavros/src/plugins/command.cpp	/^	ros::NodeHandle cmd_nh;$/;"	m	class:mavplugin::CommandPlugin	file:
cmode_find_cmap	mavros/src/lib/uas_stringify.cpp	/^static bool cmode_find_cmap(const cmode_map &cmap, std::string &cmode_str, uint32_t &cmode) {$/;"	f	file:
cmode_from_str	mavros/src/lib/uas_stringify.cpp	/^bool UAS::cmode_from_str(std::string cmode_str, uint32_t &custom_mode) {$/;"	f	class:UAS
cmode_map	mavros/src/lib/uas_stringify.cpp	/^typedef std::unordered_map<uint32_t, const std::string> cmode_map;$/;"	t	file:
code_temp	mavros_extras/src/plugins/uav_pos_set.cpp	/^	demo_test::demo_code code_temp;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
command	mavros/src/plugins/waypoint.cpp	/^	enum MAV_CMD command;$/;"	m	class:mavplugin::WaypointItem	typeref:enum:mavplugin::WaypointItem::MAV_CMD	file:
command_int	mavros/src/plugins/command.cpp	/^	void command_int(bool broadcast,$/;"	f	class:mavplugin::CommandPlugin	file:
command_int_cb	mavros/src/plugins/command.cpp	/^	bool command_int_cb(mavros_msgs::CommandInt::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
command_int_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer command_int_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
command_long	mavros/src/plugins/command.cpp	/^	void command_long(bool broadcast,$/;"	f	class:mavplugin::CommandPlugin	file:
command_long_cb	mavros/src/plugins/command.cpp	/^	bool command_long_cb(mavros_msgs::CommandLong::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
command_long_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer command_long_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
comp_id	libmavconn/include/mavconn/interface.h	/^	uint8_t comp_id;$/;"	m	class:mavconn::MAVConnInterface
compute_linvel_effort	test_mavros/sitl_test/lib/pid_controller.cpp	/^Eigen::Vector3d PIDController::compute_linvel_effort(Eigen::Vector3d goal, Eigen::Vector3d current, ros::Time last_time){$/;"	f	class:PIDController
compute_rw_timeout	mavros/src/plugins/ftp.cpp	/^	static constexpr int compute_rw_timeout(size_t len) {$/;"	f	class:mavplugin::FTPPlugin	file:
compute_yawrate_effort	test_mavros/sitl_test/lib/pid_controller.cpp	/^double PIDController::compute_yawrate_effort(double goal, double current, ros::Time last_time){$/;"	f	class:PIDController
cond	libmavconn/test/test_mavconn.cpp	/^	std::condition_variable cond;$/;"	m	class:UDP	file:
cond	mavros/src/plugins/ftp.cpp	/^	std::condition_variable cond;	\/\/!< wait condvar$/;"	m	class:mavplugin::FTPPlugin	file:
cond_mutex	mavros/src/plugins/command.cpp	/^	std::mutex cond_mutex;$/;"	m	class:mavplugin::CommandTransaction	file:
cond_mutex	mavros/src/plugins/ftp.cpp	/^	std::mutex cond_mutex;$/;"	m	class:mavplugin::FTPPlugin	file:
cond_mutex	mavros/src/plugins/param.cpp	/^	std::mutex cond_mutex;$/;"	m	class:mavplugin::ParamSetOpt	file:
connected	mavros/include/mavros/mavros_uas.h	/^	std::atomic<bool> connected;$/;"	m	class:mavros::UAS
connection_cb	mavros/src/plugins/3dr_radio.cpp	/^	void connection_cb(bool connected) {$/;"	f	class:mavplugin::TDRRadioPlugin	file:
connection_cb	mavros/src/plugins/imu_pub.cpp	/^	void connection_cb(bool connected) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
connection_cb	mavros/src/plugins/param.cpp	/^	void connection_cb(bool connected) {$/;"	f	class:mavplugin::ParamPlugin	file:
connection_cb	mavros/src/plugins/rc_io.cpp	/^	void connection_cb(bool connected) {$/;"	f	class:mavplugin::RCIOPlugin	file:
connection_cb	mavros/src/plugins/sys_status.cpp	/^	void connection_cb(bool connected) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
connection_cb	mavros/src/plugins/waypoint.cpp	/^	void connection_cb(bool connected) {$/;"	f	class:mavplugin::WaypointPlugin	file:
control_mode	test_mavros/include/test_mavros/tests/offboard_control.h	/^} control_mode;$/;"	t	namespace:testsetup	typeref:enum:testsetup::__anon4
control_pub	mavros/src/plugins/manual_control.cpp	/^	ros::Publisher control_pub;$/;"	m	class:mavplugin::ManualControlPlugin	file:
convert	mavros_msgs/include/mavros_msgs/mavlink_convert.h	/^inline bool convert(const mavlink_message_t &mmsg, mavros_msgs::Mavlink &rmsg)$/;"	f	namespace:mavros_msgs::mavlink
convert	mavros_msgs/include/mavros_msgs/mavlink_convert.h	/^inline bool convert(const mavros_msgs::Mavlink &rmsg, mavlink_message_t &mmsg)$/;"	f	namespace:mavros_msgs::mavlink
convert_to_bytes	mavros/src/mavros/mavlink.py	/^def convert_to_bytes(msg):$/;"	f
convert_to_payload64	mavros/src/mavros/mavlink.py	/^def convert_to_payload64(payload_bytes):$/;"	f
convert_to_rosmsg	mavros/src/mavros/mavlink.py	/^def convert_to_rosmsg(mavmsg, stamp=None):$/;"	f
copy_mavlink_to_ros	mavros/include/mavros/utils.h	/^void copy_mavlink_to_ros(const mavlink_message_t *mmsg, mavros_msgs::MavlinkPtr &rmsg)$/;"	f	namespace:mavutils
copy_ros_to_mavlink	mavros/include/mavros/utils.h	/^bool copy_ros_to_mavlink(const mavros_msgs::Mavlink::ConstPtr &rmsg, mavlink_message_t &mmsg)$/;"	f	namespace:mavutils
count_	mavros/src/plugins/sys_status.cpp	/^	int count_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
count_	mavros/src/plugins/sys_time.cpp	/^	int count_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
covariance	mavros_extras/src/plugins/distance_sensor.cpp	/^	int covariance;		\/\/!< in centimeters, current specification$/;"	m	class:mavplugin::DistanceSensorItem	file:
create	mavros_extras/scripts/mavftpfuse	/^    def create(self, path, mode):$/;"	m	class:MavFtp
create_directory	mavros/src/plugins/ftp.cpp	/^	void create_directory(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
create_item	mavros_extras/src/plugins/distance_sensor.cpp	/^DistanceSensorItem::Ptr DistanceSensorItem::create_item(DistanceSensorPlugin *owner, std::string topic_name)$/;"	f	class:mavplugin::DistanceSensorItem
create_vehicle_markers	mavros_extras/src/copter_visualization.cpp	/^static void create_vehicle_markers( int num_rotors, float arm_len, float body_width, float body_height )$/;"	f	file:
create_vehicle_markers	mavros_extras/src/copter_visualization1.cpp	/^static void create_vehicle_markers( int num_rotors, float arm_len, float body_width, float body_height )$/;"	f	file:
create_vehicle_markers	mavros_extras/src/copter_visualization2.cpp	/^static void create_vehicle_markers( int num_rotors, float arm_len, float body_width, float body_height )$/;"	f	file:
create_vehicle_markers	mavros_extras/src/copter_visualization3.cpp	/^static void create_vehicle_markers( int num_rotors, float arm_len, float body_width, float body_height )$/;"	f	file:
current	mavros/src/plugins/sys_status.cpp	/^	float current;$/;"	m	class:mavplugin::BatteryStatusDiag	file:
current	mavros/src/plugins/waypoint.cpp	/^	uint8_t current;\/* APM use some magical numbers *\/$/;"	m	class:mavplugin::WaypointItem	file:
current	test_mavros/include/test_mavros/tests/offboard_control.h	/^	Eigen::Vector3d current;$/;"	m	class:testsetup::OffboardControl
custom_mode	mavros/include/mavros/px4_custom_mode.h	/^	constexpr custom_mode(uint8_t mm, uint8_t sm) :$/;"	f	union:px4::custom_mode
custom_mode	mavros/include/mavros/px4_custom_mode.h	/^	custom_mode() : data(0)$/;"	f	union:px4::custom_mode
custom_mode	mavros/include/mavros/px4_custom_mode.h	/^	explicit custom_mode(uint32_t val) : data(val)$/;"	f	union:px4::custom_mode
custom_mode	mavros/include/mavros/px4_custom_mode.h	/^union custom_mode {$/;"	u	namespace:px4
custom_version_to_hex_string	mavros/src/plugins/sys_status.cpp	/^	static inline std::string custom_version_to_hex_string(uint8_t array[8])$/;"	f	class:mavplugin::SystemStatusPlugin	file:
data	libmavconn/include/mavconn/msgbuffer.h	/^	uint8_t data[MAX_SIZE];$/;"	m	struct:mavconn::MsgBuffer
data	mavros/include/mavros/px4_custom_mode.h	/^	uint32_t data;$/;"	m	union:px4::custom_mode
data	mavros/src/plugins/ftp.cpp	/^		uint8_t		data[];		\/\/\/< command data, varies by Opcode$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
data	mavros/src/plugins/ftp.cpp	/^	uint8_t *data() {$/;"	f	class:mavplugin::FTPRequest
data	mavros_extras/src/plugins/distance_sensor.cpp	/^	std::vector<float> data;	\/\/!< array allocation for measurements$/;"	m	class:mavplugin::DistanceSensorItem	file:
data_c	mavros/src/plugins/ftp.cpp	/^	char *data_c() {$/;"	f	class:mavplugin::FTPRequest
data_float	mavros/include/mavros/px4_custom_mode.h	/^	float data_float;$/;"	m	union:px4::custom_mode
data_index	mavros_extras/src/plugins/distance_sensor.cpp	/^	size_t data_index;		\/\/!< array index$/;"	m	class:mavplugin::DistanceSensorItem	file:
data_u32	mavros/src/plugins/ftp.cpp	/^	uint32_t *data_u32() {$/;"	f	class:mavplugin::FTPRequest
decode	mavros/src/plugins/ftp.cpp	/^	bool decode(UAS *uas, const mavlink_message_t *msg) {$/;"	f	class:mavplugin::FTPRequest
decorator	mavros_extras/scripts/mavftpfuse	/^    def decorator(*args, **kvargs):$/;"	f	function:ioerror_to_oserror
default_flags	.ycm_extra_conf.py	/^default_flags = [$/;"	v
define_mode	mavros/include/mavros/px4_custom_mode.h	/^constexpr uint32_t define_mode(enum custom_mode::MAIN_MODE mm, uint8_t sm = 0) {$/;"	f	namespace:px4
define_mode_auto	mavros/include/mavros/px4_custom_mode.h	/^constexpr uint32_t define_mode_auto(enum custom_mode::SUB_MODE_AUTO sm) {$/;"	f	namespace:px4
deg_to_rad	mavros/test/test_quaternion_utils.cpp	/^static const double deg_to_rad = M_PI \/ 180.0;$/;"	v	file:
delete_channel	libmavconn/src/interface.cpp	/^void MAVConnInterface::delete_channel(int chan) {$/;"	f	class:mavconn::MAVConnInterface
delimiter	mavros/src/mavros/mission.py	/^        delimiter = '\\t'$/;"	v	class:QGroundControlWP.CSVDialect
delimiter	mavros/src/mavros/param.py	/^        delimiter = ','$/;"	v	class:MissionPlannerParam.CSVDialect
delimiter	mavros/src/mavros/param.py	/^        delimiter = '\\t'$/;"	v	class:QGroundControlParam.CSVDialect
destroy	mavros_extras/scripts/mavftpfuse	/^    def destroy(self, path):$/;"	m	class:MavFtp
diag_added	mavros/src/plugins/3dr_radio.cpp	/^	bool diag_added;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
diag_mutex	mavros/src/plugins/3dr_radio.cpp	/^	std::recursive_mutex diag_mutex;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
diag_run	mavros/src/plugins/3dr_radio.cpp	/^	void diag_run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::TDRRadioPlugin	file:
diag_updater	mavros/include/mavros/mavros_uas.h	/^	diagnostic_updater::Updater diag_updater;$/;"	m	class:mavros::UAS
disable_diag	mavros/src/plugins/sys_status.cpp	/^	bool disable_diag;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
dist_nh	mavros_extras/src/plugins/distance_sensor.cpp	/^	ros::NodeHandle dist_nh;$/;"	m	class:mavplugin::DistanceSensorPlugin	file:
distance_sensor	mavros_extras/src/plugins/distance_sensor.cpp	/^	void distance_sensor(uint32_t time_boot_ms,$/;"	f	class:mavplugin::DistanceSensorPlugin	file:
do_accept	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::do_accept()$/;"	f	class:mavconn::MAVConnTCPServer
do_arm	mavros/scripts/mavsafety	/^def do_arm(args):$/;"	f
do_cat	mavros/scripts/mavftp	/^def do_cat(args):$/;"	f
do_change_directory	mavros/scripts/mavftp	/^def do_change_directory(args):$/;"	f
do_clear	mavros/scripts/mavwp	/^def do_clear(args):$/;"	f
do_disarm	mavros/scripts/mavsafety	/^def do_disarm(args):$/;"	f
do_download	mavros/scripts/mavftp	/^def do_download(args):$/;"	f
do_dump	mavros/scripts/mavparam	/^def do_dump(args):$/;"	f
do_dump	mavros/scripts/mavwp	/^def do_dump(args):$/;"	f
do_get	mavros/scripts/mavparam	/^def do_get(args):$/;"	f
do_int	mavros/scripts/mavcmd	/^def do_int(args):$/;"	f
do_land	mavros/scripts/mavcmd	/^def do_land(args):$/;"	f
do_land_cur_gps	mavros/scripts/mavcmd	/^def do_land_cur_gps(args):$/;"	f
do_list	mavros/scripts/mavftp	/^def do_list(args):$/;"	f
do_load	mavros/scripts/mavparam	/^def do_load(args):$/;"	f
do_load	mavros/scripts/mavwp	/^def do_load(args):$/;"	f
do_local_accel	mavros/scripts/mavsetp	/^def do_local_accel(args):$/;"	f
do_local_pos	mavros/scripts/mavsetp	/^def do_local_pos(args):$/;"	f
do_local_selector	mavros/scripts/mavsetp	/^def do_local_selector(args):$/;"	f
do_local_vel	mavros/scripts/mavsetp	/^def do_local_vel(args):$/;"	f
do_long	mavros/scripts/mavcmd	/^def do_long(args):$/;"	f
do_mkdir	mavros/scripts/mavftp	/^def do_mkdir(args):$/;"	f
do_mode	mavros/scripts/mavsys	/^def do_mode(args):$/;"	f
do_pull	mavros/scripts/mavwp	/^def do_pull(args):$/;"	f
do_pull_after_gcs	mavros/src/plugins/waypoint.cpp	/^	bool do_pull_after_gcs;$/;"	m	class:mavplugin::WaypointPlugin	file:
do_rate	mavros/scripts/mavsys	/^def do_rate(args):$/;"	f
do_read	libmavconn/src/serial.cpp	/^void MAVConnSerial::do_read(void)$/;"	f	class:mavconn::MAVConnSerial
do_recv	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::do_recv()$/;"	f	class:mavconn::MAVConnTCPClient
do_recvfrom	libmavconn/src/udp.cpp	/^void MAVConnUDP::do_recvfrom()$/;"	f	class:mavconn::MAVConnUDP
do_remove	mavros/scripts/mavftp	/^def do_remove(args):$/;"	f
do_reset	mavros/scripts/mavftp	/^def do_reset(args):$/;"	f
do_rmdir	mavros/scripts/mavftp	/^def do_rmdir(args):$/;"	f
do_safetyarea	mavros/scripts/mavsafety	/^def do_safetyarea(args):$/;"	f
do_send	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::do_send(bool check_tx_state)$/;"	f	class:mavconn::MAVConnTCPClient
do_sendto	libmavconn/src/udp.cpp	/^void MAVConnUDP::do_sendto(bool check_tx_state)$/;"	f	class:mavconn::MAVConnUDP
do_set	mavros/scripts/mavparam	/^def do_set(args):$/;"	f
do_set_current	mavros/scripts/mavwp	/^def do_set_current(args):$/;"	f
do_set_home	mavros/scripts/mavcmd	/^def do_set_home(args):$/;"	f
do_show	mavros/scripts/mavwp	/^def do_show(args):$/;"	f
do_takeoff	mavros/scripts/mavcmd	/^def do_takeoff(args):$/;"	f
do_takeoff_cur_gps	mavros/scripts/mavcmd	/^def do_takeoff_cur_gps(args):$/;"	f
do_trigger_control	mavros/scripts/mavcmd	/^def do_trigger_control(args):$/;"	f
do_upload	mavros/scripts/mavftp	/^def do_upload(args):$/;"	f
do_verify	mavros/scripts/mavftp	/^def do_verify(args):$/;"	f
do_write	libmavconn/src/serial.cpp	/^void MAVConnSerial::do_write(bool check_tx_state)$/;"	f	class:mavconn::MAVConnSerial
doublequote	mavros/src/mavros/mission.py	/^        doublequote = False$/;"	v	class:QGroundControlWP.CSVDialect
doublequote	mavros/src/mavros/param.py	/^        doublequote = False$/;"	v	class:MissionPlannerParam.CSVDialect
doublequote	mavros/src/mavros/param.py	/^        doublequote = False$/;"	v	class:QGroundControlParam.CSVDialect
dpos	libmavconn/include/mavconn/msgbuffer.h	/^	uint8_t *dpos() {$/;"	f	struct:mavconn::MsgBuffer
dt_diag	mavros/src/plugins/sys_time.cpp	/^	TimeSyncStatus dt_diag;$/;"	m	class:mavplugin::SystemTimePlugin	file:
dt_sum	mavros/src/plugins/sys_time.cpp	/^	int64_t dt_sum;$/;"	m	class:mavplugin::TimeSyncStatus	file:
eight_path_motion	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void eight_path_motion(ros::Rate loop_rate, control_mode mode){$/;"	f	class:testsetup::OffboardControl
eight_shape	test_mavros/include/test_mavros/tests/offboard_control.h	/^	Eigen::Vector3d eight_shape(int angle){$/;"	f	class:testsetup::OffboardControl
ellipse_path_motion	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void ellipse_path_motion(ros::Rate loop_rate, control_mode mode){$/;"	f	class:testsetup::OffboardControl
ellipse_shape	test_mavros/include/test_mavros/tests/offboard_control.h	/^	Eigen::Vector3d ellipse_shape(int angle){$/;"	f	class:testsetup::OffboardControl
enable_offboard	mavros/scripts/mavsetp	/^def enable_offboard():$/;"	f
epsilon	mavros/test/test_frame_conversions.cpp	/^static const double epsilon = 1e-9;$/;"	v	file:
epsilon	mavros/test/test_quaternion_utils.cpp	/^static const double epsilon = 1e-9;$/;"	v	file:
epsilon	mavros/test/test_sensor_orientation.cpp	/^static const double epsilon = 1e-9;$/;"	v	file:
epsilon_f	mavros/test/test_frame_conversions.cpp	/^static const double epsilon_f = 1e-6;$/;"	v	file:
epsilon_f	mavros/test/test_quaternion_utils.cpp	/^static const double epsilon_f = 1e-6;$/;"	v	file:
expandpath	mavros/src/mavros/event_launcher.py	/^        def expandpath(p):$/;"	f	function:Launcher._load_shell
expected_command	mavros/src/plugins/command.cpp	/^	uint16_t expected_command;$/;"	m	class:mavplugin::CommandTransaction	file:
extended_state_pub	mavros/src/plugins/sys_status.cpp	/^	ros::Publisher extended_state_pub;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
fault	mavros/src/mavros/utils.py	/^def fault(*args, **kvargs):$/;"	f
fcu_capabilities	mavros/include/mavros/mavros_uas.h	/^	std::atomic<uint64_t> fcu_capabilities;$/;"	m	class:mavros::UAS
fcu_caps_known	mavros/include/mavros/mavros_uas.h	/^	std::atomic<bool> fcu_caps_known;$/;"	m	class:mavros::UAS
fcu_link	mavros/include/mavros/mavros_uas.h	/^	mavconn::MAVConnInterface::Ptr fcu_link;$/;"	m	class:mavros::UAS
fcu_link_diag	mavros/include/mavros/mavros.h	/^	MavlinkDiag fcu_link_diag;$/;"	m	class:mavros::MavRos
field_of_view	mavros_extras/src/plugins/distance_sensor.cpp	/^	double field_of_view;	\/\/!< FOV of the sensor$/;"	m	class:mavplugin::DistanceSensorItem	file:
file_header	mavros/src/mavros/mission.py	/^    file_header = 'QGC WPL 120'$/;"	v	class:QGroundControlWP
fill_lla	mavros/src/plugins/global_position.cpp	/^	inline void fill_lla(MsgT &msg, sensor_msgs::NavSatFix::Ptr fix) {$/;"	f	class:mavplugin::GlobalPositionPlugin	file:
fill_unknown_cov	mavros/src/plugins/global_position.cpp	/^	inline void fill_unknown_cov(sensor_msgs::NavSatFix::Ptr fix) {$/;"	f	class:mavplugin::GlobalPositionPlugin	file:
fix_cb	mavros/scripts/mavcmd	/^    def fix_cb(fix):$/;"	f	function:do_land_cur_gps
fix_cb	mavros/scripts/mavcmd	/^    def fix_cb(fix):$/;"	f	function:do_takeoff_cur_gps
fixed_frame_id	mavros_extras/src/copter_visualization.cpp	/^static std::string fixed_frame_id;$/;"	v	file:
fixed_frame_id	mavros_extras/src/copter_visualization1.cpp	/^static std::string fixed_frame_id;$/;"	v	file:
fixed_frame_id	mavros_extras/src/copter_visualization2.cpp	/^static std::string fixed_frame_id;$/;"	v	file:
fixed_frame_id	mavros_extras/src/copter_visualization3.cpp	/^static std::string fixed_frame_id;$/;"	v	file:
flags	.ycm_extra_conf.py	/^flags = default_flags + GetRosIncludeFlags()$/;"	v
flow_nh	mavros_extras/src/plugins/px4flow.cpp	/^	ros::NodeHandle flow_nh;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
flow_rad_pub	mavros_extras/src/plugins/px4flow.cpp	/^	ros::Publisher flow_rad_pub;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
frame	mavros/src/plugins/waypoint.cpp	/^	enum MAV_FRAME frame;$/;"	m	class:mavplugin::WaypointItem	typeref:enum:mavplugin::WaypointItem::MAV_FRAME	file:
frame_id	mavros/src/plugins/altitude.cpp	/^    std::string frame_id;$/;"	m	class:mavplugin::AltitudePlugin	file:
frame_id	mavros/src/plugins/global_position.cpp	/^	std::string frame_id;		\/\/!< frame for topic headers$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
frame_id	mavros/src/plugins/imu_pub.cpp	/^	std::string frame_id;$/;"	m	class:mavplugin::IMUPubPlugin	file:
frame_id	mavros/src/plugins/local_position.cpp	/^	std::string frame_id;		\/\/!< frame for Pose$/;"	m	class:mavplugin::LocalPositionPlugin	file:
frame_id	mavros_extras/src/plugins/distance_sensor.cpp	/^	std::string frame_id;	\/\/!< frame id for send$/;"	m	class:mavplugin::DistanceSensorItem	file:
frame_id	mavros_extras/src/plugins/image_pub.cpp	/^	std::string frame_id;$/;"	m	class:mavplugin::ImagePubPlugin	file:
frame_id	mavros_extras/src/plugins/px4flow.cpp	/^	std::string frame_id;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
frame_id	mavros_extras/src/plugins/vibration.cpp	/^	std::string frame_id;$/;"	m	class:mavplugin::VibrationPlugin	file:
freemem	mavros/src/plugins/sys_status.cpp	/^	std::atomic<ssize_t> freemem;$/;"	m	class:mavplugin::MemInfo	file:
from_mission_item	mavros/src/plugins/waypoint.cpp	/^	static WaypointItem from_mission_item(mavlink_mission_item_t &mit) {$/;"	f	class:mavplugin::WaypointItem
from_msg	mavros/src/plugins/waypoint.cpp	/^	static WaypointItem from_msg(mavros_msgs::Waypoint &wp, uint16_t seq) {$/;"	f	class:mavplugin::WaypointItem
from_param_value	mavros/src/plugins/param.cpp	/^	inline Parameter::param_t from_param_value(mavlink_param_value_t &msg) {$/;"	f	class:mavplugin::ParamPlugin	file:
from_param_value	mavros/src/plugins/param.cpp	/^	static param_t from_param_value(mavlink_param_value_t &pmsg) {$/;"	f	class:mavplugin::Parameter
from_param_value_apm_quirk	mavros/src/plugins/param.cpp	/^	static param_t from_param_value_apm_quirk(mavlink_param_value_t &pmsg) {$/;"	f	class:mavplugin::Parameter
from_xmlrpc_value	mavros/src/plugins/param.cpp	/^	static param_t from_xmlrpc_value(XmlRpc::XmlRpcValue &xml) {$/;"	f	class:mavplugin::Parameter
fsyncdir	mavros_extras/scripts/mavftpfuse	/^    def fsyncdir(self, path, datasync=None, fh=None):$/;"	m	class:MavFtp
ftp_nh	mavros/src/plugins/ftp.cpp	/^	ros::NodeHandle ftp_nh;$/;"	m	class:mavplugin::FTPPlugin	file:
gcs_link	mavros/include/mavros/mavros.h	/^	mavconn::MAVConnInterface::Ptr gcs_link;$/;"	m	class:mavros::MavRos
gcs_link	mavros/src/gcs_bridge.cpp	/^MAVConnInterface::Ptr gcs_link;$/;"	v
gcs_link	mavros_extras/src/gcs_image_bridge.cpp	/^MAVConnInterface::Ptr gcs_link;$/;"	v
gcs_link_diag	mavros/include/mavros/mavros.h	/^	MavlinkDiag gcs_link_diag;$/;"	m	class:mavros::MavRos
gen_cb	mavros/src/mavros/event_launcher.py	/^        def gen_cb(event):$/;"	f	function:Launcher._load_trigger
get_armed	mavros/include/mavros/mavros_uas.h	/^	inline bool get_armed() {$/;"	f	class:mavros::UAS
get_attitude_angular_velocity	mavros/src/lib/uas_data.cpp	/^geometry_msgs::Vector3 UAS::get_attitude_angular_velocity()$/;"	f	class:UAS
get_attitude_imu	mavros/src/lib/uas_data.cpp	/^sensor_msgs::Imu::Ptr UAS::get_attitude_imu()$/;"	f	class:UAS
get_attitude_orientation	mavros/src/lib/uas_data.cpp	/^geometry_msgs::Quaternion UAS::get_attitude_orientation()$/;"	f	class:UAS
get_autopilot	mavros/include/mavros/mavros_uas.h	/^	inline enum MAV_AUTOPILOT get_autopilot() {$/;"	f	class:mavros::UAS
get_axis	mavros_extras/scripts/mavteleop	/^def get_axis(j, n):$/;"	f
get_buttons	mavros_extras/scripts/mavteleop	/^def get_buttons(j, n):$/;"	f
get_capabilities	mavros/src/lib/uas_data.cpp	/^uint64_t UAS::get_capabilities()$/;"	f	class:UAS
get_cb	mavros/src/plugins/param.cpp	/^	bool get_cb(mavros_msgs::ParamGet::Request &req,$/;"	f	class:mavplugin::ParamPlugin	file:
get_channel	libmavconn/include/mavconn/interface.h	/^	inline int get_channel() { return channel; };$/;"	f	class:mavconn::MAVConnInterface
get_component_id	libmavconn/include/mavconn/interface.h	/^	inline uint8_t get_component_id() { return comp_id; };$/;"	f	class:mavconn::MAVConnInterface
get_default_caps	mavros/src/lib/uas_data.cpp	/^static uint64_t get_default_caps(uint8_t ap_type)$/;"	f	file:
get_gps_epts	mavros/src/lib/uas_data.cpp	/^void UAS::get_gps_epts(float &eph, float &epv, int &fix_type, int &satellites_visible)$/;"	f	class:UAS
get_gps_fix	mavros/src/lib/uas_data.cpp	/^sensor_msgs::NavSatFix::Ptr UAS::get_gps_fix()$/;"	f	class:UAS
get_hil_state	mavros/include/mavros/mavros_uas.h	/^	inline bool get_hil_state() {$/;"	f	class:mavros::UAS
get_iostat	libmavconn/src/interface.cpp	/^MAVConnInterface::IOStat MAVConnInterface::get_iostat()$/;"	f	class:mavconn::MAVConnInterface
get_iostat	libmavconn/src/tcp.cpp	/^MAVConnInterface::IOStat MAVConnTCPServer::get_iostat()$/;"	f	class:mavconn::MAVConnTCPServer
get_namespace	mavros/src/mavros/__init__.py	/^def get_namespace():$/;"	f
get_param_file_io	mavros/scripts/mavparam	/^def get_param_file_io(args):$/;"	f
get_pub_accel_accel	mavros/src/mavros/setpoint.py	/^def get_pub_accel_accel(**kvargs):$/;"	f
get_pub_attitude_cmd_vel	mavros/src/mavros/setpoint.py	/^def get_pub_attitude_cmd_vel(**kvargs):$/;"	f
get_pub_attitude_pose	mavros/src/mavros/setpoint.py	/^def get_pub_attitude_pose(**kvargs):$/;"	f
get_pub_attitude_posecov	mavros/src/mavros/setpoint.py	/^def get_pub_attitude_posecov(**kvargs):$/;"	f
get_pub_attitude_throttle	mavros/src/mavros/setpoint.py	/^def get_pub_attitude_throttle(**kvargs):$/;"	f
get_pub_position_local	mavros/src/mavros/setpoint.py	/^def get_pub_position_local(**kvargs):$/;"	f
get_pub_velocity_cmd_vel	mavros/src/mavros/setpoint.py	/^def get_pub_velocity_cmd_vel(**kvargs):$/;"	f
get_rx_handlers	mavros/src/plugins/3dr_radio.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::TDRRadioPlugin
get_rx_handlers	mavros/src/plugins/actuator_control.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::ActuatorControlPlugin
get_rx_handlers	mavros/src/plugins/altitude.cpp	/^    const message_map get_rx_handlers() {$/;"	f	class:mavplugin::AltitudePlugin
get_rx_handlers	mavros/src/plugins/command.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::CommandPlugin
get_rx_handlers	mavros/src/plugins/dummy.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::DummyPlugin
get_rx_handlers	mavros/src/plugins/ftp.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::FTPPlugin
get_rx_handlers	mavros/src/plugins/global_position.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::GlobalPositionPlugin
get_rx_handlers	mavros/src/plugins/imu_pub.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::IMUPubPlugin
get_rx_handlers	mavros/src/plugins/local_position.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::LocalPositionPlugin
get_rx_handlers	mavros/src/plugins/manual_control.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::ManualControlPlugin
get_rx_handlers	mavros/src/plugins/param.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::ParamPlugin
get_rx_handlers	mavros/src/plugins/rc_io.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::RCIOPlugin
get_rx_handlers	mavros/src/plugins/safety_area.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SafetyAreaPlugin
get_rx_handlers	mavros/src/plugins/setpoint_accel.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SetpointAccelerationPlugin
get_rx_handlers	mavros/src/plugins/setpoint_attitude.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SetpointAttitudePlugin
get_rx_handlers	mavros/src/plugins/setpoint_position.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SetpointPositionPlugin
get_rx_handlers	mavros/src/plugins/setpoint_raw.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SetpointRawPlugin
get_rx_handlers	mavros/src/plugins/setpoint_velocity.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SetpointVelocityPlugin
get_rx_handlers	mavros/src/plugins/sys_status.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SystemStatusPlugin
get_rx_handlers	mavros/src/plugins/sys_time.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::SystemTimePlugin
get_rx_handlers	mavros/src/plugins/vfr_hud.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::VfrHudPlugin
get_rx_handlers	mavros/src/plugins/waypoint.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::WaypointPlugin
get_rx_handlers	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::CamIMUSyncPlugin
get_rx_handlers	mavros_extras/src/plugins/distance_sensor.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::DistanceSensorPlugin
get_rx_handlers	mavros_extras/src/plugins/image_pub.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::ImagePubPlugin
get_rx_handlers	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::MocapPoseEstimatePlugin
get_rx_handlers	mavros_extras/src/plugins/px4flow.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::PX4FlowPlugin
get_rx_handlers	mavros_extras/src/plugins/uav_lde.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::UavLdePlugin
get_rx_handlers	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::UavPosFeedbackPlugin
get_rx_handlers	mavros_extras/src/plugins/uav_pos_set.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::UavPosSetPlugin
get_rx_handlers	mavros_extras/src/plugins/vibration.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::VibrationPlugin
get_rx_handlers	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::VisionPoseEstimatePlugin
get_rx_handlers	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	const message_map get_rx_handlers() {$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin
get_srv	mavros/src/plugins/param.cpp	/^	ros::ServiceServer get_srv;$/;"	m	class:mavplugin::ParamPlugin	file:
get_static_transform_affine	mavros/src/lib/uas_frame_conversions.cpp	/^static inline const Eigen::Affine3d &get_static_transform_affine(const UAS::STATIC_TRANSFORM transform)$/;"	f	file:
get_status	libmavconn/src/interface.cpp	/^mavlink_status_t MAVConnInterface::get_status()$/;"	f	class:mavconn::MAVConnInterface
get_status	libmavconn/src/tcp.cpp	/^mavlink_status_t MAVConnTCPServer::get_status()$/;"	f	class:mavconn::MAVConnTCPServer
get_system_id	libmavconn/include/mavconn/interface.h	/^	inline uint8_t get_system_id() { return sys_id; };$/;"	f	class:mavconn::MAVConnInterface
get_target_system_id	mavros/src/plugins/ftp.cpp	/^	uint8_t get_target_system_id() {$/;"	f	class:mavplugin::FTPRequest
get_tgt_component	mavros/include/mavros/mavros_uas.h	/^	inline uint8_t get_tgt_component() {$/;"	f	class:mavros::UAS
get_tgt_system	mavros/include/mavros/mavros_uas.h	/^	inline uint8_t get_tgt_system() {$/;"	f	class:mavros::UAS
get_time_offset	mavros/include/mavros/mavros_uas.h	/^	inline uint64_t get_time_offset(void) {$/;"	f	class:mavros::UAS
get_topic	mavros/src/mavros/__init__.py	/^def get_topic(*args):$/;"	f
get_type	mavros/include/mavros/mavros_uas.h	/^	inline enum MAV_TYPE get_type() {$/;"	f	class:mavros::UAS
get_wp_file_io	mavros/scripts/mavwp	/^def get_wp_file_io(args):$/;"	f
getattr	mavros_extras/scripts/mavftpfuse	/^    def getattr(self, path, fh=None):$/;"	m	class:MavFtp
global_cb	mavros/src/plugins/setpoint_raw.cpp	/^	void global_cb(const mavros_msgs::GlobalPositionTarget::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointRawPlugin	file:
global_sub	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Subscriber local_sub, global_sub, attitude_sub;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
go_idle	mavros/src/plugins/ftp.cpp	/^	void go_idle(bool is_error_, int r_errno_ = 0) {$/;"	f	class:mavplugin::FTPPlugin	file:
go_idle	mavros/src/plugins/param.cpp	/^	void go_idle() {$/;"	f	class:mavplugin::ParamPlugin	file:
go_idle	mavros/src/plugins/waypoint.cpp	/^	void go_idle(void) {$/;"	f	class:mavplugin::WaypointPlugin	file:
gp_fix_pub	mavros/src/plugins/global_position.cpp	/^	ros::Publisher gp_fix_pub;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
gp_hdg_pub	mavros/src/plugins/global_position.cpp	/^	ros::Publisher gp_hdg_pub;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
gp_nh	mavros/src/plugins/global_position.cpp	/^	ros::NodeHandle gp_nh;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
gp_odom_pub	mavros/src/plugins/global_position.cpp	/^	ros::Publisher gp_odom_pub;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
gp_rel_alt_pub	mavros/src/plugins/global_position.cpp	/^	ros::Publisher gp_rel_alt_pub;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
gps_diag_run	mavros/src/plugins/global_position.cpp	/^	void gps_diag_run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::GlobalPositionPlugin	file:
gps_eph	mavros/include/mavros/mavros_uas.h	/^	float gps_eph;$/;"	m	class:mavros::UAS
gps_epv	mavros/include/mavros/mavros_uas.h	/^	float gps_epv;$/;"	m	class:mavros::UAS
gps_fix	mavros/include/mavros/mavros_uas.h	/^	sensor_msgs::NavSatFix::Ptr gps_fix;$/;"	m	class:mavros::UAS
gps_fix_type	mavros/include/mavros/mavros_uas.h	/^	int gps_fix_type;$/;"	m	class:mavros::UAS
gps_satellites_visible	mavros/include/mavros/mavros_uas.h	/^	int gps_satellites_visible;$/;"	m	class:mavros::UAS
handle_ack_checksum	mavros/src/plugins/ftp.cpp	/^	void handle_ack_checksum(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_ack_list	mavros/src/plugins/ftp.cpp	/^	void handle_ack_list(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_ack_open	mavros/src/plugins/ftp.cpp	/^	void handle_ack_open(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_ack_read	mavros/src/plugins/ftp.cpp	/^	void handle_ack_read(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_ack_write	mavros/src/plugins/ftp.cpp	/^	void handle_ack_write(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_altitude	mavros/src/plugins/altitude.cpp	/^    void handle_altitude(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::AltitudePlugin	file:
handle_attitude	mavros/src/plugins/imu_pub.cpp	/^	void handle_attitude(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
handle_attitude_quaternion	mavros/src/plugins/imu_pub.cpp	/^	void handle_attitude_quaternion(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
handle_attitude_target	mavros/src/plugins/setpoint_raw.cpp	/^	void handle_attitude_target(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SetpointRawPlugin	file:
handle_autopilot_version	mavros/src/plugins/sys_status.cpp	/^	void handle_autopilot_version(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_cam_trig	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	void handle_cam_trig(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::CamIMUSyncPlugin	file:
handle_command_ack	mavros/src/plugins/command.cpp	/^	void handle_command_ack(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::CommandPlugin	file:
handle_data_transmission_handshake	mavros_extras/src/plugins/image_pub.cpp	/^	void handle_data_transmission_handshake(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::ImagePubPlugin	file:
handle_distance_sensor	mavros_extras/src/plugins/distance_sensor.cpp	/^	void handle_distance_sensor(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::DistanceSensorPlugin	file:
handle_encapsulated_data	mavros_extras/src/plugins/image_pub.cpp	/^	void handle_encapsulated_data(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::ImagePubPlugin	file:
handle_extended_sys_state	mavros/src/plugins/sys_status.cpp	/^	void handle_extended_sys_state(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_file_transfer_protocol	mavros/src/plugins/ftp.cpp	/^	void handle_file_transfer_protocol(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_global_position_int	mavros/src/plugins/global_position.cpp	/^	void handle_global_position_int(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::GlobalPositionPlugin	file:
handle_gps_raw_int	mavros/src/plugins/global_position.cpp	/^	void handle_gps_raw_int(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::GlobalPositionPlugin	file:
handle_heartbeat	mavros/src/plugins/dummy.cpp	/^	void handle_heartbeat(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::DummyPlugin	file:
handle_heartbeat	mavros/src/plugins/sys_status.cpp	/^	void handle_heartbeat(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_highres_imu	mavros/src/plugins/imu_pub.cpp	/^	void handle_highres_imu(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
handle_hwstatus	mavros/src/plugins/sys_status.cpp	/^	void handle_hwstatus(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_local_position_ned	mavros/src/plugins/local_position.cpp	/^	void handle_local_position_ned(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::LocalPositionPlugin	file:
handle_manual_control	mavros/src/plugins/manual_control.cpp	/^	void handle_manual_control(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::ManualControlPlugin	file:
handle_meminfo	mavros/src/plugins/sys_status.cpp	/^	void handle_meminfo(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_message	mavros/src/plugins/3dr_radio.cpp	/^	void handle_message(msgT &rst, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::TDRRadioPlugin	file:
handle_mission_ack	mavros/src/plugins/waypoint.cpp	/^	void handle_mission_ack(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::WaypointPlugin	file:
handle_mission_count	mavros/src/plugins/waypoint.cpp	/^	void handle_mission_count(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::WaypointPlugin	file:
handle_mission_current	mavros/src/plugins/waypoint.cpp	/^	void handle_mission_current(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::WaypointPlugin	file:
handle_mission_item	mavros/src/plugins/waypoint.cpp	/^	void handle_mission_item(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::WaypointPlugin	file:
handle_mission_item_reached	mavros/src/plugins/waypoint.cpp	/^	void handle_mission_item_reached(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::WaypointPlugin	file:
handle_mission_request	mavros/src/plugins/waypoint.cpp	/^	void handle_mission_request(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::WaypointPlugin	file:
handle_optical_flow_rad	mavros_extras/src/plugins/px4flow.cpp	/^	void handle_optical_flow_rad(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::PX4FlowPlugin	file:
handle_param_value	mavros/src/plugins/param.cpp	/^	void handle_param_value(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::ParamPlugin	file:
handle_position_target_global_int	mavros/src/plugins/setpoint_raw.cpp	/^	void handle_position_target_global_int(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SetpointRawPlugin	file:
handle_position_target_local_ned	mavros/src/plugins/setpoint_raw.cpp	/^	void handle_position_target_local_ned(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SetpointRawPlugin	file:
handle_radio	mavros/src/plugins/3dr_radio.cpp	/^	void handle_radio(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::TDRRadioPlugin	file:
handle_radio_status	mavros/src/plugins/3dr_radio.cpp	/^	void handle_radio_status(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::TDRRadioPlugin	file:
handle_raw_imu	mavros/src/plugins/imu_pub.cpp	/^	void handle_raw_imu(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
handle_rc_channels	mavros/src/plugins/rc_io.cpp	/^	void handle_rc_channels(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::RCIOPlugin	file:
handle_rc_channels_raw	mavros/src/plugins/rc_io.cpp	/^	void handle_rc_channels_raw(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::RCIOPlugin	file:
handle_req_ack	mavros/src/plugins/ftp.cpp	/^	void handle_req_ack(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_req_nack	mavros/src/plugins/ftp.cpp	/^	void handle_req_nack(FTPRequest &req) {$/;"	f	class:mavplugin::FTPPlugin	file:
handle_scaled_imu	mavros/src/plugins/imu_pub.cpp	/^	void handle_scaled_imu(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
handle_scaled_pressure	mavros/src/plugins/imu_pub.cpp	/^	void handle_scaled_pressure(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
handle_servo_output_raw	mavros/src/plugins/rc_io.cpp	/^	void handle_servo_output_raw(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::RCIOPlugin	file:
handle_statustext	mavros/src/plugins/dummy.cpp	/^	void handle_statustext(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::DummyPlugin	file:
handle_statustext	mavros/src/plugins/sys_status.cpp	/^	void handle_statustext(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_sys_status	mavros/src/plugins/dummy.cpp	/^	void handle_sys_status(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::DummyPlugin	file:
handle_sys_status	mavros/src/plugins/sys_status.cpp	/^	void handle_sys_status(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
handle_system_time	mavros/src/plugins/sys_time.cpp	/^	void handle_system_time(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemTimePlugin	file:
handle_timesync	mavros/src/plugins/sys_time.cpp	/^	void handle_timesync(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::SystemTimePlugin	file:
handle_vfr_hud	mavros/src/plugins/vfr_hud.cpp	/^	void handle_vfr_hud(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::VfrHudPlugin	file:
handle_vibration	mavros_extras/src/plugins/vibration.cpp	/^	void handle_vibration(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::VibrationPlugin	file:
handle_wind	mavros/src/plugins/vfr_hud.cpp	/^	void handle_wind(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f	class:mavplugin::VfrHudPlugin	file:
handler	mavros/src/mavros/utils.py	/^    def handler(msg):$/;"	f	function:wait_fcu_connection
has_att_quat	mavros/src/plugins/imu_pub.cpp	/^	bool has_att_quat;$/;"	m	class:mavplugin::IMUPubPlugin	file:
has_hr_imu	mavros/src/plugins/imu_pub.cpp	/^	bool has_hr_imu;$/;"	m	class:mavplugin::IMUPubPlugin	file:
has_radio_status	mavros/src/plugins/3dr_radio.cpp	/^	bool has_radio_status;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
has_rc_channels_msg	mavros/src/plugins/rc_io.cpp	/^	bool has_rc_channels_msg;$/;"	m	class:mavplugin::RCIOPlugin	file:
has_scaled_imu	mavros/src/plugins/imu_pub.cpp	/^	bool has_scaled_imu;$/;"	m	class:mavplugin::IMUPubPlugin	file:
hb_diag	mavros/src/plugins/sys_status.cpp	/^	HeartbeatStatus hb_diag;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
header	mavros/src/plugins/ftp.cpp	/^	inline PayloadHeader *header() {$/;"	f	class:mavplugin::FTPRequest
heartbeat_cb	mavros/src/plugins/sys_status.cpp	/^	void heartbeat_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
heartbeat_timer	mavros/src/plugins/sys_status.cpp	/^	ros::Timer heartbeat_timer;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
hist_indx_	mavros/src/plugins/sys_status.cpp	/^	int hist_indx_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
hist_indx_	mavros/src/plugins/sys_time.cpp	/^	int hist_indx_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
hwst_diag	mavros/src/plugins/sys_status.cpp	/^	HwStatus hwst_diag;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
i2cerr	mavros/src/plugins/sys_status.cpp	/^	size_t i2cerr;$/;"	m	class:mavplugin::HwStatus	file:
i2cerr_last	mavros/src/plugins/sys_status.cpp	/^	size_t i2cerr_last;$/;"	m	class:mavplugin::HwStatus	file:
im_buffer	mavros_extras/src/plugins/image_pub.cpp	/^	std::vector<uint8_t> im_buffer;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_height	mavros_extras/src/plugins/image_pub.cpp	/^	size_t im_width, im_height;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_nh	mavros_extras/src/plugins/image_pub.cpp	/^	ros::NodeHandle im_nh;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_packets	mavros_extras/src/plugins/image_pub.cpp	/^	size_t im_size, im_packets, im_payload;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_payload	mavros_extras/src/plugins/image_pub.cpp	/^	size_t im_size, im_packets, im_payload;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_seqnr	mavros_extras/src/plugins/image_pub.cpp	/^	size_t im_seqnr;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_size	mavros_extras/src/plugins/image_pub.cpp	/^	size_t im_size, im_packets, im_payload;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_type	mavros_extras/src/plugins/image_pub.cpp	/^	uint8_t im_type;$/;"	m	class:mavplugin::ImagePubPlugin	file:
im_width	mavros_extras/src/plugins/image_pub.cpp	/^	size_t im_width, im_height;$/;"	m	class:mavplugin::ImagePubPlugin	file:
image_cb	mavros_extras/src/gcs_image_bridge.cpp	/^void image_cb(const sensor_msgs::Image::ConstPtr &img_msg)$/;"	f
image_pub	mavros_extras/src/plugins/image_pub.cpp	/^	image_transport::Publisher image_pub;$/;"	m	class:mavplugin::ImagePubPlugin	file:
imu_data	mavros/include/mavros/mavros_uas.h	/^	sensor_msgs::Imu::Ptr imu_data;$/;"	m	class:mavros::UAS
imu_nh	mavros/src/plugins/imu_pub.cpp	/^	ros::NodeHandle imu_nh;$/;"	m	class:mavplugin::IMUPubPlugin	file:
imu_pub	mavros/src/plugins/imu_pub.cpp	/^	ros::Publisher imu_pub;$/;"	m	class:mavplugin::IMUPubPlugin	file:
imu_raw_pub	mavros/src/plugins/imu_pub.cpp	/^	ros::Publisher imu_raw_pub;$/;"	m	class:mavplugin::IMUPubPlugin	file:
init	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void init() {$/;"	f	class:testsetup::OffboardControl
initialize	mavros/src/plugins/3dr_radio.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::TDRRadioPlugin
initialize	mavros/src/plugins/actuator_control.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::ActuatorControlPlugin
initialize	mavros/src/plugins/altitude.cpp	/^    void initialize(UAS &uas_)$/;"	f	class:mavplugin::AltitudePlugin
initialize	mavros/src/plugins/command.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::CommandPlugin
initialize	mavros/src/plugins/dummy.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::DummyPlugin
initialize	mavros/src/plugins/ftp.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::FTPPlugin
initialize	mavros/src/plugins/global_position.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::GlobalPositionPlugin
initialize	mavros/src/plugins/imu_pub.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::IMUPubPlugin
initialize	mavros/src/plugins/local_position.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::LocalPositionPlugin
initialize	mavros/src/plugins/manual_control.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::ManualControlPlugin
initialize	mavros/src/plugins/param.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::ParamPlugin
initialize	mavros/src/plugins/rc_io.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::RCIOPlugin
initialize	mavros/src/plugins/safety_area.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SafetyAreaPlugin
initialize	mavros/src/plugins/setpoint_accel.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SetpointAccelerationPlugin
initialize	mavros/src/plugins/setpoint_attitude.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SetpointAttitudePlugin
initialize	mavros/src/plugins/setpoint_position.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SetpointPositionPlugin
initialize	mavros/src/plugins/setpoint_raw.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SetpointRawPlugin
initialize	mavros/src/plugins/setpoint_velocity.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SetpointVelocityPlugin
initialize	mavros/src/plugins/sys_status.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SystemStatusPlugin
initialize	mavros/src/plugins/sys_time.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::SystemTimePlugin
initialize	mavros/src/plugins/vfr_hud.cpp	/^	void initialize(UAS &uas)$/;"	f	class:mavplugin::VfrHudPlugin
initialize	mavros/src/plugins/waypoint.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::WaypointPlugin
initialize	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::CamIMUSyncPlugin
initialize	mavros_extras/src/plugins/distance_sensor.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::DistanceSensorPlugin
initialize	mavros_extras/src/plugins/image_pub.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::ImagePubPlugin
initialize	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::MocapPoseEstimatePlugin
initialize	mavros_extras/src/plugins/px4flow.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::PX4FlowPlugin
initialize	mavros_extras/src/plugins/uav_lde.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::UavLdePlugin
initialize	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::UavPosFeedbackPlugin
initialize	mavros_extras/src/plugins/uav_pos_set.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::UavPosSetPlugin
initialize	mavros_extras/src/plugins/vibration.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::VibrationPlugin
initialize	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::VisionPoseEstimatePlugin
initialize	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	void initialize(UAS &uas_)$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin
int	mavros/src/mavros/command.py	/^int = None$/;"	v
io_service	libmavconn/include/mavconn/serial.h	/^	boost::asio::io_service io_service;$/;"	m	class:mavconn::MAVConnSerial
io_service	libmavconn/include/mavconn/tcp.h	/^	boost::asio::io_service io_service;$/;"	m	class:mavconn::MAVConnTCPClient
io_service	libmavconn/include/mavconn/tcp.h	/^	boost::asio::io_service io_service;$/;"	m	class:mavconn::MAVConnTCPServer
io_service	libmavconn/include/mavconn/udp.h	/^	boost::asio::io_service io_service;$/;"	m	class:mavconn::MAVConnUDP
io_thread	libmavconn/include/mavconn/serial.h	/^	std::thread io_thread;$/;"	m	class:mavconn::MAVConnSerial
io_thread	libmavconn/include/mavconn/tcp.h	/^	std::thread io_thread;$/;"	m	class:mavconn::MAVConnTCPClient
io_thread	libmavconn/include/mavconn/tcp.h	/^	std::thread io_thread;$/;"	m	class:mavconn::MAVConnTCPServer
io_thread	libmavconn/include/mavconn/udp.h	/^	std::thread io_thread;$/;"	m	class:mavconn::MAVConnUDP
io_work	libmavconn/include/mavconn/tcp.h	/^	std::unique_ptr<boost::asio::io_service::work> io_work;$/;"	m	class:mavconn::MAVConnTCPClient
io_work	libmavconn/include/mavconn/tcp.h	/^	std::unique_ptr<boost::asio::io_service::work> io_work;$/;"	m	class:mavconn::MAVConnTCPServer
io_work	libmavconn/include/mavconn/udp.h	/^	std::unique_ptr<boost::asio::io_service::work> io_work;$/;"	m	class:mavconn::MAVConnUDP
ioerror_to_oserror	mavros_extras/scripts/mavftpfuse	/^def ioerror_to_oserror(foo):$/;"	f
iostat_mutex	libmavconn/include/mavconn/interface.h	/^	std::recursive_mutex iostat_mutex;$/;"	m	class:mavconn::MAVConnInterface
iostat_rx_add	libmavconn/src/interface.cpp	/^void MAVConnInterface::iostat_rx_add(size_t bytes)$/;"	f	class:mavconn::MAVConnInterface
iostat_tx_add	libmavconn/src/interface.cpp	/^void MAVConnInterface::iostat_tx_add(size_t bytes)$/;"	f	class:mavconn::MAVConnInterface
is_apm_copter	mavros/src/lib/uas_stringify.cpp	/^static inline bool is_apm_copter(enum MAV_TYPE &type) {$/;"	f	file:
is_ardupilotmega	mavros/include/mavros/mavros_uas.h	/^	inline bool is_ardupilotmega() {$/;"	f	class:mavros::UAS
is_blacklisted	mavros/src/lib/mavros.cpp	/^bool MavRos::is_blacklisted(std::string &pl_name, ros::V_string &blacklist, ros::V_string &whitelist) {$/;"	f	class:MavRos
is_connected	mavros/include/mavros/mavlink_diag.h	/^	std::atomic<bool> is_connected;$/;"	m	class:mavros::MavlinkDiag
is_connected	mavros/include/mavros/mavros_uas.h	/^	inline bool is_connected() {$/;"	f	class:mavros::UAS
is_error	mavros/src/plugins/ftp.cpp	/^	bool is_error;			\/\/!< error signaling flag (timeout\/proto error)$/;"	m	class:mavplugin::FTPPlugin	file:
is_my_target	mavros/include/mavros/mavros_uas.h	/^	inline bool is_my_target(uint8_t sysid) {$/;"	f	class:mavros::UAS
is_my_target	mavros/include/mavros/mavros_uas.h	/^	inline bool is_my_target(uint8_t sysid, uint8_t compid) {$/;"	f	class:mavros::UAS
is_near	test_mavros/scripts/setpoint_position_demo	/^        def is_near(msg, x, y):$/;"	f	function:SetpointPosition.reached
is_normalized	mavros/src/plugins/setpoint_attitude.cpp	/^	inline bool is_normalized(float throttle, const float min, const float max) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
is_open	libmavconn/include/mavconn/serial.h	/^	inline bool is_open() { return serial_dev.is_open(); };$/;"	f	class:mavconn::MAVConnSerial
is_open	libmavconn/include/mavconn/tcp.h	/^	inline bool is_open() { return acceptor.is_open(); };$/;"	f	class:mavconn::MAVConnTCPServer
is_open	libmavconn/include/mavconn/tcp.h	/^	inline bool is_open() { return socket.is_open(); };$/;"	f	class:mavconn::MAVConnTCPClient
is_open	libmavconn/include/mavconn/udp.h	/^	inline bool is_open() { return socket.is_open(); };$/;"	f	class:mavconn::MAVConnUDP
is_px4	mavros/include/mavros/mavros_uas.h	/^	inline bool is_px4() {$/;"	f	class:mavros::UAS
is_subscriber	mavros_extras/src/plugins/distance_sensor.cpp	/^	bool is_subscriber;	\/\/!< this item is a subscriber, else is a publisher$/;"	m	class:mavplugin::DistanceSensorItem	file:
is_timedout	mavros/src/plugins/param.cpp	/^	bool is_timedout;$/;"	m	class:mavplugin::ParamPlugin	file:
is_timedout	mavros/src/plugins/param.cpp	/^	bool is_timedout;$/;"	m	class:mavplugin::ParamSetOpt	file:
is_timedout	mavros/src/plugins/waypoint.cpp	/^	bool is_timedout;$/;"	m	class:mavplugin::WaypointPlugin	file:
is_toggled	mavros_extras/scripts/mavteleop	/^    def is_toggled(self,joy):$/;"	m	class:RCMode
itp	mavros_extras/src/plugins/image_pub.cpp	/^	boost::shared_ptr<image_transport::ImageTransport> itp;$/;"	m	class:mavplugin::ImagePubPlugin	file:
joint_lower	mavros_extras/src/servo_state_publisher.cpp	/^	float joint_lower;$/;"	m	class:ServoDescription	file:
joint_name	mavros_extras/src/servo_state_publisher.cpp	/^	std::string joint_name;$/;"	m	class:ServoDescription	file:
joint_states_pub	mavros_extras/src/servo_state_publisher.cpp	/^	ros::Publisher joint_states_pub;$/;"	m	class:ServoStatePublisher	file:
joint_upper	mavros_extras/src/servo_state_publisher.cpp	/^	float joint_upper;$/;"	m	class:ServoDescription	file:
joy_cb	mavros_extras/scripts/mavteleop	/^    def joy_cb(joy):$/;"	f	function:attitude_setpoint_control
joy_cb	mavros_extras/scripts/mavteleop	/^    def joy_cb(joy):$/;"	f	function:position_setpoint_control
joy_cb	mavros_extras/scripts/mavteleop	/^    def joy_cb(joy):$/;"	f	function:rc_override_control
joy_cb	mavros_extras/scripts/mavteleop	/^    def joy_cb(joy):$/;"	f	function:velocity_setpoint_control
jpeg_quality	mavros_extras/src/gcs_image_bridge.cpp	/^int jpeg_quality;$/;"	v
known_versions	mavros/src/mavros/mission.py	/^    known_versions = (110, 120)$/;"	v	class:QGroundControlWP
land	mavros/src/mavros/command.py	/^land = None$/;"	v
land_cb	mavros/src/plugins/command.cpp	/^	bool land_cb(mavros_msgs::CommandTOL::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
land_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer land_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
last_drop_count	mavros/include/mavros/mavlink_diag.h	/^	unsigned int last_drop_count;$/;"	m	class:mavros::MavlinkDiag
last_dt	mavros/src/plugins/sys_time.cpp	/^	int64_t last_dt;$/;"	m	class:mavplugin::TimeSyncStatus	file:
last_iostat	libmavconn/include/mavconn/interface.h	/^	std::chrono::time_point<steady_clock> last_iostat;$/;"	m	class:mavconn::MAVConnInterface
last_remote_ep	libmavconn/include/mavconn/udp.h	/^	boost::asio::ip::udp::endpoint last_remote_ep;$/;"	m	class:mavconn::MAVConnUDP
last_rx_total_bytes	libmavconn/include/mavconn/interface.h	/^	size_t last_tx_total_bytes, last_rx_total_bytes;$/;"	m	class:mavconn::MAVConnInterface
last_send_seqnr	mavros/src/plugins/ftp.cpp	/^	uint16_t last_send_seqnr;	\/\/!< seqNumber for send.$/;"	m	class:mavplugin::FTPPlugin	file:
last_st	mavros/src/plugins/sys_status.cpp	/^	mavlink_sys_status_t last_st;$/;"	m	class:mavplugin::SystemStatusDiag	file:
last_status	mavros/src/plugins/3dr_radio.cpp	/^	mavros_msgs::RadioStatus::Ptr last_status;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
last_transform_stamp	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	ros::Time last_transform_stamp;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
last_ts	mavros/src/plugins/sys_time.cpp	/^	uint64_t last_ts;$/;"	m	class:mavplugin::TimeSyncStatus	file:
last_tx_total_bytes	libmavconn/include/mavconn/interface.h	/^	size_t last_tx_total_bytes, last_rx_total_bytes;$/;"	m	class:mavconn::MAVConnInterface
leader_cb	mavros_extras/src/plugins/uav_lde.cpp	/^	void leader_cb(const demo_test::ekf_leader::ConstPtr &code)$/;"	f	class:mavplugin::UavLdePlugin	file:
leader_temp	mavros_extras/src/plugins/uav_lde.cpp	/^	demo_test::ekf_leader leader_temp;$/;"	m	class:mavplugin::UavLdePlugin	file:
len	libmavconn/include/mavconn/msgbuffer.h	/^	ssize_t len;$/;"	m	struct:mavconn::MsgBuffer
linear_accel_vec	mavros/src/plugins/imu_pub.cpp	/^	Eigen::Vector3d linear_accel_vec;$/;"	m	class:mavplugin::IMUPubPlugin	file:
linear_acceleration_cov	mavros/src/plugins/imu_pub.cpp	/^	UAS::Covariance3d linear_acceleration_cov;$/;"	m	class:mavplugin::IMUPubPlugin	file:
lineterminator	mavros/src/mavros/mission.py	/^        lineterminator = '\\r\\n'$/;"	v	class:QGroundControlWP.CSVDialect
lineterminator	mavros/src/mavros/param.py	/^        lineterminator = '\\n'$/;"	v	class:QGroundControlParam.CSVDialect
lineterminator	mavros/src/mavros/param.py	/^        lineterminator = '\\r\\n'$/;"	v	class:MissionPlannerParam.CSVDialect
linvel_d_gain	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double linvel_d_gain;$/;"	m	class:testsetup::OffboardControl
linvel_i_gain	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double linvel_i_gain;$/;"	m	class:testsetup::OffboardControl
linvel_i_max	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double linvel_i_max;$/;"	m	class:testsetup::OffboardControl
linvel_i_min	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double linvel_i_min;$/;"	m	class:testsetup::OffboardControl
linvel_p_gain	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double linvel_p_gain;$/;"	m	class:testsetup::OffboardControl
list_cb	mavros/src/plugins/ftp.cpp	/^	bool list_cb(mavros_msgs::FileList::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
list_cond_mutex	mavros/src/plugins/param.cpp	/^	std::mutex list_cond_mutex;$/;"	m	class:mavplugin::ParamPlugin	file:
list_directory	mavros/src/plugins/ftp.cpp	/^	void list_directory(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
list_directory_end	mavros/src/plugins/ftp.cpp	/^	void list_directory_end() {$/;"	f	class:mavplugin::FTPPlugin	file:
list_entries	mavros/src/plugins/ftp.cpp	/^	std::vector<mavros_msgs::FileEntry> list_entries;$/;"	m	class:mavplugin::FTPPlugin	file:
list_offset	mavros/src/plugins/ftp.cpp	/^	uint32_t list_offset;$/;"	m	class:mavplugin::FTPPlugin	file:
list_path	mavros/src/plugins/ftp.cpp	/^	std::string list_path;$/;"	m	class:mavplugin::FTPPlugin	file:
list_receiving	mavros/src/plugins/param.cpp	/^	std::condition_variable list_receiving;$/;"	m	class:mavplugin::ParamPlugin	file:
list_receiving	mavros/src/plugins/waypoint.cpp	/^	std::condition_variable list_receiving;$/;"	m	class:mavplugin::WaypointPlugin	file:
list_sending	mavros/src/plugins/waypoint.cpp	/^	std::condition_variable list_sending;$/;"	m	class:mavplugin::WaypointPlugin	file:
list_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer list_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
listdir	mavros/src/mavros/ftp.py	/^def listdir(path):$/;"	f
load_map	mavros_extras/scripts/mavteleop	/^def load_map(m, n):$/;"	f
load_param	mavros_extras/scripts/mavteleop	/^    def load_param(ns='~rc_modes\/'):$/;"	m	class:RCMode
load_param	mavros_extras/scripts/mavteleop	/^    def load_param(self):$/;"	m	class:RCChan
loaded_plugins	mavros/include/mavros/mavros.h	/^	std::vector<mavplugin::MavRosPlugin::Ptr> loaded_plugins;$/;"	m	class:mavros::MavRos
local_cb	mavros/src/plugins/setpoint_raw.cpp	/^	void local_cb(const mavros_msgs::PositionTarget::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointRawPlugin	file:
local_odom	mavros/src/plugins/local_position.cpp	/^	ros::Publisher local_odom;$/;"	m	class:mavplugin::LocalPositionPlugin	file:
local_pos_cb	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void local_pos_cb(const geometry_msgs::PoseStampedConstPtr& msg){$/;"	f	class:testsetup::OffboardControl
local_pos_sp_pub	test_mavros/include/test_mavros/tests/offboard_control.h	/^	ros::Publisher local_pos_sp_pub;$/;"	m	class:testsetup::OffboardControl
local_pos_sub	test_mavros/include/test_mavros/tests/offboard_control.h	/^	ros::Subscriber local_pos_sub;$/;"	m	class:testsetup::OffboardControl
local_position	mavros/src/plugins/local_position.cpp	/^	ros::Publisher local_position;$/;"	m	class:mavplugin::LocalPositionPlugin	file:
local_position_sub_cb	mavros_extras/src/copter_visualization.cpp	/^static void local_position_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
local_position_sub_cb	mavros_extras/src/copter_visualization1.cpp	/^static void local_position_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
local_position_sub_cb	mavros_extras/src/copter_visualization2.cpp	/^static void local_position_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
local_position_sub_cb	mavros_extras/src/copter_visualization3.cpp	/^static void local_position_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
local_sub	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Subscriber local_sub, global_sub, attitude_sub;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
local_velocity	mavros/src/plugins/local_position.cpp	/^	ros::Publisher local_velocity;$/;"	m	class:mavplugin::LocalPositionPlugin	file:
localpos	test_mavros/include/test_mavros/tests/offboard_control.h	/^	geometry_msgs::PoseStamped localpos, ps;$/;"	m	class:testsetup::OffboardControl
lock_guard	libmavconn/src/serial.cpp	/^typedef std::lock_guard<std::recursive_mutex> lock_guard;$/;"	t	namespace:mavconn	file:
lock_guard	libmavconn/src/tcp.cpp	/^typedef std::lock_guard<std::recursive_mutex> lock_guard;$/;"	t	namespace:mavconn	file:
lock_guard	libmavconn/src/udp.cpp	/^typedef std::lock_guard<std::recursive_mutex> lock_guard;$/;"	t	namespace:mavconn	file:
lock_guard	mavros/include/mavros/mavros_plugin.h	/^typedef std::lock_guard<std::recursive_mutex> lock_guard;$/;"	t	namespace:mavplugin
lock_guard	mavros/include/mavros/mavros_uas.h	/^	typedef std::lock_guard<std::recursive_mutex> lock_guard;$/;"	t	class:mavros::UAS
log_connect_change	mavros/src/lib/mavros.cpp	/^void MavRos::log_connect_change(bool connected) {$/;"	f	class:MavRos
long	mavros/src/mavros/command.py	/^long = None$/;"	v
low_rssi	mavros/src/plugins/3dr_radio.cpp	/^	int low_rssi;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
lp_nh	mavros/src/plugins/local_position.cpp	/^	ros::NodeHandle lp_nh;$/;"	m	class:mavplugin::LocalPositionPlugin	file:
m_mavlink_buffer	libmavconn/src/mavlink_helpers.cpp	/^static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];$/;"	v	file:
m_mavlink_status	libmavconn/src/mavlink_helpers.cpp	/^static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];$/;"	v	file:
magn_pub	mavros/src/plugins/imu_pub.cpp	/^	ros::Publisher magn_pub;$/;"	m	class:mavplugin::IMUPubPlugin	file:
magnetic_cov	mavros/src/plugins/imu_pub.cpp	/^	UAS::Covariance3d magnetic_cov;$/;"	m	class:mavplugin::IMUPubPlugin	file:
main	libmavconn/test/test_hang.cpp	/^int main(int argc, char **argv){$/;"	f
main	libmavconn/test/test_mavconn.cpp	/^int main(int argc, char **argv){$/;"	f
main	mavros/scripts/checkid	/^def main():$/;"	f
main	mavros/scripts/mavcmd	/^def main():$/;"	f
main	mavros/scripts/mavftp	/^def main():$/;"	f
main	mavros/scripts/mavparam	/^def main():$/;"	f
main	mavros/scripts/mavsafety	/^def main():$/;"	f
main	mavros/scripts/mavsetp	/^def main():$/;"	f
main	mavros/scripts/mavsys	/^def main():$/;"	f
main	mavros/scripts/mavwp	/^def main():$/;"	f
main	mavros/src/gcs_bridge.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros/src/mavros/event_launcher.py	/^def main():$/;"	f
main	mavros/src/mavros_node.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros/test/test_frame_conversions.cpp	/^int main(int argc, char **argv)$/;"	f
main	mavros/test/test_quaternion_utils.cpp	/^int main(int argc, char **argv)$/;"	f
main	mavros/test/test_sensor_orientation.cpp	/^int main(int argc, char **argv)$/;"	f
main	mavros_extras/scripts/mavftpfuse	/^def main():$/;"	f
main	mavros_extras/scripts/mavteleop	/^def main():$/;"	f
main	mavros_extras/src/copter_visualization.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros_extras/src/copter_visualization1.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros_extras/src/copter_visualization2.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros_extras/src/copter_visualization3.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros_extras/src/gcs_image_bridge.cpp	/^int main(int argc, char *argv[])$/;"	f
main	mavros_extras/src/servo_state_publisher.cpp	/^int main(int argc, char *argv[])$/;"	f
main	test_mavros/sitl_test/sitl_test_node.cpp	/^int main(int argc, char *argv[])$/;"	f
main_mode	mavros/include/mavros/px4_custom_mode.h	/^		uint8_t main_mode;$/;"	m	struct:px4::custom_mode::__anon1
make_message	libmavconn/include/mavconn/interface.h	/^	static std::string make_message(const char *module, T msg) {$/;"	f	class:mavconn::DeviceError
make_orientation	mavros/src/lib/uas_sensor_orientation.cpp	/^static const OrientationPair make_orientation(const std::string &name,$/;"	f	file:
manual_control_nh	mavros/src/plugins/manual_control.cpp	/^	ros::NodeHandle manual_control_nh;$/;"	m	class:mavplugin::ManualControlPlugin	file:
marker_scale	mavros_extras/src/copter_visualization.cpp	/^static double marker_scale;$/;"	v	file:
marker_scale	mavros_extras/src/copter_visualization1.cpp	/^static double marker_scale;$/;"	v	file:
marker_scale	mavros_extras/src/copter_visualization2.cpp	/^static double marker_scale;$/;"	v	file:
marker_scale	mavros_extras/src/copter_visualization3.cpp	/^static double marker_scale;$/;"	v	file:
mav_uas	mavros/include/mavros/mavros.h	/^	UAS mav_uas;$/;"	m	class:mavros::MavRos
mavconn	libmavconn/include/mavconn/interface.h	/^namespace mavconn {$/;"	n
mavconn	libmavconn/include/mavconn/msgbuffer.h	/^namespace mavconn {$/;"	n
mavconn	libmavconn/include/mavconn/serial.h	/^namespace mavconn {$/;"	n
mavconn	libmavconn/include/mavconn/tcp.h	/^namespace mavconn {$/;"	n
mavconn	libmavconn/include/mavconn/udp.h	/^namespace mavconn {$/;"	n
mavconn	libmavconn/src/interface.cpp	/^namespace mavconn {$/;"	n	file:
mavconn	libmavconn/src/serial.cpp	/^namespace mavconn {$/;"	n	file:
mavconn	libmavconn/src/tcp.cpp	/^namespace mavconn {$/;"	n	file:
mavconn	libmavconn/src/udp.cpp	/^namespace mavconn {$/;"	n	file:
mavlink	mavros_msgs/include/mavros_msgs/mavlink_convert.h	/^namespace mavlink {$/;"	n	namespace:mavros_msgs
mavlink_crcs	libmavconn/include/mavconn/interface.h	/^	static const uint8_t mavlink_crcs[];$/;"	m	class:mavconn::MAVConnInterface
mavlink_crcs	libmavconn/src/interface.cpp	/^const uint8_t MAVConnInterface::mavlink_crcs[] = MAVLINK_MESSAGE_CRCS;$/;"	m	class:mavconn::MAVConnInterface	file:
mavlink_from_cb	mavros/scripts/checkid	/^    def mavlink_from_cb(self, msg):$/;"	m	class:Checker
mavlink_get_channel_buffer	libmavconn/src/mavlink_helpers.cpp	/^mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)$/;"	f
mavlink_get_channel_status	libmavconn/src/mavlink_helpers.cpp	/^mavlink_status_t* mavlink_get_channel_status(uint8_t chan)$/;"	f
mavlink_nh	mavros/include/mavros/mavros.h	/^	ros::NodeHandle mavlink_nh;$/;"	m	class:mavros::MavRos
mavlink_pub	mavros/include/mavros/mavros.h	/^	ros::Publisher mavlink_pub;$/;"	m	class:mavros::MavRos
mavlink_pub	mavros_extras/src/gcs_image_bridge.cpp	/^ros::Publisher mavlink_pub;$/;"	v
mavlink_pub_cb	mavros/src/gcs_bridge.cpp	/^void mavlink_pub_cb(const mavlink_message_t *mmsg, uint8_t sysid, uint8_t compid) {$/;"	f
mavlink_pub_cb	mavros/src/lib/mavros.cpp	/^void MavRos::mavlink_pub_cb(const mavlink_message_t *mmsg, uint8_t sysid, uint8_t compid) {$/;"	f	class:MavRos
mavlink_pub_cb	mavros_extras/src/gcs_image_bridge.cpp	/^void mavlink_pub_cb(const mavlink_message_t *mmsg, uint8_t sysid, uint8_t compid)$/;"	f
mavlink_sub	mavros/include/mavros/mavros.h	/^	ros::Subscriber mavlink_sub;$/;"	m	class:mavros::MavRos
mavlink_sub	mavros/src/gcs_bridge.cpp	/^ros::Subscriber mavlink_sub;$/;"	v
mavlink_sub_cb	mavros/src/gcs_bridge.cpp	/^void mavlink_sub_cb(const mavros_msgs::Mavlink::ConstPtr &rmsg) {$/;"	f
mavlink_sub_cb	mavros/src/lib/mavros.cpp	/^void MavRos::mavlink_sub_cb(const mavros_msgs::Mavlink::ConstPtr &rmsg) {$/;"	f	class:MavRos
mavlink_sub_cb	mavros_extras/src/gcs_image_bridge.cpp	/^void mavlink_sub_cb(const mavros_msgs::Mavlink::ConstPtr &rmsg)$/;"	f
mavplugin	mavros/include/mavros/mavros_plugin.h	/^namespace mavplugin {$/;"	n
mavplugin	mavros/include/mavros/setpoint_mixin.h	/^namespace mavplugin {$/;"	n
mavplugin	mavros/src/plugins/3dr_radio.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/actuator_control.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/altitude.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/command.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/dummy.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/ftp.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/global_position.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/imu_pub.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/local_position.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/manual_control.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/param.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/rc_io.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/safety_area.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/setpoint_accel.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/setpoint_attitude.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/setpoint_position.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/setpoint_raw.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/setpoint_velocity.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/sys_status.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/sys_time.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/vfr_hud.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros/src/plugins/waypoint.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/cam_imu_sync.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/distance_sensor.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/image_pub.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/px4flow.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/uav_lde.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/uav_pos_set.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/vibration.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^namespace mavplugin {$/;"	n	file:
mavplugin	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^namespace mavplugin {$/;"	n	file:
mavros	mavros/include/mavros/mavlink_diag.h	/^namespace mavros {$/;"	n
mavros	mavros/include/mavros/mavros.h	/^namespace mavros {$/;"	n
mavros	mavros/include/mavros/mavros_uas.h	/^namespace mavros {$/;"	n
mavros	mavros/include/mavros/utils.h	/^namespace mavros {$/;"	n
mavros_msgs	mavros_msgs/include/mavros_msgs/mavlink_convert.h	/^namespace mavros_msgs {$/;"	n
mavros_state_cb	mavros/src/mavros/event_launcher.py	/^    def mavros_state_cb(self, msg):$/;"	m	class:Launcher
mavutils	libmavconn/include/mavconn/thread_utils.h	/^namespace mavutils {$/;"	n
mavutils	mavros/include/mavros/utils.h	/^namespace mavutils {$/;"	n
max_freq_	mavros/src/plugins/sys_status.cpp	/^	const double max_freq_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
max_freq_	mavros/src/plugins/sys_time.cpp	/^	const double max_freq_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
max_track_size	mavros_extras/src/copter_visualization.cpp	/^static int max_track_size = 100;$/;"	v	file:
max_track_size	mavros_extras/src/copter_visualization1.cpp	/^static int max_track_size = 100;$/;"	v	file:
max_track_size	mavros_extras/src/copter_visualization2.cpp	/^static int max_track_size = 100;$/;"	v	file:
max_track_size	mavros_extras/src/copter_visualization3.cpp	/^static int max_track_size = 100;$/;"	v	file:
mem_diag	mavros/src/plugins/sys_status.cpp	/^	MemInfo mem_diag;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
message	mavros/src/plugins/ftp.cpp	/^	mavlink_file_transfer_protocol_t message;$/;"	m	class:mavplugin::FTPRequest	file:
message_handler	mavros/include/mavros/mavros_plugin.h	/^	typedef boost::function<void (const mavlink_message_t *msg, uint8_t sysid, uint8_t compid)> message_handler;$/;"	t	class:mavplugin::MavRosPlugin
message_id	libmavconn/test/test_mavconn.cpp	/^	int8_t message_id;$/;"	m	class:UDP	file:
message_map	mavros/include/mavros/mavros_plugin.h	/^	typedef std::map<uint8_t, message_handler> message_map;$/;"	t	class:mavplugin::MavRosPlugin
message_received	libmavconn/include/mavconn/interface.h	/^	MessageSig message_received;$/;"	m	class:mavconn::MAVConnInterface
message_route_table	mavros/include/mavros/mavros.h	/^	std::array<mavconn::MAVConnInterface::MessageSig, 256> message_route_table;$/;"	m	class:mavros::MavRos
min_freq_	mavros/src/plugins/sys_status.cpp	/^	const double min_freq_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
min_freq_	mavros/src/plugins/sys_time.cpp	/^	const double min_freq_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
min_voltage	mavros/src/plugins/sys_status.cpp	/^	float min_voltage;$/;"	m	class:mavplugin::BatteryStatusDiag	file:
mission_ack	mavros/src/plugins/waypoint.cpp	/^	void mission_ack(enum MAV_MISSION_RESULT type) {$/;"	f	class:mavplugin::WaypointPlugin	file:
mission_clear_all	mavros/src/plugins/waypoint.cpp	/^	void mission_clear_all() {$/;"	f	class:mavplugin::WaypointPlugin	file:
mission_count	mavros/src/plugins/waypoint.cpp	/^	void mission_count(uint16_t cnt) {$/;"	f	class:mavplugin::WaypointPlugin	file:
mission_item	mavros/src/plugins/waypoint.cpp	/^	void mission_item(WaypointItem &wp) {$/;"	f	class:mavplugin::WaypointPlugin	file:
mission_request	mavros/src/plugins/waypoint.cpp	/^	void mission_request(uint16_t seq) {$/;"	f	class:mavplugin::WaypointPlugin	file:
mission_request_list	mavros/src/plugins/waypoint.cpp	/^	void mission_request_list() {$/;"	f	class:mavplugin::WaypointPlugin	file:
mission_set_current	mavros/src/plugins/waypoint.cpp	/^	void mission_set_current(uint16_t seq) {$/;"	f	class:mavplugin::WaypointPlugin	file:
mkdir	mavros/src/mavros/ftp.py	/^def mkdir(path):$/;"	f
mkdir	mavros_extras/scripts/mavftpfuse	/^    def mkdir(self, path, mode):$/;"	m	class:MavFtp
mkdir_cb	mavros/src/plugins/ftp.cpp	/^	bool mkdir_cb(mavros_msgs::FileMakeDir::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
mkdir_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer mkdir_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
mocap_pose_cb	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	void mocap_pose_cb(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	class:mavplugin::MocapPoseEstimatePlugin	file:
mocap_pose_send	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	void mocap_pose_send$/;"	f	class:mavplugin::MocapPoseEstimatePlugin	file:
mocap_pose_sub	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	ros::Subscriber mocap_pose_sub;$/;"	m	class:mavplugin::MocapPoseEstimatePlugin	file:
mocap_tf_cb	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	void mocap_tf_cb(const geometry_msgs::TransformStamped::ConstPtr &trans)$/;"	f	class:mavplugin::MocapPoseEstimatePlugin	file:
mocap_tf_sub	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	ros::Subscriber mocap_tf_sub;$/;"	m	class:mavplugin::MocapPoseEstimatePlugin	file:
mode	mavros/src/plugins/sys_status.cpp	/^	std::string mode;$/;"	m	class:mavplugin::HeartbeatStatus	file:
mode	test_mavros/include/test_mavros/tests/offboard_control.h	/^	control_mode mode;$/;"	m	class:testsetup::OffboardControl
mode_srv	mavros/src/plugins/sys_status.cpp	/^	ros::ServiceServer mode_srv;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
mp_nh	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	ros::NodeHandle mp_nh;$/;"	m	class:mavplugin::MocapPoseEstimatePlugin	file:
mp_nh	mavros_extras/src/plugins/uav_lde.cpp	/^	ros::NodeHandle mp_nh;$/;"	m	class:mavplugin::UavLdePlugin	file:
mp_nh	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	ros::NodeHandle mp_nh;$/;"	m	class:mavplugin::UavPosFeedbackPlugin	file:
mp_nh	mavros_extras/src/plugins/uav_pos_set.cpp	/^	ros::NodeHandle mp_nh;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
msg_to_string	libmavconn/include/mavconn/interface.h	/^	static std::string msg_to_string(boost::system::system_error &err) {$/;"	f	class:mavconn::DeviceError
msg_to_string	libmavconn/include/mavconn/interface.h	/^	static std::string msg_to_string(const char *description) {$/;"	f	class:mavconn::DeviceError
msg_to_string	libmavconn/include/mavconn/interface.h	/^	static std::string msg_to_string(int errnum) {$/;"	f	class:mavconn::DeviceError
mutex	libmavconn/include/mavconn/serial.h	/^	std::recursive_mutex mutex;$/;"	m	class:mavconn::MAVConnSerial
mutex	libmavconn/include/mavconn/tcp.h	/^	std::recursive_mutex mutex;$/;"	m	class:mavconn::MAVConnTCPClient
mutex	libmavconn/include/mavconn/tcp.h	/^	std::recursive_mutex mutex;$/;"	m	class:mavconn::MAVConnTCPServer
mutex	libmavconn/include/mavconn/udp.h	/^	std::recursive_mutex mutex;$/;"	m	class:mavconn::MAVConnUDP
mutex	libmavconn/test/test_mavconn.cpp	/^	std::mutex mutex;$/;"	m	class:UDP	file:
mutex	mavros/include/mavros/mavros_uas.h	/^	std::recursive_mutex mutex;$/;"	m	class:mavros::UAS
mutex	mavros/src/plugins/command.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::CommandPlugin	file:
mutex	mavros/src/plugins/param.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::ParamPlugin	file:
mutex	mavros/src/plugins/rc_io.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::RCIOPlugin	file:
mutex	mavros/src/plugins/sys_status.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::BatteryStatusDiag	file:
mutex	mavros/src/plugins/sys_status.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::HeartbeatStatus	file:
mutex	mavros/src/plugins/sys_status.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::HwStatus	file:
mutex	mavros/src/plugins/sys_status.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::SystemStatusDiag	file:
mutex	mavros/src/plugins/sys_time.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::TimeSyncStatus	file:
mutex	mavros/src/plugins/waypoint.cpp	/^	std::recursive_mutex mutex;$/;"	m	class:mavplugin::WaypointPlugin	file:
navigate	test_mavros/scripts/setpoint_position_demo	/^    def navigate(self):$/;"	m	class:SetpointPosition
nbytes	libmavconn/include/mavconn/msgbuffer.h	/^	ssize_t nbytes() {$/;"	f	struct:mavconn::MsgBuffer
new_channel	libmavconn/src/interface.cpp	/^int MAVConnInterface::new_channel() {$/;"	f	class:mavconn::MAVConnInterface
new_msgbuffer	libmavconn/src/interface.cpp	/^MsgBuffer *MAVConnInterface::new_msgbuffer(const mavlink_message_t *message,$/;"	f	class:mavconn::MAVConnInterface
nh	mavros/src/plugins/3dr_radio.cpp	/^	ros::NodeHandle nh;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
nh	mavros/src/plugins/actuator_control.cpp	/^	ros::NodeHandle nh;$/;"	m	class:mavplugin::ActuatorControlPlugin	file:
nh	mavros/src/plugins/altitude.cpp	/^    ros::NodeHandle nh;$/;"	m	class:mavplugin::AltitudePlugin	file:
nh	mavros/src/plugins/dummy.cpp	/^	ros::NodeHandle nh;$/;"	m	class:mavplugin::DummyPlugin	file:
nh	mavros/src/plugins/sys_status.cpp	/^	ros::NodeHandle nh;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
nh	mavros/src/plugins/sys_time.cpp	/^	ros::NodeHandle nh;$/;"	m	class:mavplugin::SystemTimePlugin	file:
nh	mavros/src/plugins/vfr_hud.cpp	/^	ros::NodeHandle nh;$/;"	m	class:mavplugin::VfrHudPlugin	file:
nh	mavros_extras/src/servo_state_publisher.cpp	/^	ros::NodeHandle nh;$/;"	m	class:ServoStatePublisher	file:
nh	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	ros::NodeHandle nh;$/;"	m	class:testsetup::TestSetup
nh_sp	test_mavros/include/test_mavros/tests/offboard_control.h	/^	ros::NodeHandle nh_sp;$/;"	m	class:testsetup::OffboardControl
no_prettytable	mavros/scripts/mavwp	/^    no_prettytable = True$/;"	v
no_prettytable	mavros/scripts/mavwp	/^no_prettytable = False$/;"	v
no_progressbar	mavros/scripts/mavftp	/^    no_progressbar = True$/;"	v
no_progressbar	mavros/scripts/mavftp	/^no_progressbar = False$/;"	v
normalize	mavros_extras/src/servo_state_publisher.cpp	/^	inline float normalize(uint16_t pwm) {$/;"	f	class:ServoDescription
num_of_tests	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	int num_of_tests;$/;"	m	class:testsetup::TestSetup
num_of_tests	test_mavros/include/test_mavros/tests/offboard_control.h	/^	int num_of_tests; \/\/TODO: find a way to use this...$/;"	m	class:testsetup::OffboardControl
nuttx_crc32	mavros/src/mavros/nuttx_crc32.py	/^def nuttx_crc32(bytes, crc32val=0):$/;"	f
offset	mavros/src/plugins/ftp.cpp	/^		uint32_t	offset;		\/\/\/< Offsets for List and Read commands$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
offset	mavros/src/plugins/sys_time.cpp	/^	int64_t offset;$/;"	m	class:mavplugin::TimeSyncStatus	file:
offset_avg_alpha	mavros/src/plugins/sys_time.cpp	/^	double offset_avg_alpha;$/;"	m	class:mavplugin::SystemTimePlugin	file:
op_state	mavros/src/plugins/ftp.cpp	/^	OpState op_state;$/;"	m	class:mavplugin::FTPPlugin	file:
opcode	mavros/src/plugins/ftp.cpp	/^		uint8_t		opcode;		\/\/\/< Command opcode$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
open	mavros/src/mavros/ftp.py	/^    def open(self, path, mode):$/;"	m	class:FTPFile
open	mavros/src/mavros/ftp.py	/^def open(path, mode):$/;"	f
open_cb	mavros/src/plugins/ftp.cpp	/^	bool open_cb(mavros_msgs::FileOpen::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
open_file	mavros/src/plugins/ftp.cpp	/^	bool open_file(std::string &path, int mode) {$/;"	f	class:mavplugin::FTPPlugin	file:
open_path	mavros/src/plugins/ftp.cpp	/^	std::string open_path;$/;"	m	class:mavplugin::FTPPlugin	file:
open_size	mavros/src/plugins/ftp.cpp	/^	size_t open_size;$/;"	m	class:mavplugin::FTPPlugin	file:
open_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer open_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
open_url	libmavconn/src/interface.cpp	/^MAVConnInterface::Ptr MAVConnInterface::open_url(std::string url,$/;"	f	class:mavconn::MAVConnInterface
orientation	mavros_extras/src/plugins/distance_sensor.cpp	/^	int orientation;	\/\/!< check orientation of sensor if != -1$/;"	m	class:mavplugin::DistanceSensorItem	file:
orientation_cov	mavros/src/plugins/imu_pub.cpp	/^	UAS::Covariance3d orientation_cov;$/;"	m	class:mavplugin::IMUPubPlugin	file:
orientation_from_str	mavros/src/lib/uas_sensor_orientation.cpp	/^int UAS::orientation_from_str(const std::string &sensor_orientation)$/;"	f	class:UAS
override_cb	mavros/src/plugins/rc_io.cpp	/^	void override_cb(const mavros_msgs::OverrideRCIn::ConstPtr req) {$/;"	f	class:mavplugin::RCIOPlugin	file:
override_sub	mavros/src/plugins/rc_io.cpp	/^	ros::Subscriber override_sub;$/;"	m	class:mavplugin::RCIOPlugin	file:
owner	mavros_extras/src/plugins/distance_sensor.cpp	/^	DistanceSensorPlugin *owner;$/;"	m	class:mavplugin::DistanceSensorItem	file:
package_dir	mavros/setup.py	/^    package_dir={'': 'src'})$/;"	v
packages	mavros/setup.py	/^    packages=['mavros'],$/;"	v
padding	mavros/src/plugins/ftp.cpp	/^		uint8_t		padding[2];	\/\/\/< 32 bit aligment padding$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
param	mavros/src/plugins/param.cpp	/^	Parameter param;$/;"	m	class:mavplugin::ParamSetOpt	file:
param1	mavros/src/plugins/waypoint.cpp	/^	float param1;$/;"	m	class:mavplugin::WaypointItem	file:
param2	mavros/src/plugins/waypoint.cpp	/^	float param2;$/;"	m	class:mavplugin::WaypointItem	file:
param3	mavros/src/plugins/waypoint.cpp	/^	float param3;$/;"	m	class:mavplugin::WaypointItem	file:
param4	mavros/src/plugins/waypoint.cpp	/^	float param4;$/;"	m	class:mavplugin::WaypointItem	file:
param_count	mavros/src/plugins/param.cpp	/^	ssize_t param_count;$/;"	m	class:mavplugin::ParamPlugin	file:
param_count	mavros/src/plugins/param.cpp	/^	uint16_t param_count;$/;"	m	class:mavplugin::Parameter	file:
param_get	mavros/src/mavros/param.py	/^def param_get(param_id):$/;"	f
param_get_all	mavros/src/mavros/param.py	/^def param_get_all(force_pull=False):$/;"	f
param_id	mavros/src/plugins/param.cpp	/^	std::string param_id;$/;"	m	class:mavplugin::Parameter	file:
param_index	mavros/src/plugins/param.cpp	/^	uint16_t param_index;$/;"	m	class:mavplugin::Parameter	file:
param_nh	mavros/src/plugins/param.cpp	/^	ros::NodeHandle param_nh;$/;"	m	class:mavplugin::ParamPlugin	file:
param_request_list	mavros/src/plugins/param.cpp	/^	void param_request_list() {$/;"	f	class:mavplugin::ParamPlugin	file:
param_request_read	mavros/src/plugins/param.cpp	/^	void param_request_read(std::string id, int16_t index = -1) {$/;"	f	class:mavplugin::ParamPlugin	file:
param_ret_value	mavros/src/mavros/param.py	/^def param_ret_value(ret):$/;"	f
param_rx_retries	mavros/src/plugins/param.cpp	/^	size_t param_rx_retries;$/;"	m	class:mavplugin::ParamPlugin	file:
param_set	mavros/src/mavros/param.py	/^def param_set(param_id, value):$/;"	f
param_set	mavros/src/plugins/param.cpp	/^	void param_set(Parameter &param) {$/;"	f	class:mavplugin::ParamPlugin	file:
param_set_list	mavros/src/mavros/param.py	/^def param_set_list(param_list):$/;"	f
param_state	mavros/src/plugins/param.cpp	/^	} param_state;$/;"	m	class:mavplugin::ParamPlugin	typeref:enum:mavplugin::ParamPlugin::__anon2	file:
param_t	mavros/src/plugins/param.cpp	/^	typedef boost::any param_t;$/;"	t	class:mavplugin::Parameter	file:
param_value	mavros/src/plugins/param.cpp	/^	param_t param_value;$/;"	m	class:mavplugin::Parameter	file:
parameters	mavros/src/plugins/param.cpp	/^	std::map<std::string, Parameter> parameters;$/;"	m	class:mavplugin::ParamPlugin	file:
parameters_missing_idx	mavros/src/plugins/param.cpp	/^	std::list<uint16_t> parameters_missing_idx;$/;"	m	class:mavplugin::ParamPlugin	file:
path_shape	test_mavros/include/test_mavros/tests/offboard_control.h	/^} path_shape;$/;"	t	namespace:testsetup	typeref:enum:testsetup::__anon5
pattern_match	mavros/src/lib/mavros.cpp	/^static bool pattern_match(std::string &pattern, std::string &pl_name) {$/;"	f	file:
pid	test_mavros/include/test_mavros/tests/offboard_control.h	/^	pidcontroller::PIDController pid;$/;"	m	class:testsetup::OffboardControl
pid_linvel_x	test_mavros/include/test_mavros/utils/pid_controller.h	/^	control_toolbox::Pid pid_linvel_x;$/;"	m	class:pidcontroller::PIDController
pid_linvel_y	test_mavros/include/test_mavros/utils/pid_controller.h	/^	control_toolbox::Pid pid_linvel_y;$/;"	m	class:pidcontroller::PIDController
pid_linvel_z	test_mavros/include/test_mavros/utils/pid_controller.h	/^	control_toolbox::Pid pid_linvel_z;$/;"	m	class:pidcontroller::PIDController
pid_yaw_rate	test_mavros/include/test_mavros/utils/pid_controller.h	/^	control_toolbox::Pid pid_yaw_rate;$/;"	m	class:pidcontroller::PIDController
pidcontroller	test_mavros/include/test_mavros/utils/pid_controller.h	/^namespace pidcontroller {$/;"	n
plugin_loader	mavros/include/mavros/mavros.h	/^	pluginlib::ClassLoader<mavplugin::MavRosPlugin> plugin_loader;$/;"	m	class:mavros::MavRos
plugin_route_cb	mavros/src/lib/mavros.cpp	/^void MavRos::plugin_route_cb(const mavlink_message_t *mmsg, uint8_t sysid, uint8_t compid) {$/;"	f	class:MavRos
poll_timeout	mavros/src/mavros/event_launcher.py	/^            def poll_timeout(timeout):$/;"	f	function:ShellHandler.action_stop
port_closed	libmavconn/include/mavconn/interface.h	/^	sig2::signal<void()> port_closed;$/;"	m	class:mavconn::MAVConnInterface
pos	libmavconn/include/mavconn/msgbuffer.h	/^	ssize_t pos;$/;"	m	struct:mavconn::MsgBuffer
pos_setpoint	test_mavros/include/test_mavros/tests/offboard_control.h	/^	Eigen::Vector3d pos_setpoint(int tr_x, int tr_y, int tr_z){$/;"	f	class:testsetup::OffboardControl
pose_cb	mavros/src/plugins/setpoint_attitude.cpp	/^	void pose_cb(const geometry_msgs::PoseStamped::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
pose_feedback_cb	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	void pose_feedback_cb(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	class:mavplugin::UavPosFeedbackPlugin	file:
pose_feedback_sub	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	ros::Subscriber pose_feedback_sub;$/;"	m	class:mavplugin::UavPosFeedbackPlugin	file:
pose_set_cb	mavros_extras/src/plugins/uav_pos_set.cpp	/^	void pose_set_cb(const demo_test::demo_code::ConstPtr &code)$/;"	f	class:mavplugin::UavPosSetPlugin	file:
pose_set_sub	mavros_extras/src/plugins/uav_pos_set.cpp	/^	ros::Subscriber pose_set_sub;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
pose_set_sub2	mavros_extras/src/plugins/uav_pos_set.cpp	/^	ros::Subscriber pose_set_sub2;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
pose_sub	mavros/src/plugins/setpoint_attitude.cpp	/^	ros::Subscriber pose_sub;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
position	mavros_extras/src/plugins/distance_sensor.cpp	/^	Eigen::Vector3d position;	\/\/!< sensor position$/;"	m	class:mavplugin::DistanceSensorItem	file:
position_setpoint_control	mavros_extras/scripts/mavteleop	/^def position_setpoint_control(args):$/;"	f
press_pub	mavros/src/plugins/imu_pub.cpp	/^	ros::Publisher press_pub;$/;"	m	class:mavplugin::IMUPubPlugin	file:
print_if	mavros/src/mavros/utils.py	/^def print_if(cond, *args, **kvargs):$/;"	f
process_autopilot_version_apm_quirk	mavros/src/plugins/sys_status.cpp	/^	void process_autopilot_version_apm_quirk(mavlink_autopilot_version_t &apv, uint8_t sysid, uint8_t compid)$/;"	f	class:mavplugin::SystemStatusPlugin	file:
process_autopilot_version_normal	mavros/src/plugins/sys_status.cpp	/^	void process_autopilot_version_normal(mavlink_autopilot_version_t &apv, uint8_t sysid, uint8_t compid)$/;"	f	class:mavplugin::SystemStatusPlugin	file:
process_statustext_normal	mavros/src/plugins/sys_status.cpp	/^	void process_statustext_normal(uint8_t severity, std::string &text) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
ps	test_mavros/include/test_mavros/tests/offboard_control.h	/^	geometry_msgs::PoseStamped localpos, ps;$/;"	m	class:testsetup::OffboardControl
pub	mavros_extras/src/plugins/distance_sensor.cpp	/^	ros::Publisher pub;$/;"	m	class:mavplugin::DistanceSensorItem	file:
publish_compressed_image	mavros_extras/src/plugins/image_pub.cpp	/^	void publish_compressed_image() {$/;"	f	class:mavplugin::ImagePubPlugin	file:
publish_disconnection	mavros/src/plugins/sys_status.cpp	/^	void publish_disconnection() {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
publish_image	mavros_extras/src/plugins/image_pub.cpp	/^	void publish_image() {$/;"	f	class:mavplugin::ImagePubPlugin	file:
publish_imu_data	mavros/src/plugins/imu_pub.cpp	/^	void publish_imu_data($/;"	f	class:mavplugin::IMUPubPlugin	file:
publish_imu_data_raw	mavros/src/plugins/imu_pub.cpp	/^	void publish_imu_data_raw($/;"	f	class:mavplugin::IMUPubPlugin	file:
publish_mag	mavros/src/plugins/imu_pub.cpp	/^	void publish_mag(std_msgs::Header &header,$/;"	f	class:mavplugin::IMUPubPlugin	file:
publish_once	mavros/scripts/mavsetp	/^def publish_once(args, pub, msg):$/;"	f
publish_raw8u_image	mavros_extras/src/plugins/image_pub.cpp	/^	void publish_raw8u_image() {$/;"	f	class:mavplugin::ImagePubPlugin	file:
publish_track_marker	mavros_extras/src/copter_visualization.cpp	/^static void publish_track_marker(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
publish_track_marker	mavros_extras/src/copter_visualization1.cpp	/^static void publish_track_marker(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
publish_track_marker	mavros_extras/src/copter_visualization2.cpp	/^static void publish_track_marker(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
publish_track_marker	mavros_extras/src/copter_visualization3.cpp	/^static void publish_track_marker(const geometry_msgs::PoseStamped::ConstPtr &pose)$/;"	f	file:
publish_waypoints	mavros/src/plugins/waypoint.cpp	/^	void publish_waypoints() {$/;"	f	class:mavplugin::WaypointPlugin	file:
publish_wp_marker	mavros_extras/src/copter_visualization.cpp	/^static void publish_wp_marker(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f	file:
publish_wp_marker	mavros_extras/src/copter_visualization1.cpp	/^static void publish_wp_marker(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f	file:
publish_wp_marker	mavros_extras/src/copter_visualization2.cpp	/^static void publish_wp_marker(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f	file:
publish_wp_marker	mavros_extras/src/copter_visualization3.cpp	/^static void publish_wp_marker(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f	file:
pull	mavros/src/mavros/mission.py	/^pull = None$/;"	v
pull_cb	mavros/src/plugins/param.cpp	/^	bool pull_cb(mavros_msgs::ParamPull::Request &req,$/;"	f	class:mavplugin::ParamPlugin	file:
pull_cb	mavros/src/plugins/waypoint.cpp	/^	bool pull_cb(mavros_msgs::WaypointPull::Request &req,$/;"	f	class:mavplugin::WaypointPlugin	file:
pull_srv	mavros/src/plugins/param.cpp	/^	ros::ServiceServer pull_srv;$/;"	m	class:mavplugin::ParamPlugin	file:
pull_srv	mavros/src/plugins/waypoint.cpp	/^	ros::ServiceServer pull_srv;$/;"	m	class:mavplugin::WaypointPlugin	file:
push	mavros/src/mavros/mission.py	/^push = None$/;"	v
push_cb	mavros/src/plugins/param.cpp	/^	bool push_cb(mavros_msgs::ParamPush::Request &req,$/;"	f	class:mavplugin::ParamPlugin	file:
push_cb	mavros/src/plugins/waypoint.cpp	/^	bool push_cb(mavros_msgs::WaypointPush::Request &req,$/;"	f	class:mavplugin::WaypointPlugin	file:
push_srv	mavros/src/plugins/param.cpp	/^	ros::ServiceServer push_srv;$/;"	m	class:mavplugin::ParamPlugin	file:
push_srv	mavros/src/plugins/waypoint.cpp	/^	ros::ServiceServer push_srv;$/;"	m	class:mavplugin::WaypointPlugin	file:
px4	mavros/include/mavros/px4_custom_mode.h	/^namespace px4 {$/;"	n
px4_cmode_map	mavros/src/lib/uas_stringify.cpp	/^static const cmode_map px4_cmode_map = {$/;"	v	file:
quaternion_from_rpy	mavros/include/mavros/mavros_uas.h	/^	static inline Eigen::Quaterniond quaternion_from_rpy(const double roll, const double pitch, const double yaw) {$/;"	f	class:mavros::UAS
quaternion_from_rpy	mavros/src/lib/uas_quaternion_utils.cpp	/^Eigen::Quaterniond UAS::quaternion_from_rpy(const Eigen::Vector3d &rpy)$/;"	f	class:UAS
quaternion_get_yaw	mavros/src/lib/uas_quaternion_utils.cpp	/^double UAS::quaternion_get_yaw(const Eigen::Quaterniond &q)$/;"	f	class:UAS
quaternion_to_mavlink	mavros/include/mavros/mavros_uas.h	/^	static inline void quaternion_to_mavlink(const Eigen::Quaterniond &q, float qmsg[4]) {$/;"	f	class:mavros::UAS
quaternion_to_rpy	mavros/include/mavros/mavros_uas.h	/^	static inline void quaternion_to_rpy(const Eigen::Quaterniond &q, double &roll, double &pitch, double &yaw) {$/;"	f	class:mavros::UAS
quaternion_to_rpy	mavros/src/lib/uas_quaternion_utils.cpp	/^Eigen::Vector3d UAS::quaternion_to_rpy(const Eigen::Quaterniond &q)$/;"	f	class:UAS
quoting	mavros/src/mavros/mission.py	/^        quoting = csv.QUOTE_NONE$/;"	v	class:QGroundControlWP.CSVDialect
quoting	mavros/src/mavros/param.py	/^        quoting = csv.QUOTE_NONE$/;"	v	class:MissionPlannerParam.CSVDialect
quoting	mavros/src/mavros/param.py	/^        quoting = csv.QUOTE_NONE$/;"	v	class:QGroundControlParam.CSVDialect
r_errno	mavros/src/plugins/ftp.cpp	/^	int r_errno;			\/\/!< store errno from server$/;"	m	class:mavplugin::FTPPlugin	file:
range_cb	mavros_extras/src/plugins/distance_sensor.cpp	/^void DistanceSensorItem::range_cb(const sensor_msgs::Range::ConstPtr &msg)$/;"	f	class:mavplugin::DistanceSensorItem
range_pub	mavros_extras/src/plugins/px4flow.cpp	/^	ros::Publisher range_pub;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
ranger_fov	mavros_extras/src/plugins/px4flow.cpp	/^	double ranger_fov;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
ranger_max_range	mavros_extras/src/plugins/px4flow.cpp	/^	double ranger_max_range;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
ranger_min_range	mavros_extras/src/plugins/px4flow.cpp	/^	double ranger_min_range;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
rate	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	double rate;$/;"	m	class:testsetup::TestSetup
rate	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double rate;$/;"	m	class:testsetup::OffboardControl
rate_srv	mavros/src/plugins/sys_status.cpp	/^	ros::ServiceServer rate_srv;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
raw_fix_pub	mavros/src/plugins/global_position.cpp	/^	ros::Publisher raw_fix_pub;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
raw_payload	mavros/src/plugins/ftp.cpp	/^	uint8_t *raw_payload() {$/;"	f	class:mavplugin::FTPRequest
raw_rc_in	mavros/src/plugins/rc_io.cpp	/^	std::vector<uint16_t> raw_rc_in;$/;"	m	class:mavplugin::RCIOPlugin	file:
raw_rc_out	mavros/src/plugins/rc_io.cpp	/^	std::vector<uint16_t> raw_rc_out;$/;"	m	class:mavplugin::RCIOPlugin	file:
raw_vel_pub	mavros/src/plugins/global_position.cpp	/^	ros::Publisher raw_vel_pub;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
rc_channel	mavros_extras/src/servo_state_publisher.cpp	/^	size_t rc_channel;$/;"	m	class:ServoDescription	file:
rc_channels	mavros_extras/scripts/mavteleop	/^rc_channels = {$/;"	v
rc_channels_override	mavros/src/plugins/rc_io.cpp	/^	void rc_channels_override(const boost::array<uint16_t, 8> &channels) {$/;"	f	class:mavplugin::RCIOPlugin	file:
rc_dz	mavros_extras/src/servo_state_publisher.cpp	/^	uint16_t rc_dz;$/;"	m	class:ServoDescription	file:
rc_in_pub	mavros/src/plugins/rc_io.cpp	/^	ros::Publisher rc_in_pub;$/;"	m	class:mavplugin::RCIOPlugin	file:
rc_max	mavros_extras/src/servo_state_publisher.cpp	/^	uint16_t rc_max;$/;"	m	class:ServoDescription	file:
rc_min	mavros_extras/src/servo_state_publisher.cpp	/^	uint16_t rc_min;$/;"	m	class:ServoDescription	file:
rc_nh	mavros/src/plugins/rc_io.cpp	/^	ros::NodeHandle rc_nh;$/;"	m	class:mavplugin::RCIOPlugin	file:
rc_out_cb	mavros_extras/src/servo_state_publisher.cpp	/^	void rc_out_cb(const mavros_msgs::RCOut::ConstPtr &msg) {$/;"	f	class:ServoStatePublisher	file:
rc_out_pub	mavros/src/plugins/rc_io.cpp	/^	ros::Publisher rc_out_pub;$/;"	m	class:mavplugin::RCIOPlugin	file:
rc_out_sub	mavros_extras/src/servo_state_publisher.cpp	/^	ros::Subscriber rc_out_sub;$/;"	m	class:ServoStatePublisher	file:
rc_override_control	mavros_extras/scripts/mavteleop	/^def rc_override_control(args):$/;"	f
rc_rev	mavros_extras/src/servo_state_publisher.cpp	/^		rc_rev(false)$/;"	f	class:ServoDescription
rc_rev	mavros_extras/src/servo_state_publisher.cpp	/^	bool rc_rev;$/;"	m	class:ServoDescription	file:
rc_trim	mavros_extras/src/servo_state_publisher.cpp	/^	uint16_t rc_trim;$/;"	m	class:ServoDescription	file:
reached	test_mavros/scripts/setpoint_position_demo	/^    def reached(self, topic):$/;"	m	class:SetpointPosition
read	mavros/src/mavros/ftp.py	/^    def read(self, size=1):$/;"	m	class:FTPFile
read	mavros/src/mavros/mission.py	/^    def read(self, file_):$/;"	m	class:QGroundControlWP
read	mavros/src/mavros/mission.py	/^    def read(self, file_):$/;"	m	class:WaypointFile
read	mavros/src/mavros/param.py	/^    def read(self, file_):$/;"	m	class:MissionPlannerParam
read	mavros/src/mavros/param.py	/^    def read(self, file_):$/;"	m	class:ParamFile
read	mavros/src/mavros/param.py	/^    def read(self, file_):$/;"	m	class:QGroundControlParam
read	mavros_extras/scripts/mavftpfuse	/^    def read(self, path, size, offset, fh):$/;"	m	class:MavFtp
read_buffer	mavros/src/plugins/ftp.cpp	/^	V_FileData read_buffer;$/;"	m	class:mavplugin::FTPPlugin	file:
read_cb	mavros/src/plugins/ftp.cpp	/^	bool read_cb(mavros_msgs::FileRead::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
read_file	mavros/src/plugins/ftp.cpp	/^	bool read_file(std::string &path, size_t off, size_t len) {$/;"	f	class:mavplugin::FTPPlugin	file:
read_file_end	mavros/src/plugins/ftp.cpp	/^	void read_file_end() {$/;"	f	class:mavplugin::FTPPlugin	file:
read_offset	mavros/src/plugins/ftp.cpp	/^	uint32_t read_offset;$/;"	m	class:mavplugin::FTPPlugin	file:
read_size	mavros/src/plugins/ftp.cpp	/^	size_t read_size;$/;"	m	class:mavplugin::FTPPlugin	file:
read_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer read_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
readdir	mavros_extras/scripts/mavftpfuse	/^    def readdir(self, path, fh):$/;"	m	class:MavFtp
recv_cond_mutex	mavros/src/plugins/waypoint.cpp	/^	std::mutex recv_cond_mutex;$/;"	m	class:mavplugin::WaypointPlugin	file:
recv_message	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::recv_message(const mavlink_message_t *message, uint8_t sysid, uint8_t compid)$/;"	f	class:mavconn::MAVConnTCPServer
recv_message	libmavconn/test/test_hang.cpp	/^void recv_message(const mavlink_message_t *msg, uint8_t sysid, uint8_t compid) {$/;"	f
recv_message	libmavconn/test/test_mavconn.cpp	/^	void recv_message(const mavlink_message_t *message, uint8_t sysid, uint8_t compid) {$/;"	f	class:UDP
register_on_namespace_update	mavros/src/mavros/__init__.py	/^def register_on_namespace_update(cb):$/;"	f
remaining	mavros/src/plugins/sys_status.cpp	/^	float remaining;$/;"	m	class:mavplugin::BatteryStatusDiag	file:
remote_ep	libmavconn/include/mavconn/udp.h	/^	boost::asio::ip::udp::endpoint remote_ep;$/;"	m	class:mavconn::MAVConnUDP
remote_exists	libmavconn/include/mavconn/udp.h	/^	std::atomic<bool> remote_exists;$/;"	m	class:mavconn::MAVConnUDP
remove_cb	mavros/src/plugins/ftp.cpp	/^	bool remove_cb(mavros_msgs::FileRemove::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
remove_directory	mavros/src/plugins/ftp.cpp	/^	void remove_directory(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
remove_file	mavros/src/plugins/ftp.cpp	/^	void remove_file(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
remove_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer remove_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
rename	mavros/src/mavros/ftp.py	/^def rename(old_path, new_path):$/;"	f
rename	mavros_extras/scripts/mavftpfuse	/^    def rename(self, old, new):$/;"	m	class:MavFtp
rename_	mavros/src/plugins/ftp.cpp	/^	bool rename_(std::string &old_path, std::string &new_path) {$/;"	f	class:mavplugin::FTPPlugin	file:
rename_cb	mavros/src/plugins/ftp.cpp	/^	bool rename_cb(mavros_msgs::FileRename::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
rename_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer rename_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
req_opcode	mavros/src/plugins/ftp.cpp	/^		uint8_t		req_opcode;	\/\/\/< Request opcode returned in kRspAck, kRspNak message$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
request_mission_done	mavros/src/plugins/waypoint.cpp	/^	void request_mission_done(void) {$/;"	f	class:mavplugin::WaypointPlugin	file:
reserved	mavros/include/mavros/px4_custom_mode.h	/^		uint16_t reserved;$/;"	m	struct:px4::custom_mode::__anon1
reset_cb	mavros/src/plugins/ftp.cpp	/^	bool reset_cb(std_srvs::Empty::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
reset_server	mavros/src/mavros/ftp.py	/^def reset_server():$/;"	f
reset_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer reset_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
reshedule_pull	mavros/src/plugins/waypoint.cpp	/^	bool reshedule_pull;$/;"	m	class:mavplugin::WaypointPlugin	file:
resolve_address_tcp	libmavconn/src/tcp.cpp	/^static bool resolve_address_tcp(io_service &io, int chan, std::string host, unsigned short port, tcp::endpoint &ep)$/;"	f	namespace:mavconn
resolve_address_udp	libmavconn/src/udp.cpp	/^static bool resolve_address_udp(io_service &io, int chan, std::string host, unsigned short port, udp::endpoint &ep)$/;"	f	namespace:mavconn
restart_timeout_timer	mavros/src/plugins/param.cpp	/^	void restart_timeout_timer() {$/;"	f	class:mavplugin::ParamPlugin	file:
restart_timeout_timer	mavros/src/plugins/waypoint.cpp	/^	void restart_timeout_timer(void) {$/;"	f	class:mavplugin::WaypointPlugin	file:
restart_timeout_timer_int	mavros/src/plugins/waypoint.cpp	/^	void restart_timeout_timer_int(void) {$/;"	f	class:mavplugin::WaypointPlugin	file:
result	mavros/src/plugins/command.cpp	/^	uint8_t result;$/;"	m	class:mavplugin::CommandTransaction	file:
retries_remaining	mavros/src/plugins/param.cpp	/^	size_t retries_remaining;$/;"	m	class:mavplugin::ParamSetOpt	file:
reverse_throttle	mavros/src/plugins/setpoint_attitude.cpp	/^	bool reverse_throttle;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
rmdir	mavros/src/mavros/ftp.py	/^def rmdir(path):$/;"	f
rmdir	mavros_extras/scripts/mavftpfuse	/^    def rmdir(self, path):$/;"	m	class:MavFtp
rmdir_cb	mavros/src/plugins/ftp.cpp	/^	bool rmdir_cb(mavros_msgs::FileRemoveDir::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
rmdir_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer rmdir_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
ros_time_from_ns	mavros/src/lib/uas_timesync.cpp	/^static inline ros::Time ros_time_from_ns(uint64_t &stamp_ns) {$/;"	f	file:
rot_cov	mavros/src/plugins/global_position.cpp	/^	double rot_cov;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
run	mavros/src/lib/mavlink_diag.cpp	/^void MavlinkDiag::run(diagnostic_updater::DiagnosticStatusWrapper &stat)$/;"	f	class:MavlinkDiag
run	mavros/src/plugins/sys_status.cpp	/^	void run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::BatteryStatusDiag
run	mavros/src/plugins/sys_status.cpp	/^	void run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::HeartbeatStatus
run	mavros/src/plugins/sys_status.cpp	/^	void run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::HwStatus
run	mavros/src/plugins/sys_status.cpp	/^	void run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::MemInfo
run	mavros/src/plugins/sys_status.cpp	/^	void run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::SystemStatusDiag
run	mavros/src/plugins/sys_time.cpp	/^	void run(diagnostic_updater::DiagnosticStatusWrapper &stat) {$/;"	f	class:mavplugin::TimeSyncStatus
rx_buf	libmavconn/include/mavconn/serial.h	/^	uint8_t rx_buf[MsgBuffer::MAX_SIZE];$/;"	m	class:mavconn::MAVConnSerial
rx_buf	libmavconn/include/mavconn/tcp.h	/^	uint8_t rx_buf[MsgBuffer::MAX_SIZE];$/;"	m	class:mavconn::MAVConnTCPClient
rx_buf	libmavconn/include/mavconn/udp.h	/^	uint8_t rx_buf[MsgBuffer::MAX_SIZE];$/;"	m	class:mavconn::MAVConnUDP
rx_speed	libmavconn/include/mavconn/interface.h	/^		float rx_speed;		\/\/!< current receive speed [B\/s]$/;"	m	struct:mavconn::MAVConnInterface::IOStat
rx_total_bytes	libmavconn/include/mavconn/interface.h	/^		size_t rx_total_bytes;	\/\/!< total bytes received$/;"	m	struct:mavconn::MAVConnInterface::IOStat
rx_total_bytes	libmavconn/include/mavconn/interface.h	/^	std::atomic<size_t> tx_total_bytes, rx_total_bytes;$/;"	m	class:mavconn::MAVConnInterface
safety_nh	mavros/src/plugins/safety_area.cpp	/^	ros::NodeHandle safety_nh;$/;"	m	class:mavplugin::SafetyAreaPlugin	file:
safety_set_allowed_area	mavros/src/plugins/safety_area.cpp	/^	void safety_set_allowed_area($/;"	f	class:mavplugin::SafetyAreaPlugin	file:
safetyarea_cb	mavros/src/plugins/safety_area.cpp	/^	void safetyarea_cb(const geometry_msgs::PolygonStamped::ConstPtr &req) {$/;"	f	class:mavplugin::SafetyAreaPlugin	file:
safetyarea_sub	mavros/src/plugins/safety_area.cpp	/^	ros::Subscriber safetyarea_sub;$/;"	m	class:mavplugin::SafetyAreaPlugin	file:
seek	mavros/src/mavros/ftp.py	/^    def seek(self, offset, whence=os.SEEK_SET):$/;"	m	class:FTPFile
send	mavros/src/plugins/ftp.cpp	/^	void send(UAS *uas, uint16_t seqNumber) {$/;"	f	class:mavplugin::FTPRequest
send_any_path_command	mavros/src/plugins/ftp.cpp	/^	inline void send_any_path_command(FTPRequest::Opcode op, const std::string &debug_msg, std::string &path, uint32_t offset) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_attitude_ang_velocity	mavros/src/plugins/setpoint_attitude.cpp	/^	void send_attitude_ang_velocity(const ros::Time &stamp, const Eigen::Vector3d &ang_vel) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
send_attitude_target	mavros/src/plugins/setpoint_attitude.cpp	/^	void send_attitude_target(const ros::Time &stamp, const Eigen::Affine3d &tr) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
send_attitude_throttle	mavros/src/plugins/setpoint_attitude.cpp	/^	void send_attitude_throttle(const float throttle) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
send_bytes	libmavconn/src/serial.cpp	/^void MAVConnSerial::send_bytes(const uint8_t *bytes, size_t length)$/;"	f	class:mavconn::MAVConnSerial
send_bytes	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::send_bytes(const uint8_t *bytes, size_t length)$/;"	f	class:mavconn::MAVConnTCPClient
send_bytes	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::send_bytes(const uint8_t *bytes, size_t length)$/;"	f	class:mavconn::MAVConnTCPServer
send_bytes	libmavconn/src/udp.cpp	/^void MAVConnUDP::send_bytes(const uint8_t *bytes, size_t length)$/;"	f	class:mavconn::MAVConnUDP
send_calc_file_crc32_command	mavros/src/plugins/ftp.cpp	/^	void send_calc_file_crc32_command(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_command_int	mavros/src/plugins/command.cpp	/^	bool send_command_int(bool broadcast,$/;"	f	class:mavplugin::CommandPlugin	file:
send_command_long_and_wait	mavros/src/plugins/command.cpp	/^	bool send_command_long_and_wait(bool broadcast,$/;"	f	class:mavplugin::CommandPlugin	file:
send_cond_mutex	mavros/src/plugins/waypoint.cpp	/^	std::mutex send_cond_mutex;$/;"	m	class:mavplugin::WaypointPlugin	file:
send_create_command	mavros/src/plugins/ftp.cpp	/^	void send_create_command() {$/;"	f	class:mavplugin::FTPPlugin	file:
send_create_dir_command	mavros/src/plugins/ftp.cpp	/^	void send_create_dir_command(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_force	mavros/src/plugins/setpoint_accel.cpp	/^	bool send_force;$/;"	m	class:mavplugin::SetpointAccelerationPlugin	file:
send_heartbeat	libmavconn/test/test_hang.cpp	/^static void send_heartbeat(MAVConnInterface *ip) {$/;"	f	file:
send_heartbeat	libmavconn/test/test_mavconn.cpp	/^static void send_heartbeat(MAVConnInterface *ip) {$/;"	f	file:
send_jpeg_image	mavros_extras/src/gcs_image_bridge.cpp	/^void send_jpeg_image(std::vector<uint8_t> &jpeg_buffer, int jpeg_quality,$/;"	f
send_list_command	mavros/src/plugins/ftp.cpp	/^	void send_list_command() {$/;"	f	class:mavplugin::FTPPlugin	file:
send_message	libmavconn/include/mavconn/interface.h	/^	inline void send_message(const mavlink_message_t *message) {$/;"	f	class:mavconn::MAVConnInterface
send_message	libmavconn/src/serial.cpp	/^void MAVConnSerial::send_message(const mavlink_message_t *message, uint8_t sysid, uint8_t compid)$/;"	f	class:mavconn::MAVConnSerial
send_message	libmavconn/src/tcp.cpp	/^void MAVConnTCPClient::send_message(const mavlink_message_t *message, uint8_t sysid, uint8_t compid)$/;"	f	class:mavconn::MAVConnTCPClient
send_message	libmavconn/src/tcp.cpp	/^void MAVConnTCPServer::send_message(const mavlink_message_t *message, uint8_t sysid, uint8_t compid)$/;"	f	class:mavconn::MAVConnTCPServer
send_message	libmavconn/src/udp.cpp	/^void MAVConnUDP::send_message(const mavlink_message_t *message, uint8_t sysid, uint8_t compid)$/;"	f	class:mavconn::MAVConnUDP
send_open_ro_command	mavros/src/plugins/ftp.cpp	/^	void send_open_ro_command() {$/;"	f	class:mavplugin::FTPPlugin	file:
send_open_wo_command	mavros/src/plugins/ftp.cpp	/^	void send_open_wo_command() {$/;"	f	class:mavplugin::FTPPlugin	file:
send_param_set_and_wait	mavros/src/plugins/param.cpp	/^	bool send_param_set_and_wait(Parameter &param) {$/;"	f	class:mavplugin::ParamPlugin	file:
send_position_target	mavros/src/plugins/setpoint_position.cpp	/^	void send_position_target(const ros::Time &stamp, const Eigen::Affine3d &tr) {$/;"	f	class:mavplugin::SetpointPositionPlugin	file:
send_read_command	mavros/src/plugins/ftp.cpp	/^	void send_read_command() {$/;"	f	class:mavplugin::FTPPlugin	file:
send_remove_command	mavros/src/plugins/ftp.cpp	/^	void send_remove_command(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_remove_dir_command	mavros/src/plugins/ftp.cpp	/^	void send_remove_dir_command(std::string &path) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_rename_command	mavros/src/plugins/ftp.cpp	/^	bool send_rename_command(std::string &old_path, std::string &new_path) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_reset	mavros/src/plugins/ftp.cpp	/^	void send_reset() {$/;"	f	class:mavplugin::FTPPlugin	file:
send_safety_set_allowed_area	mavros/src/plugins/safety_area.cpp	/^	void send_safety_set_allowed_area(float p1x, float p1y, float p1z,$/;"	f	class:mavplugin::SafetyAreaPlugin	file:
send_setpoint_acceleration	mavros/src/plugins/setpoint_accel.cpp	/^	void send_setpoint_acceleration(const ros::Time &stamp, Eigen::Vector3d &accel_enu) {$/;"	f	class:mavplugin::SetpointAccelerationPlugin	file:
send_setpoint_velocity	mavros/src/plugins/setpoint_velocity.cpp	/^	void send_setpoint_velocity(const ros::Time &stamp, Eigen::Vector3d &vel_enu, double yaw_rate) {$/;"	f	class:mavplugin::SetpointVelocityPlugin	file:
send_terminate_command	mavros/src/plugins/ftp.cpp	/^	void send_terminate_command(uint32_t session) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_tf	mavros_extras/src/plugins/distance_sensor.cpp	/^	bool send_tf;		\/\/!< defines if a transform is sent or not$/;"	m	class:mavplugin::DistanceSensorItem	file:
send_timesync_msg	mavros/src/plugins/sys_time.cpp	/^	void send_timesync_msg(uint64_t tc1, uint64_t ts1) {$/;"	f	class:mavplugin::SystemTimePlugin	file:
send_truncate_command	mavros/src/plugins/ftp.cpp	/^	void send_truncate_command(std::string &path, size_t length) {$/;"	f	class:mavplugin::FTPPlugin	file:
send_vision_estimate	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	void send_vision_estimate(const ros::Time &stamp, const Eigen::Affine3d &tr) {$/;"	f	class:mavplugin::VisionPoseEstimatePlugin	file:
send_vision_speed	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	void send_vision_speed(const geometry_msgs::Vector3 &vel_enu, const ros::Time &stamp) {$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin	file:
send_waypoint	mavros/src/plugins/waypoint.cpp	/^	void send_waypoint(size_t seq) {$/;"	f	class:mavplugin::WaypointPlugin	file:
send_waypoints	mavros/src/plugins/waypoint.cpp	/^	std::vector<WaypointItem> send_waypoints;$/;"	m	class:mavplugin::WaypointPlugin	file:
send_write_command	mavros/src/plugins/ftp.cpp	/^	void send_write_command(const size_t bytes_to_copy) {$/;"	f	class:mavplugin::FTPPlugin	file:
sensor_id	mavros_extras/src/plugins/distance_sensor.cpp	/^	uint8_t sensor_id;	\/\/!< id of the sensor$/;"	m	class:mavplugin::DistanceSensorItem	file:
sensor_map	mavros_extras/src/plugins/distance_sensor.cpp	/^	std::unordered_map<uint8_t, DistanceSensorItem::Ptr> sensor_map;$/;"	m	class:mavplugin::DistanceSensorPlugin	file:
sensor_orientation_matching	mavros/src/lib/uas_sensor_orientation.cpp	/^Eigen::Quaterniond UAS::sensor_orientation_matching(MAV_SENSOR_ORIENTATION orientation)$/;"	f	class:UAS
sensor_orientations	mavros/src/lib/uas_sensor_orientation.cpp	/^static const std::array<const OrientationPair, 39> sensor_orientations = {{$/;"	v	file:
seq	mavros/src/plugins/waypoint.cpp	/^	uint16_t seq;$/;"	m	class:mavplugin::WaypointItem	file:
seqNumber	mavros/src/plugins/ftp.cpp	/^		uint16_t	seqNumber;	\/\/\/< sequence number for message$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
seq_nums_	mavros/src/plugins/sys_status.cpp	/^	std::vector<int> seq_nums_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
seq_nums_	mavros/src/plugins/sys_time.cpp	/^	std::vector<int> seq_nums_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
serial_dev	libmavconn/include/mavconn/serial.h	/^	boost::asio::serial_port serial_dev;$/;"	m	class:mavconn::MAVConnSerial
server_ep	libmavconn/include/mavconn/tcp.h	/^	boost::asio::ip::tcp::endpoint server_ep;$/;"	m	class:mavconn::MAVConnTCPClient
servos	mavros_extras/src/servo_state_publisher.cpp	/^	std::list<ServoDescription> servos;$/;"	m	class:ServoStatePublisher	file:
session	mavros/src/plugins/ftp.cpp	/^		uint8_t		session;	\/\/\/< Session id for read and write commands$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
session_file_map	mavros/src/plugins/ftp.cpp	/^	std::map<std::string, uint32_t> session_file_map;$/;"	m	class:mavplugin::FTPPlugin	file:
set	mavros/src/plugins/sys_status.cpp	/^	void set(float volt, float curr, float rem) {$/;"	f	class:mavplugin::BatteryStatusDiag
set	mavros/src/plugins/sys_status.cpp	/^	void set(mavlink_sys_status_t &st) {$/;"	f	class:mavplugin::SystemStatusDiag
set	mavros/src/plugins/sys_status.cpp	/^	void set(uint16_t f, uint16_t b) {$/;"	f	class:mavplugin::MemInfo
set	mavros/src/plugins/sys_status.cpp	/^	void set(uint16_t v, uint8_t e) {$/;"	f	class:mavplugin::HwStatus
set	test_mavros/scripts/setpoint_position_demo	/^    def set(self, x, y, z, delay=0, wait=True):$/;"	m	class:SetpointPosition
set_actuator_control_target	mavros/src/plugins/actuator_control.cpp	/^	void set_actuator_control_target(const uint64_t time_usec,$/;"	f	class:mavplugin::ActuatorControlPlugin	file:
set_attitude_target	mavros/src/plugins/setpoint_attitude.cpp	/^	void set_attitude_target(uint32_t time_boot_ms,$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
set_attitude_target	mavros/src/plugins/setpoint_raw.cpp	/^	void set_attitude_target(uint32_t time_boot_ms,$/;"	f	class:mavplugin::SetpointRawPlugin	file:
set_cb	mavros/src/plugins/param.cpp	/^	bool set_cb(mavros_msgs::ParamSet::Request &req,$/;"	f	class:mavplugin::ParamPlugin	file:
set_chan	mavros_extras/scripts/mavteleop	/^        def set_chan(n, v):$/;"	f	function:rc_override_control.joy_cb
set_component_id	libmavconn/include/mavconn/interface.h	/^	inline void set_component_id(uint8_t compid) { comp_id = compid; };$/;"	f	class:mavconn::MAVConnInterface
set_connection_status	mavros/include/mavros/mavlink_diag.h	/^	void set_connection_status(bool connected) {$/;"	f	class:mavros::MavlinkDiag
set_cur_cb	mavros/src/plugins/waypoint.cpp	/^	bool set_cur_cb(mavros_msgs::WaypointSetCurrent::Request &req,$/;"	f	class:mavplugin::WaypointPlugin	file:
set_cur_srv	mavros/src/plugins/waypoint.cpp	/^	ros::ServiceServer set_cur_srv;$/;"	m	class:mavplugin::WaypointPlugin	file:
set_current	mavros/src/mavros/mission.py	/^set_current = None$/;"	v
set_current_waypoint	mavros/src/plugins/waypoint.cpp	/^	void set_current_waypoint(size_t seq) {$/;"	f	class:mavplugin::WaypointPlugin	file:
set_data_string	mavros/src/plugins/ftp.cpp	/^	void set_data_string(std::string &s) {$/;"	f	class:mavplugin::FTPRequest
set_home	mavros/src/mavros/command.py	/^set_home = None$/;"	v
set_home_cb	mavros/src/plugins/command.cpp	/^	bool set_home_cb(mavros_msgs::CommandHome::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
set_home_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer set_home_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
set_mavconn	mavros/include/mavros/mavlink_diag.h	/^	void set_mavconn(const mavconn::MAVConnInterface::Ptr &link) {$/;"	f	class:mavros::MavlinkDiag
set_min_voltage	mavros/src/plugins/sys_status.cpp	/^	void set_min_voltage(float volt) {$/;"	f	class:mavplugin::BatteryStatusDiag
set_mode_cb	mavros/src/plugins/sys_status.cpp	/^	bool set_mode_cb(mavros_msgs::SetMode::Request &req,$/;"	f	class:mavplugin::SystemStatusPlugin	file:
set_namespace	mavros/src/mavros/__init__.py	/^def set_namespace(ns=DEFAULT_NAMESPACE):$/;"	f
set_parameters	mavros/src/plugins/param.cpp	/^	std::map<std::string, ParamSetOpt*> set_parameters;$/;"	m	class:mavplugin::ParamPlugin	file:
set_position_target_global_int	mavros/src/plugins/setpoint_raw.cpp	/^	void set_position_target_global_int(uint32_t time_boot_ms, uint8_t coordinate_frame, uint8_t type_mask,$/;"	f	class:mavplugin::SetpointRawPlugin	file:
set_position_target_local_ned	mavros/include/mavros/setpoint_mixin.h	/^	void set_position_target_local_ned(uint32_t time_boot_ms, uint8_t coordinate_frame,$/;"	f	class:mavplugin::SetPositionTargetLocalNEDMixin
set_rate_cb	mavros/src/plugins/sys_status.cpp	/^	bool set_rate_cb(mavros_msgs::StreamRate::Request &req,$/;"	f	class:mavplugin::SystemStatusPlugin	file:
set_srv	mavros/src/plugins/param.cpp	/^	ros::ServiceServer set_srv;$/;"	m	class:mavplugin::ParamPlugin	file:
set_system_id	libmavconn/include/mavconn/interface.h	/^	inline void set_system_id(uint8_t sysid) { sys_id = sysid; };$/;"	f	class:mavconn::MAVConnInterface
set_tgt	mavros/include/mavros/mavros_uas.h	/^	inline void set_tgt(uint8_t sys, uint8_t comp) {$/;"	f	class:mavros::UAS
set_thread_name	libmavconn/include/mavconn/thread_utils.h	/^inline bool set_thread_name(Thread &thd, std::string &name)$/;"	f	namespace:mavutils
set_thread_name	libmavconn/include/mavconn/thread_utils.h	/^inline bool set_thread_name(std::thread &thd, const char *name, ...)$/;"	f	namespace:mavutils
set_time_offset	mavros/include/mavros/mavros_uas.h	/^	inline void set_time_offset(uint64_t offset_ns) {$/;"	f	class:mavros::UAS
set_timestamp	mavros/src/plugins/sys_time.cpp	/^	void set_timestamp(uint64_t timestamp_ns) {$/;"	f	class:mavplugin::TimeSyncStatus
setpoint_cb	mavros/src/plugins/setpoint_position.cpp	/^	void setpoint_cb(const geometry_msgs::PoseStamped::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointPositionPlugin	file:
setpoint_demo	test_mavros/scripts/setpoint_position_demo	/^def setpoint_demo():$/;"	f
setpoint_local_pos_sub_cb	mavros_extras/src/copter_visualization.cpp	/^void setpoint_local_pos_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f
setpoint_local_pos_sub_cb	mavros_extras/src/copter_visualization1.cpp	/^void setpoint_local_pos_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f
setpoint_local_pos_sub_cb	mavros_extras/src/copter_visualization2.cpp	/^void setpoint_local_pos_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f
setpoint_local_pos_sub_cb	mavros_extras/src/copter_visualization3.cpp	/^void setpoint_local_pos_sub_cb(const geometry_msgs::PoseStamped::ConstPtr &wp)$/;"	f
setpoint_sub	mavros/src/plugins/setpoint_position.cpp	/^	ros::Subscriber setpoint_sub;$/;"	m	class:mavplugin::SetpointPositionPlugin	file:
setup	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	void setup(const ros::NodeHandle &nh){$/;"	f	class:testsetup::TestSetup
setup_args	mavros/setup.py	/^setup_args = generate_distutils_setup($/;"	v
setup_covariance	mavros/src/plugins/imu_pub.cpp	/^	void setup_covariance(UAS::Covariance3d &cov, double stdev) {$/;"	f	class:mavplugin::IMUPubPlugin	file:
setup_linvel_pid	test_mavros/sitl_test/lib/pid_controller.cpp	/^void PIDController::setup_linvel_pid(double p_gain, double i_gain, double d_gain, double i_max, double i_min, const ros::NodeHandle &node){$/;"	f	class:PIDController
setup_yawrate_pid	test_mavros/sitl_test/lib/pid_controller.cpp	/^void PIDController::setup_yawrate_pid(double p_gain, double i_gain, double d_gain, double i_max, double i_min, const ros::NodeHandle &node){$/;"	f	class:PIDController
shape	test_mavros/include/test_mavros/tests/offboard_control.h	/^	path_shape shape;$/;"	m	class:testsetup::OffboardControl
shedule_cb	mavros/src/plugins/param.cpp	/^	void shedule_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::ParamPlugin	file:
shedule_pull	mavros/src/plugins/param.cpp	/^	void shedule_pull(const ros::Duration &dt) {$/;"	f	class:mavplugin::ParamPlugin	file:
shedule_pull	mavros/src/plugins/waypoint.cpp	/^	void shedule_pull(const ros::Duration &dt) {$/;"	f	class:mavplugin::WaypointPlugin	file:
shedule_timer	mavros/src/plugins/param.cpp	/^	ros::Timer shedule_timer;			\/\/!< for startup shedule fetch$/;"	m	class:mavplugin::ParamPlugin	file:
shedule_timer	mavros/src/plugins/waypoint.cpp	/^	ros::Timer shedule_timer;$/;"	m	class:mavplugin::WaypointPlugin	file:
sheduled_pull_cb	mavros/src/plugins/waypoint.cpp	/^	void sheduled_pull_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::WaypointPlugin	file:
sig_connection_changed	mavros/include/mavros/mavros_uas.h	/^	boost::signals2::signal<void(bool)> sig_connection_changed;$/;"	m	class:mavros::UAS
sitltest	test_mavros/include/test_mavros/sitl_test/sitl_test.h	/^namespace sitltest {$/;"	n
size	mavros/src/plugins/ftp.cpp	/^		uint8_t		size;		\/\/\/< Size of data$/;"	m	struct:mavplugin::FTPRequest::PayloadHeader	file:
skipinitialspace	mavros/src/mavros/mission.py	/^        skipinitialspace = True$/;"	v	class:QGroundControlWP.CSVDialect
skipinitialspace	mavros/src/mavros/param.py	/^        skipinitialspace = True$/;"	v	class:MissionPlannerParam.CSVDialect
skipinitialspace	mavros/src/mavros/param.py	/^        skipinitialspace = True$/;"	v	class:QGroundControlParam.CSVDialect
socket	libmavconn/include/mavconn/tcp.h	/^	boost::asio::ip::tcp::socket socket;$/;"	m	class:mavconn::MAVConnTCPClient
socket	libmavconn/include/mavconn/udp.h	/^	boost::asio::ip::udp::socket socket;$/;"	m	class:mavconn::MAVConnUDP
sp_nh	mavros/src/plugins/setpoint_accel.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::SetpointAccelerationPlugin	file:
sp_nh	mavros/src/plugins/setpoint_attitude.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
sp_nh	mavros/src/plugins/setpoint_position.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::SetpointPositionPlugin	file:
sp_nh	mavros/src/plugins/setpoint_raw.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
sp_nh	mavros/src/plugins/setpoint_velocity.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::SetpointVelocityPlugin	file:
sp_nh	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
sp_nh	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	ros::NodeHandle sp_nh;$/;"	m	class:mavplugin::VisionSpeedEstimatePlugin	file:
spin	mavros/src/lib/mavros.cpp	/^void MavRos::spin() {$/;"	f	class:MavRos
spin	mavros/src/mavros/event_launcher.py	/^    def spin(self):$/;"	m	class:Launcher
spin	mavros_extras/src/servo_state_publisher.cpp	/^	void spin() {$/;"	f	class:ServoStatePublisher
spin	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void spin(int argc, char *argv[]) {$/;"	f	class:testsetup::OffboardControl
spin	test_mavros/sitl_test/lib/sitl_test.cpp	/^void SitlTest::spin(int argc, char *argv[])$/;"	f	class:SitlTest
spin_once	mavros/src/mavros/event_launcher.py	/^    def spin_once(self):$/;"	m	class:EventHandler
spin_once	mavros/src/mavros/event_launcher.py	/^    def spin_once(self):$/;"	m	class:ShellHandler
square_path_motion	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void square_path_motion(ros::Rate loop_rate, control_mode mode){$/;"	f	class:testsetup::OffboardControl
startup_px4_usb_quirk	mavros/src/lib/mavros.cpp	/^void MavRos::startup_px4_usb_quirk(void) {$/;"	f	class:MavRos
state_cb	mavros/scripts/mavsys	/^    def state_cb(state):$/;"	f	function:do_mode
state_pub	mavros/src/plugins/sys_status.cpp	/^	ros::Publisher state_pub;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
state_strings	mavros/src/lib/uas_stringify.cpp	/^static const std::array<const std::string, 8> state_strings = {$/;"	v	file:
status_pub	mavros/src/plugins/3dr_radio.cpp	/^	ros::Publisher status_pub;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
stop	mavros/src/lib/uas_data.cpp	/^void UAS::stop(void)$/;"	f	class:UAS
str_autopilot	mavros/src/lib/uas_stringify.cpp	/^std::string UAS::str_autopilot(enum MAV_AUTOPILOT ap)$/;"	f	class:UAS
str_base_mode	mavros/src/lib/uas_stringify.cpp	/^static inline std::string str_base_mode(int base_mode) {$/;"	f	file:
str_custom_mode	mavros/src/lib/uas_stringify.cpp	/^static std::string str_custom_mode(uint32_t custom_mode) {$/;"	f	file:
str_mode_cmap	mavros/src/lib/uas_stringify.cpp	/^static std::string str_mode_cmap(const cmode_map &cmap, uint32_t custom_mode) {$/;"	f	file:
str_mode_px4	mavros/src/lib/uas_stringify.cpp	/^static inline std::string str_mode_px4(uint32_t custom_mode_int) {$/;"	f	file:
str_mode_v10	mavros/src/lib/uas_stringify.cpp	/^std::string UAS::str_mode_v10(uint8_t base_mode, uint32_t custom_mode) {$/;"	f	class:UAS
str_sensor_orientation	mavros/src/lib/uas_sensor_orientation.cpp	/^std::string UAS::str_sensor_orientation(MAV_SENSOR_ORIENTATION orientation)$/;"	f	class:UAS
str_system_status	mavros/src/lib/uas_stringify.cpp	/^std::string UAS::str_system_status(enum MAV_STATE st)$/;"	f	class:UAS
str_type	mavros/src/lib/uas_stringify.cpp	/^std::string UAS::str_type(enum MAV_TYPE type)$/;"	f	class:UAS
sub	mavros_extras/src/plugins/distance_sensor.cpp	/^	ros::Subscriber sub;$/;"	m	class:mavplugin::DistanceSensorItem	file:
sub_mode	mavros/include/mavros/px4_custom_mode.h	/^		uint8_t sub_mode;$/;"	m	struct:px4::custom_mode::__anon1
subscribe_waypoints	mavros/src/mavros/mission.py	/^def subscribe_waypoints(cb, **kvargs):$/;"	f
synchronise_stamp	mavros/src/lib/uas_timesync.cpp	/^ros::Time UAS::synchronise_stamp(uint32_t time_boot_ms) {$/;"	f	class:UAS
synchronise_stamp	mavros/src/lib/uas_timesync.cpp	/^ros::Time UAS::synchronise_stamp(uint64_t time_usec) {$/;"	f	class:UAS
synchronized_header	mavros/include/mavros/mavros_uas.h	/^	inline std_msgs::Header synchronized_header(const std::string &frame_id, const T time_stamp) {$/;"	f	class:mavros::UAS
sys_diag	mavros/src/plugins/sys_status.cpp	/^	SystemStatusDiag sys_diag;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
sys_id	libmavconn/include/mavconn/interface.h	/^	uint8_t sys_id;$/;"	m	class:mavconn::MAVConnInterface
sys_time_cb	mavros/src/plugins/sys_time.cpp	/^	void sys_time_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::SystemTimePlugin	file:
sys_time_timer	mavros/src/plugins/sys_time.cpp	/^	ros::Timer sys_time_timer;$/;"	m	class:mavplugin::SystemTimePlugin	file:
system_status	mavros/src/plugins/sys_status.cpp	/^	enum MAV_STATE system_status;$/;"	m	class:mavplugin::HeartbeatStatus	typeref:enum:mavplugin::HeartbeatStatus::MAV_STATE	file:
takeoff	mavros/src/mavros/command.py	/^takeoff = None$/;"	v
takeoff_cb	mavros/src/plugins/command.cpp	/^	bool takeoff_cb(mavros_msgs::CommandTOL::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
takeoff_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer takeoff_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
target_attitude_pub	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Publisher target_local_pub, target_global_pub, target_attitude_pub, target_local_pub1;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
target_component	mavros/include/mavros/mavros_uas.h	/^	uint8_t target_component;$/;"	m	class:mavros::UAS
target_global_pub	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Publisher target_local_pub, target_global_pub, target_attitude_pub, target_local_pub1;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
target_local_pub	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Publisher target_local_pub, target_global_pub, target_attitude_pub, target_local_pub1;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
target_local_pub1	mavros/src/plugins/setpoint_raw.cpp	/^	ros::Publisher target_local_pub, target_global_pub, target_attitude_pub, target_local_pub1;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
target_system	mavros/include/mavros/mavros_uas.h	/^	uint8_t target_system;$/;"	m	class:mavros::UAS
team_set_cb	mavros_extras/src/plugins/uav_pos_set.cpp	/^	void team_set_cb(const demo_test::pos_write_team::ConstPtr &team_code)$/;"	f	class:mavplugin::UavPosSetPlugin	file:
tell	mavros/src/mavros/ftp.py	/^    def tell(self):$/;"	m	class:FTPFile
temp_pub	mavros/src/plugins/imu_pub.cpp	/^	ros::Publisher temp_pub;$/;"	m	class:mavplugin::IMUPubPlugin	file:
temp_pub	mavros_extras/src/plugins/px4flow.cpp	/^	ros::Publisher temp_pub;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
terminate_cb	mavros/src/lib/mavros.cpp	/^void MavRos::terminate_cb() {$/;"	f	class:MavRos
test	test_mavros/include/test_mavros/tests/offboard_control.h	/^	TestSetup test;$/;"	m	class:testsetup::OffboardControl
testsetup	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^namespace testsetup {$/;"	n
testsetup	test_mavros/include/test_mavros/tests/offboard_control.h	/^namespace testsetup {$/;"	n
tf2_broadcaster	mavros/include/mavros/mavros_uas.h	/^	tf2_ros::TransformBroadcaster tf2_broadcaster;$/;"	m	class:mavros::UAS
tf2_buffer	mavros/include/mavros/mavros_uas.h	/^	tf2_ros::Buffer tf2_buffer;$/;"	m	class:mavros::UAS
tf2_listener	mavros/include/mavros/mavros_uas.h	/^	tf2_ros::TransformListener tf2_listener;$/;"	m	class:mavros::UAS
tf2_start	mavros/include/mavros/setpoint_mixin.h	/^	void tf2_start(const char *_thd_name, void (D::*cbp)(const geometry_msgs::TransformStamped &) ) {$/;"	f	class:mavplugin::TF2ListenerMixin
tf_child_frame_id	mavros/src/plugins/global_position.cpp	/^	std::string tf_child_frame_id;	\/\/!< frame for TF and Pose$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
tf_child_frame_id	mavros/src/plugins/local_position.cpp	/^	std::string tf_child_frame_id;	\/\/!< frame for TF$/;"	m	class:mavplugin::LocalPositionPlugin	file:
tf_child_frame_id	mavros/src/plugins/setpoint_attitude.cpp	/^	std::string tf_child_frame_id;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
tf_child_frame_id	mavros/src/plugins/setpoint_position.cpp	/^	std::string tf_child_frame_id;$/;"	m	class:mavplugin::SetpointPositionPlugin	file:
tf_child_frame_id	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	std::string tf_child_frame_id;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
tf_frame_id	mavros/src/plugins/global_position.cpp	/^	std::string tf_frame_id;	\/\/!< origin for TF$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
tf_frame_id	mavros/src/plugins/local_position.cpp	/^	std::string tf_frame_id;	\/\/!< origin for TF$/;"	m	class:mavplugin::LocalPositionPlugin	file:
tf_frame_id	mavros/src/plugins/setpoint_attitude.cpp	/^	std::string tf_frame_id;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
tf_frame_id	mavros/src/plugins/setpoint_position.cpp	/^	std::string tf_frame_id;$/;"	m	class:mavplugin::SetpointPositionPlugin	file:
tf_frame_id	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	std::string tf_frame_id;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
tf_listener	mavros/include/mavros/setpoint_mixin.h	/^	void tf_listener(void) {$/;"	f	class:mavplugin::TF2ListenerMixin
tf_rate	mavros/src/plugins/setpoint_attitude.cpp	/^	double tf_rate;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
tf_rate	mavros/src/plugins/setpoint_position.cpp	/^	double tf_rate;$/;"	m	class:mavplugin::SetpointPositionPlugin	file:
tf_rate	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	double tf_rate;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
tf_send	mavros/src/plugins/global_position.cpp	/^	bool tf_send;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
tf_send	mavros/src/plugins/local_position.cpp	/^	bool tf_send;$/;"	m	class:mavplugin::LocalPositionPlugin	file:
tf_send_fcu	mavros/src/plugins/local_position.cpp	/^	bool tf_send_fcu;	\/\/!< report NED->aircraft in tf tree$/;"	m	class:mavplugin::LocalPositionPlugin	file:
tf_thd_name	mavros/include/mavros/setpoint_mixin.h	/^	std::string tf_thd_name;$/;"	m	class:mavplugin::TF2ListenerMixin
tf_thread	mavros/include/mavros/setpoint_mixin.h	/^	std::thread tf_thread;$/;"	m	class:mavplugin::TF2ListenerMixin
tf_transform_cb	mavros/include/mavros/setpoint_mixin.h	/^	boost::function<void (const geometry_msgs::TransformStamped &)> tf_transform_cb;$/;"	m	class:mavplugin::TF2ListenerMixin
thd_normalize	mavros_extras/scripts/mavteleop	/^        def thd_normalize(v):$/;"	f	function:attitude_setpoint_control
threshold	test_mavros/include/test_mavros/tests/offboard_control.h	/^	std::array<double, 100> threshold;$/;"	m	class:testsetup::OffboardControl
threshold_definition	test_mavros/include/test_mavros/tests/offboard_control.h	/^	std::array<double, 100> threshold_definition(){$/;"	f	class:testsetup::OffboardControl
throttle_cb	mavros/src/plugins/setpoint_attitude.cpp	/^	void throttle_cb(const std_msgs::Float64::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
throttle_sub	mavros/src/plugins/setpoint_attitude.cpp	/^	ros::Subscriber throttle_sub;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
tick	mavros/src/plugins/sys_status.cpp	/^	void tick(uint8_t type_, uint8_t autopilot_,$/;"	f	class:mavplugin::HeartbeatStatus
tick	mavros/src/plugins/sys_time.cpp	/^	void tick(int64_t dt, uint64_t timestamp_ns, int64_t time_offset_ns) {$/;"	f	class:mavplugin::TimeSyncStatus
time_offset	mavros/include/mavros/mavros_uas.h	/^	std::atomic<uint64_t> time_offset;$/;"	m	class:mavros::UAS
time_offset_ns	mavros/src/plugins/sys_time.cpp	/^	int64_t time_offset_ns;$/;"	m	class:mavplugin::SystemTimePlugin	file:
time_ref_pub	mavros/src/plugins/sys_time.cpp	/^	ros::Publisher time_ref_pub;$/;"	m	class:mavplugin::SystemTimePlugin	file:
time_ref_source	mavros/src/plugins/sys_time.cpp	/^	std::string time_ref_source;$/;"	m	class:mavplugin::SystemTimePlugin	file:
timeout_cb	mavros/src/plugins/param.cpp	/^	void timeout_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::ParamPlugin	file:
timeout_cb	mavros/src/plugins/sys_status.cpp	/^	void timeout_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::SystemStatusPlugin	file:
timeout_cb	mavros/src/plugins/waypoint.cpp	/^	void timeout_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::WaypointPlugin	file:
timeout_timer	mavros/src/plugins/param.cpp	/^	ros::Timer timeout_timer;			\/\/!< for timeout resend$/;"	m	class:mavplugin::ParamPlugin	file:
timeout_timer	mavros/src/plugins/sys_status.cpp	/^	ros::Timer timeout_timer;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
timer_cb	mavros/scripts/checkid	/^    def timer_cb(self, event):$/;"	m	class:Checker
times_	mavros/src/plugins/sys_status.cpp	/^	std::vector<ros::Time> times_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
times_	mavros/src/plugins/sys_time.cpp	/^	std::vector<ros::Time> times_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
timesync_cb	mavros/src/plugins/sys_time.cpp	/^	void timesync_cb(const ros::TimerEvent &event) {$/;"	f	class:mavplugin::SystemTimePlugin	file:
timesync_timer	mavros/src/plugins/sys_time.cpp	/^	ros::Timer timesync_timer;$/;"	m	class:mavplugin::SystemTimePlugin	file:
to_integer	mavros/src/plugins/param.cpp	/^	static int64_t to_integer(param_t &p) {$/;"	f	class:mavplugin::Parameter
to_msg	mavros/src/plugins/waypoint.cpp	/^	static mavros_msgs::Waypoint to_msg(WaypointItem &wp) {$/;"	f	class:mavplugin::WaypointItem
to_param_union	mavros/src/plugins/param.cpp	/^	inline mavlink_param_union_t to_param_union(Parameter::param_t p) {$/;"	f	class:mavplugin::ParamPlugin	file:
to_param_union	mavros/src/plugins/param.cpp	/^	static mavlink_param_union_t to_param_union(param_t p) {$/;"	f	class:mavplugin::Parameter
to_param_union_apm_quirk	mavros/src/plugins/param.cpp	/^	static mavlink_param_union_t to_param_union_apm_quirk(param_t p) {$/;"	f	class:mavplugin::Parameter
to_real	mavros/src/plugins/param.cpp	/^	static double to_real(param_t &p) {$/;"	f	class:mavplugin::Parameter
to_string_command	mavros/src/plugins/waypoint.cpp	/^	static std::string to_string_command(WaypointItem &wpi) {$/;"	f	class:mavplugin::WaypointItem
to_string_frame	mavros/src/plugins/waypoint.cpp	/^	static std::string to_string_frame(WaypointItem &wpi) {$/;"	f	class:mavplugin::WaypointItem
to_string_ss	libmavconn/include/mavconn/thread_utils.h	/^inline const std::string to_string_ss(T &obj)$/;"	f	namespace:mavutils
to_string_vt	mavros/src/plugins/param.cpp	/^	static std::string to_string_vt(param_t p) {$/;"	f	class:mavplugin::Parameter
to_type	mavros/src/mavros/param.py	/^        def to_type(x):$/;"	f	function:QGroundControlParam.write
to_xmlrpc_value	mavros/src/plugins/param.cpp	/^	static XmlRpc::XmlRpcValue to_xmlrpc_value(param_t &p) {$/;"	f	class:mavplugin::Parameter
tolerance_	mavros/src/plugins/sys_status.cpp	/^	const double tolerance_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
tolerance_	mavros/src/plugins/sys_time.cpp	/^	const double tolerance_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
topic_name	mavros_extras/src/plugins/distance_sensor.cpp	/^	std::string topic_name;$/;"	m	class:mavplugin::DistanceSensorItem	file:
track_marker_pub	mavros_extras/src/copter_visualization.cpp	/^ros::Publisher track_marker_pub;$/;"	v
track_marker_pub	mavros_extras/src/copter_visualization1.cpp	/^ros::Publisher track_marker_pub;$/;"	v
track_marker_pub	mavros_extras/src/copter_visualization2.cpp	/^ros::Publisher track_marker_pub;$/;"	v
track_marker_pub	mavros_extras/src/copter_visualization3.cpp	/^ros::Publisher track_marker_pub;$/;"	v
transform_cb	mavros/src/plugins/setpoint_attitude.cpp	/^	void transform_cb(const geometry_msgs::TransformStamped &transform) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
transform_cb	mavros/src/plugins/setpoint_position.cpp	/^	void transform_cb(const geometry_msgs::TransformStamped &transform) {$/;"	f	class:mavplugin::SetpointPositionPlugin	file:
transform_cb	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	void transform_cb(const geometry_msgs::TransformStamped &transform) {$/;"	f	class:mavplugin::VisionPoseEstimatePlugin	file:
transform_frame	mavros/src/lib/uas_frame_conversions.cpp	/^Eigen::Vector3d UAS::transform_frame(const Eigen::Vector3d &vec, const Eigen::Quaterniond &q)$/;"	f	class:UAS
transform_frame	mavros/src/lib/uas_frame_conversions.cpp	/^UAS::Covariance3d UAS::transform_frame(const Covariance3d &cov, const Eigen::Quaterniond &q)$/;"	f	class:UAS
transform_frame	mavros/src/lib/uas_frame_conversions.cpp	/^UAS::Covariance6d UAS::transform_frame(const Covariance6d &cov, const Eigen::Quaterniond &q)$/;"	f	class:UAS
transform_frame_aircraft_baselink	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_aircraft_baselink(const T &in) {$/;"	f	class:mavros::UAS
transform_frame_aircraft_enu	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_aircraft_enu(const T &in,const Eigen::Quaterniond &q) {$/;"	f	class:mavros::UAS
transform_frame_aircraft_ned	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_aircraft_ned(const T &in,const Eigen::Quaterniond &q) {$/;"	f	class:mavros::UAS
transform_frame_baselink_aircraft	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_baselink_aircraft(const T &in) {$/;"	f	class:mavros::UAS
transform_frame_baselink_enu	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_baselink_enu(const T &in,const Eigen::Quaterniond &q) {$/;"	f	class:mavros::UAS
transform_frame_enu_aircraft	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_enu_aircraft(const T &in,const Eigen::Quaterniond &q) {$/;"	f	class:mavros::UAS
transform_frame_enu_baselink	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_enu_baselink(const T &in,const Eigen::Quaterniond &q) {$/;"	f	class:mavros::UAS
transform_frame_enu_ned	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_enu_ned(const T &in) {$/;"	f	class:mavros::UAS
transform_frame_ned_aircraft	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_ned_aircraft(const T &in,const Eigen::Quaterniond &q) {$/;"	f	class:mavros::UAS
transform_frame_ned_enu	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_frame_ned_enu(const T &in) {$/;"	f	class:mavros::UAS
transform_frame_yaw	mavros/include/mavros/mavros_uas.h	/^	static inline double transform_frame_yaw(double yaw) {$/;"	f	class:mavros::UAS
transform_frame_yaw_enu_ned	mavros/include/mavros/mavros_uas.h	/^	static inline double transform_frame_yaw_enu_ned(double yaw) {$/;"	f	class:mavros::UAS
transform_frame_yaw_ned_enu	mavros/include/mavros/mavros_uas.h	/^	static inline double transform_frame_yaw_ned_enu(double yaw) {$/;"	f	class:mavros::UAS
transform_orientation	mavros/src/lib/uas_frame_conversions.cpp	/^Eigen::Quaterniond UAS::transform_orientation(const Eigen::Quaterniond &q, const UAS::STATIC_TRANSFORM transform)$/;"	f	class:UAS
transform_orientation_aircraft_baselink	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_orientation_aircraft_baselink(const T &in) {$/;"	f	class:mavros::UAS
transform_orientation_baselink_aircraft	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_orientation_baselink_aircraft(const T &in) {$/;"	f	class:mavros::UAS
transform_orientation_enu_ned	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_orientation_enu_ned(const T &in) {$/;"	f	class:mavros::UAS
transform_orientation_ned_enu	mavros/include/mavros/mavros_uas.h	/^	static inline T transform_orientation_ned_enu(const T &in) {$/;"	f	class:mavros::UAS
transform_static_frame	mavros/src/lib/uas_frame_conversions.cpp	/^Eigen::Vector3d UAS::transform_static_frame(const Eigen::Vector3d &vec, const UAS::STATIC_TRANSFORM transform)$/;"	f	class:UAS
transform_static_frame	mavros/src/lib/uas_frame_conversions.cpp	/^UAS::Covariance3d UAS::transform_static_frame(const Covariance3d &cov, const UAS::STATIC_TRANSFORM transform)$/;"	f	class:UAS
transform_static_frame	mavros/src/lib/uas_frame_conversions.cpp	/^UAS::Covariance6d UAS::transform_static_frame(const Covariance6d &cov, const UAS::STATIC_TRANSFORM transform)$/;"	f	class:UAS
trigger_control	mavros/src/mavros/command.py	/^trigger_control = None$/;"	v
trigger_control_cb	mavros/src/plugins/command.cpp	/^        bool trigger_control_cb(mavros_msgs::CommandTriggerControl::Request &req,$/;"	f	class:mavplugin::CommandPlugin	file:
trigger_srv	mavros/src/plugins/command.cpp	/^	ros::ServiceServer trigger_srv;$/;"	m	class:mavplugin::CommandPlugin	file:
truncate	mavros/src/mavros/ftp.py	/^    def truncate(self, size=0):$/;"	m	class:FTPFile
truncate	mavros_extras/scripts/mavftpfuse	/^    def truncate(self, path, length, fh=None):$/;"	m	class:MavFtp
truncate_cb	mavros/src/plugins/ftp.cpp	/^	bool truncate_cb(mavros_msgs::FileTruncate::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
truncate_file	mavros/src/plugins/ftp.cpp	/^	void truncate_file(std::string &path, size_t length) {$/;"	f	class:mavplugin::FTPPlugin	file:
truncate_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer truncate_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
twist_cb	mavros/src/plugins/setpoint_attitude.cpp	/^	void twist_cb(const geometry_msgs::TwistStamped::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointAttitudePlugin	file:
twist_sub	mavros/src/plugins/setpoint_attitude.cpp	/^	ros::Subscriber twist_sub;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
tx_in_progress	libmavconn/include/mavconn/serial.h	/^	std::atomic<bool> tx_in_progress;$/;"	m	class:mavconn::MAVConnSerial
tx_in_progress	libmavconn/include/mavconn/tcp.h	/^	std::atomic<bool> tx_in_progress;$/;"	m	class:mavconn::MAVConnTCPClient
tx_in_progress	libmavconn/include/mavconn/udp.h	/^	std::atomic<bool> tx_in_progress;$/;"	m	class:mavconn::MAVConnUDP
tx_q	libmavconn/include/mavconn/serial.h	/^	std::list<MsgBuffer*> tx_q;$/;"	m	class:mavconn::MAVConnSerial
tx_q	libmavconn/include/mavconn/tcp.h	/^	std::list<MsgBuffer*> tx_q;$/;"	m	class:mavconn::MAVConnTCPClient
tx_q	libmavconn/include/mavconn/udp.h	/^	std::list<MsgBuffer*> tx_q;$/;"	m	class:mavconn::MAVConnUDP
tx_speed	libmavconn/include/mavconn/interface.h	/^		float tx_speed;		\/\/!< current transfer speed [B\/s]$/;"	m	struct:mavconn::MAVConnInterface::IOStat
tx_total_bytes	libmavconn/include/mavconn/interface.h	/^		size_t tx_total_bytes;	\/\/!< total bytes transferred$/;"	m	struct:mavconn::MAVConnInterface::IOStat
tx_total_bytes	libmavconn/include/mavconn/interface.h	/^	std::atomic<size_t> tx_total_bytes, rx_total_bytes;$/;"	m	class:mavconn::MAVConnInterface
type	mavros/include/mavros/mavros_uas.h	/^	std::atomic<uint8_t> type;$/;"	m	class:mavros::UAS
type	mavros/src/plugins/sys_status.cpp	/^	enum MAV_TYPE type;$/;"	m	class:mavplugin::HeartbeatStatus	typeref:enum:mavplugin::HeartbeatStatus::MAV_TYPE	file:
type_strings	mavros/src/lib/uas_stringify.cpp	/^static const std::array<const std::string, 28> type_strings = {$/;"	v	file:
uas	mavros/src/plugins/3dr_radio.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::TDRRadioPlugin	file:
uas	mavros/src/plugins/actuator_control.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::ActuatorControlPlugin	file:
uas	mavros/src/plugins/altitude.cpp	/^    UAS *uas;$/;"	m	class:mavplugin::AltitudePlugin	file:
uas	mavros/src/plugins/command.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::CommandPlugin	file:
uas	mavros/src/plugins/dummy.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::DummyPlugin	file:
uas	mavros/src/plugins/ftp.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::FTPPlugin	file:
uas	mavros/src/plugins/global_position.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::GlobalPositionPlugin	file:
uas	mavros/src/plugins/imu_pub.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::IMUPubPlugin	file:
uas	mavros/src/plugins/local_position.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::LocalPositionPlugin	file:
uas	mavros/src/plugins/manual_control.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::ManualControlPlugin	file:
uas	mavros/src/plugins/param.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::ParamPlugin	file:
uas	mavros/src/plugins/rc_io.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::RCIOPlugin	file:
uas	mavros/src/plugins/safety_area.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SafetyAreaPlugin	file:
uas	mavros/src/plugins/setpoint_accel.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SetpointAccelerationPlugin	file:
uas	mavros/src/plugins/setpoint_attitude.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SetpointAttitudePlugin	file:
uas	mavros/src/plugins/setpoint_position.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SetpointPositionPlugin	file:
uas	mavros/src/plugins/setpoint_raw.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SetpointRawPlugin	file:
uas	mavros/src/plugins/setpoint_velocity.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SetpointVelocityPlugin	file:
uas	mavros/src/plugins/sys_status.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
uas	mavros/src/plugins/sys_time.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::SystemTimePlugin	file:
uas	mavros/src/plugins/waypoint.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::WaypointPlugin	file:
uas	mavros_extras/src/plugins/cam_imu_sync.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::CamIMUSyncPlugin	file:
uas	mavros_extras/src/plugins/distance_sensor.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::DistanceSensorPlugin	file:
uas	mavros_extras/src/plugins/mocap_pose_estimate.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::MocapPoseEstimatePlugin	file:
uas	mavros_extras/src/plugins/px4flow.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::PX4FlowPlugin	file:
uas	mavros_extras/src/plugins/uav_lde.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::UavLdePlugin	file:
uas	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::UavPosFeedbackPlugin	file:
uas	mavros_extras/src/plugins/uav_pos_set.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
uas	mavros_extras/src/plugins/vibration.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::VibrationPlugin	file:
uas	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
uas	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	UAS *uas;$/;"	m	class:mavplugin::VisionSpeedEstimatePlugin	file:
uav_leader_send	mavros_extras/src/plugins/uav_lde.cpp	/^	void uav_leader_send$/;"	f	class:mavplugin::UavLdePlugin	file:
uav_leader_sub	mavros_extras/src/plugins/uav_lde.cpp	/^	ros::Subscriber uav_leader_sub;$/;"	m	class:mavplugin::UavLdePlugin	file:
uav_pose_send	mavros_extras/src/plugins/uav_pos_feedback.cpp	/^	void uav_pose_send$/;"	f	class:mavplugin::UavPosFeedbackPlugin	file:
uav_pose_send	mavros_extras/src/plugins/uav_pos_set.cpp	/^	void uav_pose_send$/;"	f	class:mavplugin::UavPosSetPlugin	file:
uav_team_send	mavros_extras/src/plugins/uav_pos_set.cpp	/^	void uav_team_send$/;"	f	class:mavplugin::UavPosSetPlugin	file:
unique_lock	mavros/include/mavros/mavros_plugin.h	/^typedef std::unique_lock<std::recursive_mutex> unique_lock;$/;"	t	namespace:mavplugin
unique_lock	mavros/include/mavros/mavros_uas.h	/^	typedef std::unique_lock<std::recursive_mutex> unique_lock;$/;"	t	class:mavros::UAS
unk_orientation_cov	mavros/src/plugins/imu_pub.cpp	/^	UAS::Covariance3d unk_orientation_cov;$/;"	m	class:mavplugin::IMUPubPlugin	file:
unlink	mavros/src/mavros/ftp.py	/^def unlink(path):$/;"	f
unlink	mavros_extras/scripts/mavftpfuse	/^    def unlink(self, path):$/;"	m	class:MavFtp
update	mavros/scripts/mavftp	/^    def update(self, value):$/;"	m	class:ProgressBar
update_attitude_imu	mavros/src/lib/uas_data.cpp	/^void UAS::update_attitude_imu(sensor_msgs::Imu::Ptr &imu)$/;"	f	class:UAS
update_capabilities	mavros/src/lib/uas_data.cpp	/^void UAS::update_capabilities(bool known, uint64_t caps)$/;"	f	class:UAS
update_connection_status	mavros/src/lib/uas_data.cpp	/^void UAS::update_connection_status(bool conn_)$/;"	f	class:UAS
update_gps_fix_epts	mavros/src/lib/uas_data.cpp	/^void UAS::update_gps_fix_epts(sensor_msgs::NavSatFix::Ptr &fix,$/;"	f	class:UAS
update_heartbeat	mavros/src/lib/uas_data.cpp	/^void UAS::update_heartbeat(uint8_t type_, uint8_t autopilot_, uint8_t base_mode_)$/;"	f	class:UAS
url_parse_host	libmavconn/src/interface.cpp	/^static void url_parse_host(std::string host,$/;"	f	namespace:mavconn
url_parse_query	libmavconn/src/interface.cpp	/^static void url_parse_query(std::string query, uint8_t &sysid, uint8_t &compid)$/;"	f	namespace:mavconn
url_parse_serial	libmavconn/src/interface.cpp	/^static MAVConnInterface::Ptr url_parse_serial($/;"	f	namespace:mavconn
url_parse_tcp_client	libmavconn/src/interface.cpp	/^static MAVConnInterface::Ptr url_parse_tcp_client($/;"	f	namespace:mavconn
url_parse_tcp_server	libmavconn/src/interface.cpp	/^static MAVConnInterface::Ptr url_parse_tcp_server($/;"	f	namespace:mavconn
url_parse_udp	libmavconn/src/interface.cpp	/^static MAVConnInterface::Ptr url_parse_udp($/;"	f	namespace:mavconn
use_comp_id_system_control	mavros/src/plugins/command.cpp	/^	bool use_comp_id_system_control;$/;"	m	class:mavplugin::CommandPlugin	file:
use_pid	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	bool use_pid;$/;"	m	class:testsetup::TestSetup
use_pid	test_mavros/include/test_mavros/tests/offboard_control.h	/^	bool use_pid;$/;"	m	class:testsetup::OffboardControl
vcc	mavros/src/plugins/sys_status.cpp	/^	float vcc;$/;"	m	class:mavplugin::HwStatus	file:
vehicle_marker	mavros_extras/src/copter_visualization.cpp	/^boost::shared_ptr<visualization_msgs::MarkerArray> vehicle_marker;$/;"	v
vehicle_marker	mavros_extras/src/copter_visualization1.cpp	/^boost::shared_ptr<visualization_msgs::MarkerArray> vehicle_marker;$/;"	v
vehicle_marker	mavros_extras/src/copter_visualization2.cpp	/^boost::shared_ptr<visualization_msgs::MarkerArray> vehicle_marker;$/;"	v
vehicle_marker	mavros_extras/src/copter_visualization3.cpp	/^boost::shared_ptr<visualization_msgs::MarkerArray> vehicle_marker;$/;"	v
vehicle_marker_pub	mavros_extras/src/copter_visualization.cpp	/^ros::Publisher vehicle_marker_pub;$/;"	v
vehicle_marker_pub	mavros_extras/src/copter_visualization1.cpp	/^ros::Publisher vehicle_marker_pub;$/;"	v
vehicle_marker_pub	mavros_extras/src/copter_visualization2.cpp	/^ros::Publisher vehicle_marker_pub;$/;"	v
vehicle_marker_pub	mavros_extras/src/copter_visualization3.cpp	/^ros::Publisher vehicle_marker_pub;$/;"	v
vel_cb	mavros/src/plugins/setpoint_velocity.cpp	/^	void vel_cb(const geometry_msgs::TwistStamped::ConstPtr &req) {$/;"	f	class:mavplugin::SetpointVelocityPlugin	file:
vel_sp_pub	test_mavros/include/test_mavros/tests/offboard_control.h	/^	ros::Publisher vel_sp_pub;$/;"	m	class:testsetup::OffboardControl
vel_speed_cb	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	void vel_speed_cb(const geometry_msgs::Vector3Stamped::ConstPtr &req) {$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin	file:
vel_sub	mavros/src/plugins/setpoint_velocity.cpp	/^	ros::Subscriber vel_sub;$/;"	m	class:mavplugin::SetpointVelocityPlugin	file:
vel_twist_cb	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	void vel_twist_cb(const geometry_msgs::TwistStamped::ConstPtr &req) {$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin	file:
velocity_setpoint_control	mavros_extras/scripts/mavteleop	/^def velocity_setpoint_control(args):$/;"	f
version_retries	mavros/src/plugins/sys_status.cpp	/^	int version_retries;$/;"	m	class:mavplugin::SystemStatusPlugin	file:
vfr_pub	mavros/src/plugins/vfr_hud.cpp	/^	ros::Publisher vfr_pub;$/;"	m	class:mavplugin::VfrHudPlugin	file:
vibe_nh	mavros_extras/src/plugins/vibration.cpp	/^	ros::NodeHandle vibe_nh;$/;"	m	class:mavplugin::VibrationPlugin	file:
vibration_pub	mavros_extras/src/plugins/vibration.cpp	/^	ros::Publisher vibration_pub;$/;"	m	class:mavplugin::VibrationPlugin	file:
vision_cb	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	void vision_cb(const geometry_msgs::PoseStamped::ConstPtr &req) {$/;"	f	class:mavplugin::VisionPoseEstimatePlugin	file:
vision_cov_cb	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	void vision_cov_cb(const geometry_msgs::PoseWithCovarianceStamped::ConstPtr &req) {$/;"	f	class:mavplugin::VisionPoseEstimatePlugin	file:
vision_cov_sub	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	ros::Subscriber vision_cov_sub;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
vision_position_estimate	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	void vision_position_estimate(uint64_t usec,$/;"	f	class:mavplugin::VisionPoseEstimatePlugin	file:
vision_speed_estimate	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	void vision_speed_estimate(uint64_t usec,$/;"	f	class:mavplugin::VisionSpeedEstimatePlugin	file:
vision_sub	mavros_extras/src/plugins/vision_pose_estimate.cpp	/^	ros::Subscriber vision_sub;$/;"	m	class:mavplugin::VisionPoseEstimatePlugin	file:
vision_vel_sub	mavros_extras/src/plugins/vision_speed_estimate.cpp	/^	ros::Subscriber vision_vel_sub;$/;"	m	class:mavplugin::VisionSpeedEstimatePlugin	file:
voltage	mavros/src/plugins/sys_status.cpp	/^	float voltage;$/;"	m	class:mavplugin::BatteryStatusDiag	file:
vs	test_mavros/include/test_mavros/tests/offboard_control.h	/^	geometry_msgs::TwistStamped vs;$/;"	m	class:testsetup::OffboardControl
wait_ack_for	mavros/src/plugins/command.cpp	/^	bool wait_ack_for(CommandTransaction *tr) {$/;"	f	class:mavplugin::CommandPlugin	file:
wait_and_move	test_mavros/include/test_mavros/tests/offboard_control.h	/^	void wait_and_move(geometry_msgs::PoseStamped target){$/;"	f	class:testsetup::OffboardControl
wait_completion	mavros/src/plugins/ftp.cpp	/^	bool wait_completion(const int msecs) {$/;"	f	class:mavplugin::FTPPlugin	file:
wait_fcu_connection	mavros/src/mavros/utils.py	/^def wait_fcu_connection(timeout=None):$/;"	f
wait_fetch_all	mavros/src/plugins/param.cpp	/^	bool wait_fetch_all() {$/;"	f	class:mavplugin::ParamPlugin	file:
wait_fetch_all	mavros/src/plugins/waypoint.cpp	/^	bool wait_fetch_all() {$/;"	f	class:mavplugin::WaypointPlugin	file:
wait_one	libmavconn/test/test_mavconn.cpp	/^	bool wait_one() {$/;"	f	class:UDP
wait_param_set_ack_for	mavros/src/plugins/param.cpp	/^	bool wait_param_set_ack_for(ParamSetOpt *opt) {$/;"	f	class:mavplugin::ParamPlugin	file:
wait_push_all	mavros/src/plugins/waypoint.cpp	/^	bool wait_push_all() {$/;"	f	class:mavplugin::WaypointPlugin	file:
waypoints	mavros/src/plugins/waypoint.cpp	/^	std::vector<WaypointItem> waypoints;$/;"	m	class:mavplugin::WaypointPlugin	file:
weak_link	mavros/include/mavros/mavlink_diag.h	/^	mavconn::MAVConnInterface::WeakPtr weak_link;$/;"	m	class:mavros::MavlinkDiag
wind_pub	mavros/src/plugins/vfr_hud.cpp	/^	ros::Publisher wind_pub;$/;"	m	class:mavplugin::VfrHudPlugin	file:
window_size_	mavros/src/plugins/sys_status.cpp	/^	const size_t window_size_;$/;"	m	class:mavplugin::HeartbeatStatus	file:
window_size_	mavros/src/plugins/sys_time.cpp	/^	const size_t window_size_;$/;"	m	class:mavplugin::TimeSyncStatus	file:
wp_count	mavros/src/plugins/waypoint.cpp	/^	size_t wp_count;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_cur_active	mavros/src/plugins/waypoint.cpp	/^	size_t wp_cur_active;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_cur_id	mavros/src/plugins/waypoint.cpp	/^	size_t wp_cur_id;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_list_pub	mavros/src/plugins/waypoint.cpp	/^	ros::Publisher wp_list_pub;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_marker_pub	mavros_extras/src/copter_visualization.cpp	/^ros::Publisher wp_marker_pub;$/;"	v
wp_marker_pub	mavros_extras/src/copter_visualization1.cpp	/^ros::Publisher wp_marker_pub;$/;"	v
wp_marker_pub	mavros_extras/src/copter_visualization2.cpp	/^ros::Publisher wp_marker_pub;$/;"	v
wp_marker_pub	mavros_extras/src/copter_visualization3.cpp	/^ros::Publisher wp_marker_pub;$/;"	v
wp_nh	mavros/src/plugins/waypoint.cpp	/^	ros::NodeHandle wp_nh;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_retries	mavros/src/plugins/waypoint.cpp	/^	size_t wp_retries;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_set_active	mavros/src/plugins/waypoint.cpp	/^	size_t wp_set_active;$/;"	m	class:mavplugin::WaypointPlugin	file:
wp_state	mavros/src/plugins/waypoint.cpp	/^	} wp_state;$/;"	m	class:mavplugin::WaypointPlugin	typeref:enum:mavplugin::WaypointPlugin::__anon3	file:
wp_timer	mavros/src/plugins/waypoint.cpp	/^	ros::Timer wp_timer;$/;"	m	class:mavplugin::WaypointPlugin	file:
write	mavros/src/mavros/ftp.py	/^    def write(self, bin_data):$/;"	m	class:FTPFile
write	mavros/src/mavros/mission.py	/^    def write(self, file_, waypoints):$/;"	m	class:QGroundControlWP
write	mavros/src/mavros/mission.py	/^    def write(self, file_, waypoints):$/;"	m	class:WaypointFile
write	mavros/src/mavros/param.py	/^    def write(self, file_, parameters):$/;"	m	class:MissionPlannerParam
write	mavros/src/mavros/param.py	/^    def write(self, file_, parameters):$/;"	m	class:QGroundControlParam
write	mavros/src/mavros/param.py	/^    def write(self, file_, parametes):$/;"	m	class:ParamFile
write	mavros_extras/scripts/mavftpfuse	/^    def write(self, path, data, offset, fh):$/;"	m	class:MavFtp
write_buffer	mavros/src/plugins/ftp.cpp	/^	V_FileData write_buffer;$/;"	m	class:mavplugin::FTPPlugin	file:
write_bytes_to_copy	mavros/src/plugins/ftp.cpp	/^	size_t write_bytes_to_copy() {$/;"	f	class:mavplugin::FTPPlugin	file:
write_cb	mavros/src/plugins/ftp.cpp	/^	bool write_cb(mavros_msgs::FileWrite::Request &req,$/;"	f	class:mavplugin::FTPPlugin	file:
write_file	mavros/src/plugins/ftp.cpp	/^	bool write_file(std::string &path, size_t off, V_FileData &data) {$/;"	f	class:mavplugin::FTPPlugin	file:
write_file_end	mavros/src/plugins/ftp.cpp	/^	void write_file_end() {$/;"	f	class:mavplugin::FTPPlugin	file:
write_it	mavros/src/plugins/ftp.cpp	/^	V_FileData::iterator write_it;$/;"	m	class:mavplugin::FTPPlugin	file:
write_offset	mavros/src/plugins/ftp.cpp	/^	uint32_t write_offset;$/;"	m	class:mavplugin::FTPPlugin	file:
write_srv	mavros/src/plugins/ftp.cpp	/^	ros::ServiceServer write_srv;$/;"	m	class:mavplugin::FTPPlugin	file:
write_team_temp	mavros_extras/src/plugins/uav_pos_set.cpp	/^	demo_test::pos_write_team write_team_temp;$/;"	m	class:mavplugin::UavPosSetPlugin	file:
x_lat	mavros/src/plugins/waypoint.cpp	/^	double x_lat;$/;"	m	class:mavplugin::WaypointItem	file:
y_long	mavros/src/plugins/waypoint.cpp	/^	double y_long;$/;"	m	class:mavplugin::WaypointItem	file:
yawrate_d_gain	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double yawrate_d_gain;$/;"	m	class:testsetup::OffboardControl
yawrate_i_gain	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double yawrate_i_gain;$/;"	m	class:testsetup::OffboardControl
yawrate_i_max	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double yawrate_i_max;$/;"	m	class:testsetup::OffboardControl
yawrate_i_min	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double yawrate_i_min;$/;"	m	class:testsetup::OffboardControl
yawrate_p_gain	test_mavros/include/test_mavros/tests/offboard_control.h	/^	double yawrate_p_gain;$/;"	m	class:testsetup::OffboardControl
z_alt	mavros/src/plugins/waypoint.cpp	/^	double z_alt;$/;"	m	class:mavplugin::WaypointItem	file:
~MAVConnInterface	libmavconn/include/mavconn/interface.h	/^	virtual ~MAVConnInterface() {$/;"	f	class:mavconn::MAVConnInterface
~MAVConnSerial	libmavconn/src/serial.cpp	/^MAVConnSerial::~MAVConnSerial() {$/;"	f	class:mavconn::MAVConnSerial
~MAVConnTCPClient	libmavconn/src/tcp.cpp	/^MAVConnTCPClient::~MAVConnTCPClient() {$/;"	f	class:mavconn::MAVConnTCPClient
~MAVConnTCPServer	libmavconn/src/tcp.cpp	/^MAVConnTCPServer::~MAVConnTCPServer() {$/;"	f	class:mavconn::MAVConnTCPServer
~MAVConnUDP	libmavconn/src/udp.cpp	/^MAVConnUDP::~MAVConnUDP() {$/;"	f	class:mavconn::MAVConnUDP
~MavRos	mavros/include/mavros/mavros.h	/^	~MavRos() {};$/;"	f	class:mavros::MavRos
~MavRosPlugin	mavros/include/mavros/mavros_plugin.h	/^	virtual ~MavRosPlugin() {};$/;"	f	class:mavplugin::MavRosPlugin
~MsgBuffer	libmavconn/include/mavconn/msgbuffer.h	/^	virtual ~MsgBuffer() {$/;"	f	struct:mavconn::MsgBuffer
~PIDController	test_mavros/include/test_mavros/utils/pid_controller.h	/^	~PIDController() {};$/;"	f	class:pidcontroller::PIDController
~SitlTest	test_mavros/include/test_mavros/sitl_test/sitl_test.h	/^	~SitlTest() {};$/;"	f	class:sitltest::SitlTest
~TestSetup	test_mavros/include/test_mavros/sitl_test/test_setup.h	/^	~TestSetup() {};$/;"	f	class:testsetup::TestSetup
~UAS	mavros/include/mavros/mavros_uas.h	/^	~UAS() {};$/;"	f	class:mavros::UAS
